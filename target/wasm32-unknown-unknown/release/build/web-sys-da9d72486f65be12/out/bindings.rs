# [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `CanvasRenderingContext2D` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct CanvasRenderingContext2d { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_CanvasRenderingContext2d : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for CanvasRenderingContext2d { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for CanvasRenderingContext2d { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a CanvasRenderingContext2d { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { CanvasRenderingContext2d { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for CanvasRenderingContext2d { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a CanvasRenderingContext2d { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for CanvasRenderingContext2d { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < CanvasRenderingContext2d > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( CanvasRenderingContext2d { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for CanvasRenderingContext2d { # [ inline ] fn from ( obj : JsValue ) -> CanvasRenderingContext2d { CanvasRenderingContext2d { obj } } } impl AsRef < JsValue > for CanvasRenderingContext2d { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < CanvasRenderingContext2d > for JsValue { # [ inline ] fn from ( obj : CanvasRenderingContext2d ) -> JsValue { obj . obj } } impl JsCast for CanvasRenderingContext2d { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_CanvasRenderingContext2D ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_CanvasRenderingContext2D ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { CanvasRenderingContext2d { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const CanvasRenderingContext2d ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for CanvasRenderingContext2d { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < CanvasRenderingContext2d > for Object { # [ inline ] fn from ( obj : CanvasRenderingContext2d ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for CanvasRenderingContext2d { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_window_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_window_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let window = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( window , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; let bg_color = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bg_color , & mut __stack ) ; __widl_f_draw_window_CanvasRenderingContext2D ( self_ , window , x , y , w , h , bg_color , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_window_with_flags_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window_with_flags ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str , flags : u32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_window_with_flags_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , window : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bg_color : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , flags : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let window = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( window , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; let bg_color = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bg_color , & mut __stack ) ; let flags = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( flags , & mut __stack ) ; __widl_f_draw_window_with_flags_CanvasRenderingContext2D ( self_ , window , x , y , w , h , bg_color , flags , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawWindow()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn draw_window_with_flags ( & self , window : & Window , x : f64 , y : f64 , w : f64 , h : f64 , bg_color : & str , flags : u32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_canvas_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < Option < HtmlCanvasElement > as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `canvas` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn canvas ( & self , ) -> Option < HtmlCanvasElement > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_canvas_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < HtmlCanvasElement > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_canvas_CanvasRenderingContext2D ( self_ ) } ; < Option < HtmlCanvasElement > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `canvas` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn canvas ( & self , ) -> Option < HtmlCanvasElement > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_global_alpha_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `globalAlpha` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_alpha ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_global_alpha_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `globalAlpha` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_alpha ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_global_alpha_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `globalAlpha` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_alpha ( & self , global_alpha : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_global_alpha_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_alpha : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let global_alpha = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( global_alpha , & mut __stack ) ; __widl_f_set_global_alpha_CanvasRenderingContext2D ( self_ , global_alpha ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `globalAlpha` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_alpha ( & self , global_alpha : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_global_composite_operation_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `globalCompositeOperation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_composite_operation ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_global_composite_operation_CanvasRenderingContext2D ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `globalCompositeOperation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn global_composite_operation ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_global_composite_operation_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `globalCompositeOperation` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_composite_operation ( & self , global_composite_operation : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_global_composite_operation_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , global_composite_operation : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let global_composite_operation = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( global_composite_operation , & mut __stack ) ; __widl_f_set_global_composite_operation_CanvasRenderingContext2D ( self_ , global_composite_operation , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `globalCompositeOperation` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_global_composite_operation ( & self , global_composite_operation : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element ( & self , image : & HtmlImageElement , dx : f64 , dy : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; __widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D ( self_ , image , dx , dy , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element ( & self , image : & HtmlImageElement , dx : f64 , dy : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_canvas_element_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element ( & self , image : & HtmlCanvasElement , dx : f64 , dy : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_canvas_element_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; __widl_f_draw_image_with_html_canvas_element_CanvasRenderingContext2D ( self_ , image , dx , dy , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element ( & self , image : & HtmlCanvasElement , dx : f64 , dy : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_image_element_and_dw_and_dh_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element_and_dw_and_dh ( & self , image : & HtmlImageElement , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_image_element_and_dw_and_dh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; let dw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dw , & mut __stack ) ; let dh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dh , & mut __stack ) ; __widl_f_draw_image_with_html_image_element_and_dw_and_dh_CanvasRenderingContext2D ( self_ , image , dx , dy , dw , dh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element_and_dw_and_dh ( & self , image : & HtmlImageElement , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_canvas_element_and_dw_and_dh_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element_and_dw_and_dh ( & self , image : & HtmlCanvasElement , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_canvas_element_and_dw_and_dh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; let dw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dw , & mut __stack ) ; let dh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dh , & mut __stack ) ; __widl_f_draw_image_with_html_canvas_element_and_dw_and_dh_CanvasRenderingContext2D ( self_ , image , dx , dy , dw , dh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element_and_dw_and_dh ( & self , image : & HtmlCanvasElement , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh ( & self , image : & HtmlImageElement , sx : f64 , sy : f64 , sw : f64 , sh : f64 , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let sx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sx , & mut __stack ) ; let sy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sy , & mut __stack ) ; let sw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; let dw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dw , & mut __stack ) ; let dh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dh , & mut __stack ) ; __widl_f_draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( self_ , image , sx , sy , sw , sh , dx , dy , dw , dh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh ( & self , image : & HtmlImageElement , sx : f64 , sy : f64 , sw : f64 , sh : f64 , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh ( & self , image : & HtmlCanvasElement , sx : f64 , sy : f64 , sw : f64 , sh : f64 , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dw : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dh : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image , & mut __stack ) ; let sx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sx , & mut __stack ) ; let sy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sy , & mut __stack ) ; let sw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sw , & mut __stack ) ; let sh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sh , & mut __stack ) ; let dx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dx , & mut __stack ) ; let dy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dy , & mut __stack ) ; let dw = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dw , & mut __stack ) ; let dh = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dh , & mut __stack ) ; __widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D ( self_ , image , sx , sy , sw , sh , dx , dy , dw , dh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawImage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh ( & self , image : & HtmlCanvasElement , sx : f64 , sy : f64 , sw : f64 , sh : f64 , dx : f64 , dy : f64 , dw : f64 , dh : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_begin_path_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `beginPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn begin_path ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_begin_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_begin_path_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `beginPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn begin_path ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clip_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clip()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clip ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clip_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clip_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clip()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clip ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fill()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fill_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fill_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fill()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isPointInPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_path_with_f64 ( & self , x : f64 , y : f64 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D ( self_ , x , y ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isPointInPath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_path_with_f64 ( & self , x : f64 , y : f64 ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isPointInStroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_stroke_with_x_and_y ( & self , x : f64 , y : f64 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D ( self_ , x , y ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isPointInStroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn is_point_in_stroke_with_x_and_y ( & self , x : f64 , y : f64 ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `stroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stroke_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stroke_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `stroke()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `strokeStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_style ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stroke_style_CanvasRenderingContext2D ( self_ ) } ; < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `strokeStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_style ( & self , ) -> :: wasm_bindgen :: JsValue { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_stroke_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `strokeStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_stroke_style ( & self , stroke_style : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_stroke_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , stroke_style : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let stroke_style = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( stroke_style , & mut __stack ) ; __widl_f_set_stroke_style_CanvasRenderingContext2D ( self_ , stroke_style ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `strokeStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_stroke_style ( & self , stroke_style : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fillStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_style ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fill_style_CanvasRenderingContext2D ( self_ ) } ; < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fillStyle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_style ( & self , ) -> :: wasm_bindgen :: JsValue { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_fill_style_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fillStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_fill_style ( & self , fill_style : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_fill_style_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , fill_style : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let fill_style = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( fill_style , & mut __stack ) ; __widl_f_set_fill_style_CanvasRenderingContext2D ( self_ , fill_style ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fillStyle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_fill_style ( & self , fill_style : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_filter_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `filter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn filter ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_filter_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `filter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn filter ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_filter_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `filter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_filter ( & self , filter : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_filter_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , filter : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let filter = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( filter , & mut __stack ) ; __widl_f_set_filter_CanvasRenderingContext2D ( self_ , filter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `filter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_filter ( & self , filter : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_add_hit_region_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `addHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn add_hit_region ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_add_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_add_hit_region_CanvasRenderingContext2D ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `addHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn add_hit_region ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_hit_regions_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearHitRegions()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_hit_regions ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_hit_regions_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_hit_regions_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearHitRegions()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_hit_regions ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_hit_region_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `removeHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn remove_hit_region ( & self , id : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_hit_region_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , id : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let id = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( id , & mut __stack ) ; __widl_f_remove_hit_region_CanvasRenderingContext2D ( self_ , id ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `removeHitRegion()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn remove_hit_region ( & self , id : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `imageSmoothingEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn image_smoothing_enabled ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_image_smoothing_enabled_CanvasRenderingContext2D ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `imageSmoothingEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn image_smoothing_enabled ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `imageSmoothingEnabled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_image_smoothing_enabled ( & self , image_smoothing_enabled : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , image_smoothing_enabled : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let image_smoothing_enabled = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( image_smoothing_enabled , & mut __stack ) ; __widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D ( self_ , image_smoothing_enabled ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `imageSmoothingEnabled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_image_smoothing_enabled ( & self , image_smoothing_enabled : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_line_dash_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn get_line_dash ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_line_dash_CanvasRenderingContext2D ( self_ ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn get_line_dash ( & self , ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_dash_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash ( & self , segments : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_line_dash_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , segments : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let segments = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( segments , & mut __stack ) ; __widl_f_set_line_dash_CanvasRenderingContext2D ( self_ , segments , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setLineDash()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash ( & self , segments : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_width ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_width_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_width ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_width ( & self , line_width : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_line_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_width : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_width = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_width , & mut __stack ) ; __widl_f_set_line_width_CanvasRenderingContext2D ( self_ , line_width ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_width ( & self , line_width : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_cap_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineCap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_cap ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_cap_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineCap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_cap ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_cap_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineCap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_cap ( & self , line_cap : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_line_cap_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_cap : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_cap = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_cap , & mut __stack ) ; __widl_f_set_line_cap_CanvasRenderingContext2D ( self_ , line_cap ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineCap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_cap ( & self , line_cap : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_join_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineJoin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_join ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_join_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineJoin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_join ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_join_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineJoin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_join ( & self , line_join : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_line_join_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_join : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_join = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_join , & mut __stack ) ; __widl_f_set_line_join_CanvasRenderingContext2D ( self_ , line_join ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineJoin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_join ( & self , line_join : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_miter_limit_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `miterLimit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn miter_limit ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_miter_limit_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `miterLimit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn miter_limit ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_miter_limit_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `miterLimit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_miter_limit ( & self , miter_limit : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_miter_limit_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , miter_limit : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let miter_limit = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( miter_limit , & mut __stack ) ; __widl_f_set_miter_limit_CanvasRenderingContext2D ( self_ , miter_limit ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `miterLimit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_miter_limit ( & self , miter_limit : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_dash_offset_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineDashOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_dash_offset ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_line_dash_offset_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineDashOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_dash_offset ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_line_dash_offset_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineDashOffset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash_offset ( & self , line_dash_offset : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_line_dash_offset_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , line_dash_offset : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let line_dash_offset = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( line_dash_offset , & mut __stack ) ; __widl_f_set_line_dash_offset_CanvasRenderingContext2D ( self_ , line_dash_offset ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineDashOffset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_line_dash_offset ( & self , line_dash_offset : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_arc_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; let start_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; __widl_f_arc_CanvasRenderingContext2D ( self_ , x , y , radius , start_angle , end_angle , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_with_anticlockwise ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; let start_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; let anticlockwise = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( anticlockwise , & mut __stack ) ; __widl_f_arc_with_anticlockwise_CanvasRenderingContext2D ( self_ , x , y , radius , start_angle , end_angle , anticlockwise , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `arc()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_with_anticlockwise ( & self , x : f64 , y : f64 , radius : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_arc_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `arcTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_to ( & self , x1 : f64 , y1 : f64 , x2 : f64 , y2 : f64 , radius : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_arc_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x1 : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y1 : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x2 : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y2 : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x1 = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x1 , & mut __stack ) ; let y1 = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y1 , & mut __stack ) ; let x2 = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x2 , & mut __stack ) ; let y2 = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y2 , & mut __stack ) ; let radius = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius , & mut __stack ) ; __widl_f_arc_to_CanvasRenderingContext2D ( self_ , x1 , y1 , x2 , y2 , radius , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `arcTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn arc_to ( & self , x1 : f64 , y1 : f64 , x2 : f64 , y2 : f64 , radius : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_bezier_curve_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `bezierCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn bezier_curve_to ( & self , cp1x : f64 , cp1y : f64 , cp2x : f64 , cp2y : f64 , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_bezier_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp1y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cp2y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cp1x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp1x , & mut __stack ) ; let cp1y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp1y , & mut __stack ) ; let cp2x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp2x , & mut __stack ) ; let cp2y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cp2y , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_bezier_curve_to_CanvasRenderingContext2D ( self_ , cp1x , cp1y , cp2x , cp2y , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `bezierCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn bezier_curve_to ( & self , cp1x : f64 , cp1y : f64 , cp2x : f64 , cp2y : f64 , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_close_path_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `closePath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn close_path ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_close_path_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_close_path_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `closePath()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn close_path ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ellipse_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ellipse_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius_x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_x , & mut __stack ) ; let radius_y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_y , & mut __stack ) ; let rotation = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( rotation , & mut __stack ) ; let start_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; __widl_f_ellipse_CanvasRenderingContext2D ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse_with_anticlockwise ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , radius_y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , rotation : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , anticlockwise : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let radius_x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_x , & mut __stack ) ; let radius_y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( radius_y , & mut __stack ) ; let rotation = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( rotation , & mut __stack ) ; let start_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_angle , & mut __stack ) ; let end_angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_angle , & mut __stack ) ; let anticlockwise = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( anticlockwise , & mut __stack ) ; __widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D ( self_ , x , y , radius_x , radius_y , rotation , start_angle , end_angle , anticlockwise , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ellipse()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn ellipse_with_anticlockwise ( & self , x : f64 , y : f64 , radius_x : f64 , radius_y : f64 , rotation : f64 , start_angle : f64 , end_angle : f64 , anticlockwise : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_line_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lineTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_to ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_line_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_line_to_CanvasRenderingContext2D ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lineTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn line_to ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_move_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_to_CanvasRenderingContext2D ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_quadratic_curve_to_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `quadraticCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn quadratic_curve_to ( & self , cpx : f64 , cpy : f64 , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_quadratic_curve_to_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpx : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cpy : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cpx = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cpx , & mut __stack ) ; let cpy = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cpy , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_quadratic_curve_to_CanvasRenderingContext2D ( self_ , cpx , cpy , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `quadraticCurveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn quadratic_curve_to ( & self , cpx : f64 , cpy : f64 , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `rect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `rect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_clear_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn clear_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fillRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fill_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_fill_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fillRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_rect_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `strokeRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stroke_rect_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , w : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , h : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let w = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( w , & mut __stack ) ; let h = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( h , & mut __stack ) ; __widl_f_stroke_rect_CanvasRenderingContext2D ( self_ , x , y , w , h ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `strokeRect()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_rect ( & self , x : f64 , y : f64 , w : f64 , h : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_offset_x_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowOffsetX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_x ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_offset_x_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowOffsetX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_x ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowOffsetX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_x ( & self , shadow_offset_x : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_offset_x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_offset_x , & mut __stack ) ; __widl_f_set_shadow_offset_x_CanvasRenderingContext2D ( self_ , shadow_offset_x ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowOffsetX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_x ( & self , shadow_offset_x : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_offset_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowOffsetY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_y ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_offset_y_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowOffsetY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_offset_y ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowOffsetY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_y ( & self , shadow_offset_y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_offset_y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_offset_y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_offset_y , & mut __stack ) ; __widl_f_set_shadow_offset_y_CanvasRenderingContext2D ( self_ , shadow_offset_y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowOffsetY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_offset_y ( & self , shadow_offset_y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_blur_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowBlur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_blur ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_blur_CanvasRenderingContext2D ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowBlur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_blur ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_blur_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowBlur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_blur ( & self , shadow_blur : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_shadow_blur_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_blur : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_blur = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_blur , & mut __stack ) ; __widl_f_set_shadow_blur_CanvasRenderingContext2D ( self_ , shadow_blur ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowBlur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_blur ( & self , shadow_blur : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shadow_color_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowColor` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_color ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shadow_color_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowColor` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn shadow_color ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_shadow_color_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shadowColor` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_color ( & self , shadow_color : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_shadow_color_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shadow_color : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let shadow_color = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shadow_color , & mut __stack ) ; __widl_f_set_shadow_color_CanvasRenderingContext2D ( self_ , shadow_color ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shadowColor` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_shadow_color ( & self , shadow_color : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_restore_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `restore()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn restore ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_restore_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_restore_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `restore()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn restore ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_save_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `save()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn save ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_save_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_save_CanvasRenderingContext2D ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `save()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn save ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_text_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fill_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_fill_text_CanvasRenderingContext2D ( self_ , text , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let max_width = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( max_width , & mut __stack ) ; __widl_f_fill_text_with_max_width_CanvasRenderingContext2D ( self_ , text , x , y , max_width , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fillText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn fill_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_text_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stroke_text_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_stroke_text_CanvasRenderingContext2D ( self_ , text , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text ( & self , text : & str , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_width : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; let max_width = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( max_width , & mut __stack ) ; __widl_f_stroke_text_with_max_width_CanvasRenderingContext2D ( self_ , text , x , y , max_width , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `strokeText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn stroke_text_with_max_width ( & self , text : & str , x : f64 , y : f64 , max_width : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_font_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `font` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn font ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_font_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `font` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn font ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_font_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `font` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_font ( & self , font : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_font_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , font : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let font = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( font , & mut __stack ) ; __widl_f_set_font_CanvasRenderingContext2D ( self_ , font ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `font` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_font ( & self , font : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_text_align_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `textAlign` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_align ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_text_align_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `textAlign` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_align ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_text_align_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `textAlign` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_align ( & self , text_align : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_text_align_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_align : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text_align = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text_align , & mut __stack ) ; __widl_f_set_text_align_CanvasRenderingContext2D ( self_ , text_align ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `textAlign` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_align ( & self , text_align : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_text_baseline_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `textBaseline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_baseline ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_text_baseline_CanvasRenderingContext2D ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `textBaseline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn text_baseline ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_text_baseline_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `textBaseline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_baseline ( & self , text_baseline : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_text_baseline_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text_baseline : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let text_baseline = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text_baseline , & mut __stack ) ; __widl_f_set_text_baseline_CanvasRenderingContext2D ( self_ , text_baseline ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `textBaseline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_text_baseline ( & self , text_baseline : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_reset_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `resetTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn reset_transform ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_reset_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_reset_transform_CanvasRenderingContext2D ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `resetTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn reset_transform ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_rotate_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `rotate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rotate ( & self , angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_rotate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , angle : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let angle = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( angle , & mut __stack ) ; __widl_f_rotate_CanvasRenderingContext2D ( self_ , angle , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `rotate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn rotate ( & self , angle : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scale_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scale()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn scale ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scale_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scale_CanvasRenderingContext2D ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scale()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn scale ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a , & mut __stack ) ; let b = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( b , & mut __stack ) ; let c = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( c , & mut __stack ) ; let d = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( d , & mut __stack ) ; let e = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( e , & mut __stack ) ; let f = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( f , & mut __stack ) ; __widl_f_set_transform_CanvasRenderingContext2D ( self_ , a , b , c , d , e , f , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTransform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn set_transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_transform_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `transform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_transform_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , b : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , c : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , d : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , e : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , f : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a , & mut __stack ) ; let b = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( b , & mut __stack ) ; let c = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( c , & mut __stack ) ; let d = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( d , & mut __stack ) ; let e = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( e , & mut __stack ) ; let f = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( f , & mut __stack ) ; __widl_f_transform_CanvasRenderingContext2D ( self_ , a , b , c , d , e , f , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `transform()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn transform ( & self , a : f64 , b : f64 , c : f64 , d : f64 , e : f64 , f : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_translate_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `translate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn translate ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_translate_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_translate_CanvasRenderingContext2D ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `translate()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*" ] # [ allow ( clippy :: all ) ] pub fn translate ( & self , x : f64 , y : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_custom_focus_ring_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Element as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawCustomFocusRing()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawCustomFocusRing)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn draw_custom_focus_ring ( & self , element : & Element ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_custom_focus_ring_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , element : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let element = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( element , & mut __stack ) ; __widl_f_draw_custom_focus_ring_CanvasRenderingContext2D ( self_ , element ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawCustomFocusRing()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawCustomFocusRing)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn draw_custom_focus_ring ( & self , element : & Element ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_draw_focus_if_needed_CanvasRenderingContext2D ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl CanvasRenderingContext2d { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `drawFocusIfNeeded()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn draw_focus_if_needed ( & self , element : & Element ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_draw_focus_if_needed_CanvasRenderingContext2D ( self_ : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , element : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let element = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( element , & mut __stack ) ; __widl_f_draw_focus_if_needed_CanvasRenderingContext2D ( self_ , element , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `drawFocusIfNeeded()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn draw_focus_if_needed ( & self , element : & Element ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Document` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Document { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Document : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Document { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for Document { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Document { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Document { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Document { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { Document { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for Document { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Document { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Document { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Document > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Document { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for Document { # [ inline ] fn from ( obj : JsValue ) -> Document { Document { obj } } } impl AsRef < JsValue > for Document { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < Document > for JsValue { # [ inline ] fn from ( obj : Document ) -> JsValue { obj . obj } } impl JsCast for Document { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_Document ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Document ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Document { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Document ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for Document { type Target = EventTarget ; # [ inline ] fn deref ( & self ) -> & EventTarget { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < Document > for EventTarget { # [ inline ] fn from ( obj : Document ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for Document { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < Document > for Object { # [ inline ] fn from ( obj : Document ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Document { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < Document as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new Document(..)` constructor, creating a new instance of `Document`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < Document , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_Document ( exn_data_ptr : * mut u32 ) -> < Document as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_new_Document ( exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Document as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new Document(..)` constructor, creating a new instance of `Document`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < Document , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Element as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element ( & self , local_name : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , local_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let local_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( local_name , & mut __stack ) ; __widl_f_create_element_Document ( self_ , local_name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element ( & self , local_name : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_element_with_str_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Element as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_with_str ( & self , local_name : & str , options : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_element_with_str_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , local_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , options : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let local_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( local_name , & mut __stack ) ; let options = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( options , & mut __stack ) ; __widl_f_create_element_with_str_Document ( self_ , local_name , options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_with_str ( & self , local_name : & str , options : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_element_ns_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Element as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_ns ( & self , namespace : Option < & str > , qualified_name : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_element_ns_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , qualified_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let qualified_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( qualified_name , & mut __stack ) ; __widl_f_create_element_ns_Document ( self_ , namespace , qualified_name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_ns ( & self , namespace : Option < & str > , qualified_name : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_element_ns_with_str_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Element as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_ns_with_str ( & self , namespace : Option < & str > , qualified_name : & str , options : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_element_ns_with_str_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , qualified_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , options : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let qualified_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( qualified_name , & mut __stack ) ; let options = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( options , & mut __stack ) ; __widl_f_create_element_ns_with_str_Document ( self_ , namespace , qualified_name , options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Element as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createElementNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn create_element_ns_with_str ( & self , namespace : Option < & str > , qualified_name : & str , options : & str ) -> Result < Element , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_enable_style_sheets_for_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `enableStyleSheetsForSet()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn enable_style_sheets_for_set ( & self , name : Option < & str > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_enable_style_sheets_for_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_enable_style_sheets_for_set_Document ( self_ , name ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `enableStyleSheetsForSet()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn enable_style_sheets_for_set ( & self , name : Option < & str > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exit_fullscreen_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `exitFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn exit_fullscreen ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exit_fullscreen_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_exit_fullscreen_Document ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `exitFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn exit_fullscreen ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exit_pointer_lock_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `exitPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn exit_pointer_lock ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exit_pointer_lock_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_exit_pointer_lock_Document ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `exitPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn exit_pointer_lock ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_animations_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getAnimations()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn get_animations ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_animations_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_animations_Document ( self_ ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getAnimations()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn get_animations ( & self , ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_element_by_id_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getElementById()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_element_by_id ( & self , element_id : & str ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_element_by_id_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , element_id : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let element_id = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( element_id , & mut __stack ) ; __widl_f_get_element_by_id_Document ( self_ , element_id ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getElementById()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_element_by_id ( & self , element_id : & str ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_focus_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasFocus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn has_focus ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_focus_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_has_focus_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasFocus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn has_focus ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_query_selector_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn query_selector ( & self , selectors : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_query_selector_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selectors : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selectors = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selectors , & mut __stack ) ; __widl_f_query_selector_Document ( self_ , selectors , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn query_selector ( & self , selectors : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_release_capture_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn release_capture ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_release_capture_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_release_capture_Document ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn release_capture ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_url_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `URL` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn url ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_url_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_url_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `URL` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn url ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_document_uri_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `documentURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn document_uri ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_document_uri_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_document_uri_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `documentURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn document_uri ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_compat_mode_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `compatMode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn compat_mode ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_compat_mode_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_compat_mode_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `compatMode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn compat_mode ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_character_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `characterSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn character_set ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_character_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_character_set_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `characterSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn character_set ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_charset_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `charset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn charset ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_charset_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_charset_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `charset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn charset ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_input_encoding_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `inputEncoding` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn input_encoding ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_input_encoding_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_input_encoding_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `inputEncoding` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn input_encoding ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_content_type_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `contentType` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn content_type ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_content_type_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_content_type_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `contentType` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn content_type ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_document_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `documentElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn document_element ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_document_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_document_element_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `documentElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn document_element ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_referrer_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `referrer` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn referrer ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_referrer_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_referrer_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `referrer` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn referrer ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_modified_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lastModified` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn last_modified ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_last_modified_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_last_modified_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lastModified` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn last_modified ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ready_state_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `readyState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ready_state ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ready_state_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ready_state_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `readyState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ready_state ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_title_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `title` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn title ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_title_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_title_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `title` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn title ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_title_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `title` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_title ( & self , title : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_title_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , title : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let title = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( title , & mut __stack ) ; __widl_f_set_title_Document ( self_ , title ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `title` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_title ( & self , title : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `dir` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn dir ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dir_Document ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `dir` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn dir ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_dir_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `dir` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_dir ( & self , dir : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_dir_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , dir : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let dir = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( dir , & mut __stack ) ; __widl_f_set_dir_Document ( self_ , dir ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `dir` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_dir ( & self , dir : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_default_view_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `defaultView` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn default_view ( & self , ) -> Option < Window > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_default_view_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_default_view_Document ( self_ ) } ; < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `defaultView` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn default_view ( & self , ) -> Option < Window > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onreadystatechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreadystatechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onreadystatechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onreadystatechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onreadystatechange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreadystatechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onreadystatechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onreadystatechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreadystatechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreadystatechange ( & self , onreadystatechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onreadystatechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onreadystatechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onreadystatechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onreadystatechange , & mut __stack ) ; __widl_f_set_onreadystatechange_Document ( self_ , onreadystatechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreadystatechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreadystatechange ( & self , onreadystatechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onbeforescriptexecute_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforescriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforescriptexecute ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onbeforescriptexecute_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onbeforescriptexecute_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforescriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforescriptexecute ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforescriptexecute_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforescriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforescriptexecute ( & self , onbeforescriptexecute : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onbeforescriptexecute_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforescriptexecute : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onbeforescriptexecute = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onbeforescriptexecute , & mut __stack ) ; __widl_f_set_onbeforescriptexecute_Document ( self_ , onbeforescriptexecute ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforescriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforescriptexecute ( & self , onbeforescriptexecute : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onafterscriptexecute_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onafterscriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onafterscriptexecute ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onafterscriptexecute_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onafterscriptexecute_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onafterscriptexecute` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onafterscriptexecute ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onafterscriptexecute_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onafterscriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onafterscriptexecute ( & self , onafterscriptexecute : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onafterscriptexecute_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onafterscriptexecute : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onafterscriptexecute = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onafterscriptexecute , & mut __stack ) ; __widl_f_set_onafterscriptexecute_Document ( self_ , onafterscriptexecute ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onafterscriptexecute` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onafterscriptexecute ( & self , onafterscriptexecute : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselectionchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectionchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselectionchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onselectionchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselectionchange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectionchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselectionchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselectionchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectionchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectionchange ( & self , onselectionchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onselectionchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselectionchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselectionchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselectionchange , & mut __stack ) ; __widl_f_set_onselectionchange_Document ( self_ , onselectionchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectionchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectionchange ( & self , onselectionchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_current_script_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `currentScript` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn current_script ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_current_script_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_current_script_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `currentScript` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn current_script ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fullscreen` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fullscreen_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fullscreen_Document ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fullscreen` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_enabled_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fullscreenEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen_enabled ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fullscreen_enabled_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fullscreen_enabled_Document ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fullscreenEnabled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen_enabled ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onfullscreenchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfullscreenchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfullscreenchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onfullscreenchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onfullscreenchange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfullscreenchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfullscreenchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onfullscreenchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfullscreenchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfullscreenchange ( & self , onfullscreenchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onfullscreenchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfullscreenchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onfullscreenchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onfullscreenchange , & mut __stack ) ; __widl_f_set_onfullscreenchange_Document ( self_ , onfullscreenchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfullscreenchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfullscreenchange ( & self , onfullscreenchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onfullscreenerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfullscreenerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfullscreenerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onfullscreenerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onfullscreenerror_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfullscreenerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfullscreenerror ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onfullscreenerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfullscreenerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfullscreenerror ( & self , onfullscreenerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onfullscreenerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfullscreenerror : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onfullscreenerror = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onfullscreenerror , & mut __stack ) ; __widl_f_set_onfullscreenerror_Document ( self_ , onfullscreenerror ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfullscreenerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfullscreenerror ( & self , onfullscreenerror : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerlockchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerlockchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerlockchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerlockchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerlockchange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerlockchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerlockchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerlockchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerlockchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerlockchange ( & self , onpointerlockchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerlockchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerlockchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerlockchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerlockchange , & mut __stack ) ; __widl_f_set_onpointerlockchange_Document ( self_ , onpointerlockchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerlockchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerlockchange ( & self , onpointerlockchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerlockerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerlockerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerlockerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerlockerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerlockerror_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerlockerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerlockerror ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerlockerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerlockerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerlockerror ( & self , onpointerlockerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerlockerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerlockerror : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerlockerror = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerlockerror , & mut __stack ) ; __widl_f_set_onpointerlockerror_Document ( self_ , onpointerlockerror ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerlockerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerlockerror ( & self , onpointerlockerror : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_hidden_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hidden` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn hidden ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_hidden_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_hidden_Document ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hidden` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn hidden ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvisibilitychange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvisibilitychange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onvisibilitychange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvisibilitychange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvisibilitychange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvisibilitychange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onvisibilitychange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvisibilitychange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvisibilitychange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvisibilitychange ( & self , onvisibilitychange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvisibilitychange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvisibilitychange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvisibilitychange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvisibilitychange , & mut __stack ) ; __widl_f_set_onvisibilitychange_Document ( self_ , onvisibilitychange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvisibilitychange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvisibilitychange ( & self , onvisibilitychange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_selected_style_sheet_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `selectedStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn selected_style_sheet_set ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_selected_style_sheet_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_selected_style_sheet_set_Document ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `selectedStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn selected_style_sheet_set ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_selected_style_sheet_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `selectedStyleSheetSet` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_selected_style_sheet_set ( & self , selected_style_sheet_set : Option < & str > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_selected_style_sheet_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selected_style_sheet_set : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selected_style_sheet_set = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selected_style_sheet_set , & mut __stack ) ; __widl_f_set_selected_style_sheet_set_Document ( self_ , selected_style_sheet_set ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `selectedStyleSheetSet` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_selected_style_sheet_set ( & self , selected_style_sheet_set : Option < & str > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_style_sheet_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lastStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn last_style_sheet_set ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_last_style_sheet_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_last_style_sheet_set_Document ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lastStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn last_style_sheet_set ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_preferred_style_sheet_set_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `preferredStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn preferred_style_sheet_set ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_preferred_style_sheet_set_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_preferred_style_sheet_set_Document ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `preferredStyleSheetSet` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn preferred_style_sheet_set ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scrolling_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollingElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scrolling_element ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scrolling_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scrolling_element_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollingElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scrolling_element ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncopy_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncopy` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncopy ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncopy_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncopy_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncopy` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncopy ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncopy_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncopy` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncopy ( & self , oncopy : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncopy_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncopy : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncopy = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncopy , & mut __stack ) ; __widl_f_set_oncopy_Document ( self_ , oncopy ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncopy` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncopy ( & self , oncopy : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncut_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncut` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncut ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncut_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncut_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncut` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncut ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncut_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncut` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncut ( & self , oncut : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncut_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncut : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncut = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncut , & mut __stack ) ; __widl_f_set_oncut_Document ( self_ , oncut ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncut` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncut ( & self , oncut : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpaste_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpaste` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpaste ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpaste_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpaste_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpaste` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpaste ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpaste_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpaste` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpaste ( & self , onpaste : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpaste_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpaste : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpaste = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpaste , & mut __stack ) ; __widl_f_set_onpaste_Document ( self_ , onpaste ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpaste` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpaste ( & self , onpaste : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_element_from_point_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < f32 as WasmDescribe > :: describe ( ) ; < f32 as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `elementFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn element_from_point ( & self , x : f32 , y : f32 ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_element_from_point_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_element_from_point_Document ( self_ , x , y ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `elementFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn element_from_point ( & self , x : f32 , y : f32 ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_elements_from_point_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < f32 as WasmDescribe > :: describe ( ) ; < f32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `elementsFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn elements_from_point ( & self , x : f32 , y : f32 ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_elements_from_point_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_elements_from_point_Document ( self_ , x , y ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `elementsFromPoint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn elements_from_point ( & self , x : f32 , y : f32 ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_active_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `activeElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn active_element ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_active_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_active_element_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `activeElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn active_element ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_pointer_lock_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `pointerLockElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn pointer_lock_element ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_pointer_lock_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_pointer_lock_element_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `pointerLockElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn pointer_lock_element ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fullscreen_element_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fullscreenElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen_element ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fullscreen_element_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fullscreen_element_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fullscreenElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn fullscreen_element ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_box_quads_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn get_box_quads ( & self , ) -> Result < :: js_sys :: Array , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_box_quads_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_box_quads_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn get_box_quads ( & self , ) -> Result < :: js_sys :: Array , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onabort_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onabort ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onabort_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onabort_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onabort ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onabort ( & self , onabort : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onabort_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onabort : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onabort = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onabort , & mut __stack ) ; __widl_f_set_onabort_Document ( self_ , onabort ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onabort ( & self , onabort : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onblur_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onblur ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onblur_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onblur_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onblur ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onblur ( & self , onblur : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onblur_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onblur : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onblur = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onblur , & mut __stack ) ; __widl_f_set_onblur_Document ( self_ , onblur ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onblur ( & self , onblur : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfocus ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onfocus_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onfocus_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onfocus ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfocus ( & self , onfocus : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onfocus_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfocus : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onfocus = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onfocus , & mut __stack ) ; __widl_f_set_onfocus_Document ( self_ , onfocus ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfocus ( & self , onfocus : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onauxclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onauxclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onauxclick_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onauxclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onauxclick ( & self , onauxclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onauxclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onauxclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onauxclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onauxclick , & mut __stack ) ; __widl_f_set_onauxclick_Document ( self_ , onauxclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onauxclick ( & self , onauxclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncanplay_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplay_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplay ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplay ( & self , oncanplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncanplay_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplay : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplay = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplay , & mut __stack ) ; __widl_f_set_oncanplay_Document ( self_ , oncanplay ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplay ( & self , oncanplay : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplaythrough ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncanplaythrough_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplaythrough_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplaythrough ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplaythrough ( & self , oncanplaythrough : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncanplaythrough_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplaythrough : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplaythrough = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplaythrough , & mut __stack ) ; __widl_f_set_oncanplaythrough_Document ( self_ , oncanplaythrough ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplaythrough ( & self , oncanplaythrough : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onchange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onchange ( & self , onchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onchange , & mut __stack ) ; __widl_f_set_onchange_Document ( self_ , onchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onchange ( & self , onchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclick_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclick ( & self , onclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclick , & mut __stack ) ; __widl_f_set_onclick_Document ( self_ , onclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclick ( & self , onclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclose_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onclose ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onclose_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclose_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onclose ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclose ( & self , onclose : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onclose_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclose : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclose = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclose , & mut __stack ) ; __widl_f_set_onclose_Document ( self_ , onclose ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclose ( & self , onclose : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncontextmenu ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncontextmenu_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncontextmenu_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oncontextmenu ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncontextmenu ( & self , oncontextmenu : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncontextmenu_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncontextmenu : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncontextmenu = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncontextmenu , & mut __stack ) ; __widl_f_set_oncontextmenu_Document ( self_ , oncontextmenu ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncontextmenu ( & self , oncontextmenu : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondblclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondblclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondblclick_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondblclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondblclick ( & self , ondblclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondblclick_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondblclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondblclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondblclick , & mut __stack ) ; __widl_f_set_ondblclick_Document ( self_ , ondblclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondblclick ( & self , ondblclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondrag ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondrag_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrag_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondrag ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrag ( & self , ondrag : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondrag_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrag : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrag = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrag , & mut __stack ) ; __widl_f_set_ondrag_Document ( self_ , ondrag ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrag ( & self , ondrag : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragend ( & self , ondragend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragend , & mut __stack ) ; __widl_f_set_ondragend_Document ( self_ , ondragend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragend ( & self , ondragend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragenter_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragenter ( & self , ondragenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragenter , & mut __stack ) ; __widl_f_set_ondragenter_Document ( self_ , ondragenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragenter ( & self , ondragenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragexit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragexit_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragexit_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragexit ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragexit ( & self , ondragexit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragexit_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragexit : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragexit = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragexit , & mut __stack ) ; __widl_f_set_ondragexit_Document ( self_ , ondragexit ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragexit ( & self , ondragexit : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragleave_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragleave ( & self , ondragleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragleave , & mut __stack ) ; __widl_f_set_ondragleave_Document ( self_ , ondragleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragleave ( & self , ondragleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragover_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragover ( & self , ondragover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragover , & mut __stack ) ; __widl_f_set_ondragover_Document ( self_ , ondragover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragover ( & self , ondragover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondragstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragstart ( & self , ondragstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragstart , & mut __stack ) ; __widl_f_set_ondragstart_Document ( self_ , ondragstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragstart ( & self , ondragstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondrop ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondrop_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrop_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondrop ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrop ( & self , ondrop : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondrop_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrop : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrop = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrop , & mut __stack ) ; __widl_f_set_ondrop_Document ( self_ , ondrop ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrop ( & self , ondrop : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondurationchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondurationchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondurationchange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ondurationchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondurationchange ( & self , ondurationchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondurationchange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondurationchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondurationchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondurationchange , & mut __stack ) ; __widl_f_set_ondurationchange_Document ( self_ , ondurationchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondurationchange ( & self , ondurationchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onemptied ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onemptied_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onemptied_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onemptied ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onemptied ( & self , onemptied : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onemptied_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onemptied : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onemptied = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onemptied , & mut __stack ) ; __widl_f_set_onemptied_Document ( self_ , onemptied ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onemptied ( & self , onemptied : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onended_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onended ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onended_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onended_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onended ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onended ( & self , onended : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onended_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onended : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onended = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onended , & mut __stack ) ; __widl_f_set_onended_Document ( self_ , onended ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onended ( & self , onended : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninput_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oninput ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oninput_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninput_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oninput ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninput ( & self , oninput : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oninput_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninput : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninput = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninput , & mut __stack ) ; __widl_f_set_oninput_Document ( self_ , oninput ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninput ( & self , oninput : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oninvalid ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oninvalid_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninvalid_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn oninvalid ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninvalid ( & self , oninvalid : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oninvalid_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninvalid : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninvalid = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninvalid , & mut __stack ) ; __widl_f_set_oninvalid_Document ( self_ , oninvalid ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninvalid ( & self , oninvalid : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeydown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeydown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeydown_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeydown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeydown ( & self , onkeydown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeydown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeydown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeydown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeydown , & mut __stack ) ; __widl_f_set_onkeydown_Document ( self_ , onkeydown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeydown ( & self , onkeydown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeypress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeypress_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeypress_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeypress ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeypress ( & self , onkeypress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeypress_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeypress : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeypress = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeypress , & mut __stack ) ; __widl_f_set_onkeypress_Document ( self_ , onkeypress ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeypress ( & self , onkeypress : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeyup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeyup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeyup_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onkeyup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeyup ( & self , onkeyup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeyup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeyup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeyup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeyup , & mut __stack ) ; __widl_f_set_onkeyup_Document ( self_ , onkeyup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeyup ( & self , onkeyup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onload_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onload_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onload_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onload ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onload ( & self , onload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onload_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onload : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onload = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onload , & mut __stack ) ; __widl_f_set_onload_Document ( self_ , onload ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onload ( & self , onload : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadeddata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadeddata_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadeddata_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadeddata ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadeddata ( & self , onloadeddata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadeddata_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadeddata : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadeddata = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadeddata , & mut __stack ) ; __widl_f_set_onloadeddata_Document ( self_ , onloadeddata ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadeddata ( & self , onloadeddata : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadedmetadata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadedmetadata_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadedmetadata_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadedmetadata ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadedmetadata ( & self , onloadedmetadata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadedmetadata_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadedmetadata : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadedmetadata = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadedmetadata , & mut __stack ) ; __widl_f_set_onloadedmetadata_Document ( self_ , onloadedmetadata ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadedmetadata ( & self , onloadedmetadata : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadend ( & self , onloadend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadend , & mut __stack ) ; __widl_f_set_onloadend_Document ( self_ , onloadend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadend ( & self , onloadend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onloadstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadstart ( & self , onloadstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadstart , & mut __stack ) ; __widl_f_set_onloadstart_Document ( self_ , onloadstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadstart ( & self , onloadstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmousedown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmousedown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousedown_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmousedown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousedown ( & self , onmousedown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmousedown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousedown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousedown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousedown , & mut __stack ) ; __widl_f_set_onmousedown_Document ( self_ , onmousedown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousedown ( & self , onmousedown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseenter_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseenter ( & self , onmouseenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseenter , & mut __stack ) ; __widl_f_set_onmouseenter_Document ( self_ , onmouseenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseenter ( & self , onmouseenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseleave_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseleave ( & self , onmouseleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseleave , & mut __stack ) ; __widl_f_set_onmouseleave_Document ( self_ , onmouseleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseleave ( & self , onmouseleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmousemove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmousemove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousemove_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmousemove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousemove ( & self , onmousemove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmousemove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousemove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousemove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousemove , & mut __stack ) ; __widl_f_set_onmousemove_Document ( self_ , onmousemove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousemove ( & self , onmousemove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseout_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseout_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseout ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseout ( & self , onmouseout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseout_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseout : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseout = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseout , & mut __stack ) ; __widl_f_set_onmouseout_Document ( self_ , onmouseout ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseout ( & self , onmouseout : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseover_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseover ( & self , onmouseover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseover , & mut __stack ) ; __widl_f_set_onmouseover_Document ( self_ , onmouseover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseover ( & self , onmouseover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseup_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseup ( & self , onmouseup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseup , & mut __stack ) ; __widl_f_set_onmouseup_Document ( self_ , onmouseup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseup ( & self , onmouseup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwheel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwheel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwheel_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwheel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwheel ( & self , onwheel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwheel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwheel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwheel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwheel , & mut __stack ) ; __widl_f_set_onwheel_Document ( self_ , onwheel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwheel ( & self , onwheel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpause_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpause ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpause_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpause_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpause ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpause ( & self , onpause : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpause_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpause : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpause = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpause , & mut __stack ) ; __widl_f_set_onpause_Document ( self_ , onpause ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpause ( & self , onpause : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplay_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onplay_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplay_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onplay ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplay ( & self , onplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onplay_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplay : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplay = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplay , & mut __stack ) ; __widl_f_set_onplay_Document ( self_ , onplay ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplay ( & self , onplay : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onplaying ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onplaying_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplaying_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onplaying ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplaying ( & self , onplaying : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onplaying_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplaying : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplaying = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplaying , & mut __stack ) ; __widl_f_set_onplaying_Document ( self_ , onplaying ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplaying ( & self , onplaying : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onprogress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onprogress_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onprogress_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onprogress ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onprogress ( & self , onprogress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onprogress_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onprogress : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onprogress = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onprogress , & mut __stack ) ; __widl_f_set_onprogress_Document ( self_ , onprogress ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onprogress ( & self , onprogress : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onratechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onratechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onratechange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onratechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onratechange ( & self , onratechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onratechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onratechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onratechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onratechange , & mut __stack ) ; __widl_f_set_onratechange_Document ( self_ , onratechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onratechange ( & self , onratechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onreset_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onreset ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onreset_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onreset_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onreset ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreset ( & self , onreset : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onreset_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onreset : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onreset = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onreset , & mut __stack ) ; __widl_f_set_onreset_Document ( self_ , onreset ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreset ( & self , onreset : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onresize_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onresize ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onresize_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onresize_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onresize ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresize ( & self , onresize : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onresize_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onresize : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onresize = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onresize , & mut __stack ) ; __widl_f_set_onresize_Document ( self_ , onresize ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresize ( & self , onresize : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onscroll ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onscroll_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onscroll_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onscroll ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onscroll ( & self , onscroll : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onscroll_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onscroll : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onscroll = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onscroll , & mut __stack ) ; __widl_f_set_onscroll_Document ( self_ , onscroll ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onscroll ( & self , onscroll : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onseeked ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onseeked_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeked_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onseeked ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeked ( & self , onseeked : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onseeked_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeked : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeked = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeked , & mut __stack ) ; __widl_f_set_onseeked_Document ( self_ , onseeked ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeked ( & self , onseeked : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onseeking ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onseeking_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeking_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onseeking ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeking ( & self , onseeking : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onseeking_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeking : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeking = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeking , & mut __stack ) ; __widl_f_set_onseeking_Document ( self_ , onseeking ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeking ( & self , onseeking : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselect_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onselect_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselect_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselect ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselect ( & self , onselect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onselect_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselect : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselect = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselect , & mut __stack ) ; __widl_f_set_onselect_Document ( self_ , onselect ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselect ( & self , onselect : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onshow_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onshow ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onshow_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onshow_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onshow ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onshow ( & self , onshow : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onshow_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onshow : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onshow = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onshow , & mut __stack ) ; __widl_f_set_onshow_Document ( self_ , onshow ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onshow ( & self , onshow : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onstalled ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onstalled_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onstalled_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onstalled ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstalled ( & self , onstalled : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onstalled_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstalled : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onstalled = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onstalled , & mut __stack ) ; __widl_f_set_onstalled_Document ( self_ , onstalled ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstalled ( & self , onstalled : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onsubmit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onsubmit_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsubmit_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onsubmit ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsubmit ( & self , onsubmit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onsubmit_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsubmit : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsubmit = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsubmit , & mut __stack ) ; __widl_f_set_onsubmit_Document ( self_ , onsubmit ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsubmit ( & self , onsubmit : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onsuspend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onsuspend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsuspend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onsuspend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsuspend ( & self , onsuspend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onsuspend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsuspend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsuspend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsuspend , & mut __stack ) ; __widl_f_set_onsuspend_Document ( self_ , onsuspend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsuspend ( & self , onsuspend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontimeupdate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontimeupdate_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontimeupdate_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontimeupdate ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontimeupdate ( & self , ontimeupdate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontimeupdate_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontimeupdate : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontimeupdate = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontimeupdate , & mut __stack ) ; __widl_f_set_ontimeupdate_Document ( self_ , ontimeupdate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontimeupdate ( & self , ontimeupdate : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onvolumechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvolumechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvolumechange_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onvolumechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvolumechange ( & self , onvolumechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvolumechange_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvolumechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvolumechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvolumechange , & mut __stack ) ; __widl_f_set_onvolumechange_Document ( self_ , onvolumechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvolumechange ( & self , onvolumechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwaiting ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwaiting_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwaiting_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwaiting ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaiting ( & self , onwaiting : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwaiting_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwaiting : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwaiting = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwaiting , & mut __stack ) ; __widl_f_set_onwaiting_Document ( self_ , onwaiting ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaiting ( & self , onwaiting : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselectstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onselectstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselectstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onselectstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectstart ( & self , onselectstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onselectstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselectstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselectstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselectstart , & mut __stack ) ; __widl_f_set_onselectstart_Document ( self_ , onselectstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectstart ( & self , onselectstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontoggle ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontoggle_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontoggle_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontoggle ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontoggle ( & self , ontoggle : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontoggle_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontoggle : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontoggle = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontoggle , & mut __stack ) ; __widl_f_set_ontoggle_Document ( self_ , ontoggle ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontoggle ( & self , ontoggle : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointercancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointercancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointercancel_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointercancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointercancel ( & self , onpointercancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointercancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointercancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointercancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointercancel , & mut __stack ) ; __widl_f_set_onpointercancel_Document ( self_ , onpointercancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointercancel ( & self , onpointercancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerdown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerdown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerdown_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerdown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerdown ( & self , onpointerdown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerdown_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerdown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerdown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerdown , & mut __stack ) ; __widl_f_set_onpointerdown_Document ( self_ , onpointerdown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerdown ( & self , onpointerdown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerup_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerup ( & self , onpointerup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerup_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerup , & mut __stack ) ; __widl_f_set_onpointerup_Document ( self_ , onpointerup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerup ( & self , onpointerup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointermove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointermove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointermove_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointermove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointermove ( & self , onpointermove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointermove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointermove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointermove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointermove , & mut __stack ) ; __widl_f_set_onpointermove_Document ( self_ , onpointermove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointermove ( & self , onpointermove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerout_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerout_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerout ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerout ( & self , onpointerout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerout_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerout : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerout = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerout , & mut __stack ) ; __widl_f_set_onpointerout_Document ( self_ , onpointerout ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerout ( & self , onpointerout : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerover_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerover ( & self , onpointerover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerover_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerover , & mut __stack ) ; __widl_f_set_onpointerover_Document ( self_ , onpointerover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerover ( & self , onpointerover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerenter_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerenter ( & self , onpointerenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerenter_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerenter , & mut __stack ) ; __widl_f_set_onpointerenter_Document ( self_ , onpointerenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerenter ( & self , onpointerenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerleave_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerleave ( & self , onpointerleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerleave_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerleave , & mut __stack ) ; __widl_f_set_onpointerleave_Document ( self_ , onpointerleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerleave ( & self , onpointerleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ongotpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ongotpointercapture_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ongotpointercapture_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ongotpointercapture ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ongotpointercapture ( & self , ongotpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ongotpointercapture_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ongotpointercapture : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ongotpointercapture = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ongotpointercapture , & mut __stack ) ; __widl_f_set_ongotpointercapture_Document ( self_ , ongotpointercapture ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ongotpointercapture ( & self , ongotpointercapture : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onlostpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onlostpointercapture_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onlostpointercapture_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onlostpointercapture ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlostpointercapture ( & self , onlostpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onlostpointercapture_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlostpointercapture : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onlostpointercapture = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onlostpointercapture , & mut __stack ) ; __widl_f_set_onlostpointercapture_Document ( self_ , onlostpointercapture ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlostpointercapture ( & self , onlostpointercapture : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationcancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationcancel_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationcancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationcancel ( & self , onanimationcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationcancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationcancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationcancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationcancel , & mut __stack ) ; __widl_f_set_onanimationcancel_Document ( self_ , onanimationcancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationcancel ( & self , onanimationcancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationend ( & self , onanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationend , & mut __stack ) ; __widl_f_set_onanimationend_Document ( self_ , onanimationend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationend ( & self , onanimationend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationiteration_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationiteration_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationiteration ( & self , onanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationiteration_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationiteration : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationiteration = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationiteration , & mut __stack ) ; __widl_f_set_onanimationiteration_Document ( self_ , onanimationiteration ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationiteration ( & self , onanimationiteration : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationstart ( & self , onanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationstart , & mut __stack ) ; __widl_f_set_onanimationstart_Document ( self_ , onanimationstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationstart ( & self , onanimationstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitioncancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitioncancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitioncancel_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitioncancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitioncancel ( & self , ontransitioncancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitioncancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitioncancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitioncancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitioncancel , & mut __stack ) ; __widl_f_set_ontransitioncancel_Document ( self_ , ontransitioncancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitioncancel ( & self , ontransitioncancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionend ( & self , ontransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionend , & mut __stack ) ; __widl_f_set_ontransitionend_Document ( self_ , ontransitionend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionend ( & self , ontransitionend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionrun ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionrun_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionrun_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionrun ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionrun ( & self , ontransitionrun : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionrun_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionrun : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionrun = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionrun , & mut __stack ) ; __widl_f_set_ontransitionrun_Document ( self_ , ontransitionrun ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionrun ( & self , ontransitionrun : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionstart ( & self , ontransitionstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionstart , & mut __stack ) ; __widl_f_set_ontransitionstart_Document ( self_ , ontransitionstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionstart ( & self , ontransitionstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationend ( & self , onwebkitanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationend , & mut __stack ) ; __widl_f_set_onwebkitanimationend_Document ( self_ , onwebkitanimationend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationend ( & self , onwebkitanimationend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationiteration_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationiteration_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationiteration ( & self , onwebkitanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationiteration_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationiteration : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationiteration = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationiteration , & mut __stack ) ; __widl_f_set_onwebkitanimationiteration_Document ( self_ , onwebkitanimationiteration ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationiteration ( & self , onwebkitanimationiteration : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationstart ( & self , onwebkitanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationstart , & mut __stack ) ; __widl_f_set_onwebkitanimationstart_Document ( self_ , onwebkitanimationstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationstart ( & self , onwebkitanimationstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkittransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkittransitionend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkittransitionend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkittransitionend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkittransitionend ( & self , onwebkittransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkittransitionend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkittransitionend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkittransitionend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkittransitionend , & mut __stack ) ; __widl_f_set_onwebkittransitionend_Document ( self_ , onwebkittransitionend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkittransitionend ( & self , onwebkittransitionend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onerror_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onerror_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onerror = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onerror , & mut __stack ) ; __widl_f_set_onerror_Document ( self_ , onerror ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_node_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_append_with_node_Document ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_0_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_node_0_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_append_with_node_0_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_append_with_str_Document ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_0_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_0_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_append_with_str_0_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_1_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_1_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_append_with_str_1_Document ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_2_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_2_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_append_with_str_2_Document ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_3_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_3_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_append_with_str_3_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_4_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_4_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_append_with_str_4_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_5_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_5_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_append_with_str_5_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_6_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_6_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_append_with_str_6_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_7_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_7_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_append_with_str_7_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_node_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_prepend_with_node_Document ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_0_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_node_0_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prepend_with_node_0_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_prepend_with_str_Document ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_0_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_0_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prepend_with_str_0_Document ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_1_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_1_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_prepend_with_str_1_Document ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_2_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_2_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_prepend_with_str_2_Document ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_3_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_3_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_prepend_with_str_3_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_4_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_4_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_prepend_with_str_4_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_5_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_5_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_prepend_with_str_5_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_6_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_6_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_prepend_with_str_6_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_7_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_7_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_prepend_with_str_7_Document ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_first_element_child_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn first_element_child ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_first_element_child_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_first_element_child_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn first_element_child ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_element_child_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn last_element_child ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_last_element_child_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_last_element_child_Document ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)\n\n*This API requires the following crate features to be activated: `Document`, `Element`*" ] # [ allow ( clippy :: all ) ] pub fn last_element_child ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_child_element_count_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn child_element_count ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_child_element_count_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_child_element_count_Document ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn child_element_count ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchstart_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchstart ( & self , ontouchstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchstart_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchstart , & mut __stack ) ; __widl_f_set_ontouchstart_Document ( self_ , ontouchstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchstart ( & self , ontouchstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchend_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchend ( & self , ontouchend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchend_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchend , & mut __stack ) ; __widl_f_set_ontouchend_Document ( self_ , ontouchend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchend ( & self , ontouchend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchmove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchmove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchmove_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchmove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchmove ( & self , ontouchmove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchmove_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchmove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchmove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchmove , & mut __stack ) ; __widl_f_set_ontouchmove_Document ( self_ , ontouchmove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchmove ( & self , ontouchmove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchcancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchcancel_Document ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchcancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Document ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Document as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Document { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchcancel ( & self , ontouchcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchcancel_Document ( self_ : < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchcancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Document as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchcancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchcancel , & mut __stack ) ; __widl_f_set_ontouchcancel_Document ( self_ , ontouchcancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Document`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchcancel ( & self , ontouchcancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Element` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Element { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Element : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Element { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for Element { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Element { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Element { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Element { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { Element { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for Element { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Element { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Element { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Element > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Element { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for Element { # [ inline ] fn from ( obj : JsValue ) -> Element { Element { obj } } } impl AsRef < JsValue > for Element { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < Element > for JsValue { # [ inline ] fn from ( obj : Element ) -> JsValue { obj . obj } } impl JsCast for Element { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_Element ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Element ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Element { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Element ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for Element { type Target = EventTarget ; # [ inline ] fn deref ( & self ) -> & EventTarget { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < Element > for EventTarget { # [ inline ] fn from ( obj : Element ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for Element { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < Element > for Object { # [ inline ] fn from ( obj : Element ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Element { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_closest_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `closest()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn closest ( & self , selector : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_closest_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selector : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selector = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selector , & mut __stack ) ; __widl_f_closest_Element ( self_ , selector , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `closest()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn closest ( & self , selector : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute ( & self , name : & str ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_attribute_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_get_attribute_Element ( self_ , name ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute ( & self , name : & str ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_ns_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_attribute_ns_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , local_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let local_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( local_name , & mut __stack ) ; __widl_f_get_attribute_ns_Element ( self_ , namespace , local_name ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_attribute_names_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getAttributeNames()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute_names ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_attribute_names_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_attribute_names_Element ( self_ ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getAttributeNames()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_attribute_names ( & self , ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_attribute_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attribute ( & self , name : & str ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_attribute_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_has_attribute_Element ( self_ , name ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attribute ( & self , name : & str ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_attribute_ns_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_attribute_ns_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , local_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let local_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( local_name , & mut __stack ) ; __widl_f_has_attribute_ns_Element ( self_ , namespace , local_name ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_attributes_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasAttributes()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attributes ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_attributes_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_has_attributes_Element ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasAttributes()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_attributes ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_pointer_capture_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_pointer_capture ( & self , pointer_id : i32 ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_pointer_capture_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , pointer_id : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let pointer_id = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( pointer_id , & mut __stack ) ; __widl_f_has_pointer_capture_Element ( self_ , pointer_id ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn has_pointer_capture ( & self , pointer_id : i32 ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_element_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `insertAdjacentElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_element ( & self , where_ : & str , element : & Element ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_insert_adjacent_element_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , where_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , element : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let where_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( where_ , & mut __stack ) ; let element = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( element , & mut __stack ) ; __widl_f_insert_adjacent_element_Element ( self_ , where_ , element , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `insertAdjacentElement()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_element ( & self , where_ : & str , element : & Element ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_html_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `insertAdjacentHTML()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_html ( & self , position : & str , text : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_insert_adjacent_html_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , position : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , text : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let position = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( position , & mut __stack ) ; let text = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( text , & mut __stack ) ; __widl_f_insert_adjacent_html_Element ( self_ , position , text , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `insertAdjacentHTML()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_html ( & self , position : & str , text : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_insert_adjacent_text_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `insertAdjacentText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_text ( & self , where_ : & str , data : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_insert_adjacent_text_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , where_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let where_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( where_ , & mut __stack ) ; let data = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_insert_adjacent_text_Element ( self_ , where_ , data , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `insertAdjacentText()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn insert_adjacent_text ( & self , where_ : & str , data : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_matches_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `matches()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn matches ( & self , selector : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_matches_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selector : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selector = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selector , & mut __stack ) ; __widl_f_matches_Element ( self_ , selector , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `matches()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn matches ( & self , selector : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_query_selector_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn query_selector ( & self , selectors : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_query_selector_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selectors : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selectors = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selectors , & mut __stack ) ; __widl_f_query_selector_Element ( self_ , selectors , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `querySelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn query_selector ( & self , selectors : & str ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_release_capture_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn release_capture ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_release_capture_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_release_capture_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `releaseCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn release_capture ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_release_pointer_capture_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `releasePointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn release_pointer_capture ( & self , pointer_id : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_release_pointer_capture_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , pointer_id : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let pointer_id = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( pointer_id , & mut __stack ) ; __widl_f_release_pointer_capture_Element ( self_ , pointer_id , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `releasePointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn release_pointer_capture ( & self , pointer_id : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_attribute_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `removeAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove_attribute ( & self , name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_attribute_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_remove_attribute_Element ( self_ , name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `removeAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove_attribute ( & self , name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_attribute_ns_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `removeAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_attribute_ns_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , local_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let local_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( local_name , & mut __stack ) ; __widl_f_remove_attribute_ns_Element ( self_ , namespace , local_name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `removeAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove_attribute_ns ( & self , namespace : Option < & str > , local_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_fullscreen_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `requestFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn request_fullscreen ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_request_fullscreen_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_request_fullscreen_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `requestFullscreen()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn request_fullscreen ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_pointer_lock_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `requestPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn request_pointer_lock ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_request_pointer_lock_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_request_pointer_lock_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `requestPointerLock()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn request_pointer_lock ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_with_x_and_y_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_with_x_and_y_Element ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_by_with_x_and_y_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_by_with_x_and_y_Element ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_by_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_by_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_into_view_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_into_view ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_into_view_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_into_view_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_into_view ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_into_view_with_bool_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_into_view_with_bool ( & self , arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_into_view_with_bool_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arg , & mut __stack ) ; __widl_f_scroll_into_view_with_bool_Element ( self_ , arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollIntoView()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_into_view_with_bool ( & self , arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_to_with_x_and_y_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_to_with_x_and_y_Element ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_to_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_to_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_attribute_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_attribute ( & self , name : & str , value : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_attribute_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , value : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; let value = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( value , & mut __stack ) ; __widl_f_set_attribute_Element ( self_ , name , value , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_attribute ( & self , name : & str , value : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_attribute_ns_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_attribute_ns ( & self , namespace : Option < & str > , name : & str , value : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_attribute_ns_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , namespace : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , value : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let namespace = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( namespace , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; let value = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( value , & mut __stack ) ; __widl_f_set_attribute_ns_Element ( self_ , namespace , name , value , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setAttributeNS()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_attribute_ns ( & self , namespace : Option < & str > , name : & str , value : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_capture_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_capture ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_capture_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_set_capture_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_capture ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_capture_with_retarget_to_element_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_capture_with_retarget_to_element ( & self , retarget_to_element : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_capture_with_retarget_to_element_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , retarget_to_element : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let retarget_to_element = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( retarget_to_element , & mut __stack ) ; __widl_f_set_capture_with_retarget_to_element_Element ( self_ , retarget_to_element ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_capture_with_retarget_to_element ( & self , retarget_to_element : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_pointer_capture_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_pointer_capture ( & self , pointer_id : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_pointer_capture_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , pointer_id : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let pointer_id = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( pointer_id , & mut __stack ) ; __widl_f_set_pointer_capture_Element ( self_ , pointer_id , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setPointerCapture()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_pointer_capture ( & self , pointer_id : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_toggle_attribute_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn toggle_attribute ( & self , name : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_toggle_attribute_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_toggle_attribute_Element ( self_ , name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn toggle_attribute ( & self , name : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_toggle_attribute_with_force_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn toggle_attribute_with_force ( & self , name : & str , force : bool ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_toggle_attribute_with_force_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , force : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; let force = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( force , & mut __stack ) ; __widl_f_toggle_attribute_with_force_Element ( self_ , name , force , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toggleAttribute()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn toggle_attribute_with_force ( & self , name : & str , force : bool ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_webkit_matches_selector_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `webkitMatchesSelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn webkit_matches_selector ( & self , selector : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_webkit_matches_selector_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , selector : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let selector = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( selector , & mut __stack ) ; __widl_f_webkit_matches_selector_Element ( self_ , selector , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `webkitMatchesSelector()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn webkit_matches_selector ( & self , selector : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_namespace_uri_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `namespaceURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn namespace_uri ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_namespace_uri_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_namespace_uri_Element ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `namespaceURI` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn namespace_uri ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prefix_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prefix` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prefix ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prefix_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prefix_Element ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prefix` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prefix ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_local_name_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `localName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn local_name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_local_name_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_local_name_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `localName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn local_name ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_tag_name_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `tagName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn tag_name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_tag_name_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_tag_name_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `tagName` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn tag_name ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_id_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `id` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn id ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_id_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_id_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `id` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn id ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_id_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `id` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_id ( & self , id : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_id_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , id : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let id = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( id , & mut __stack ) ; __widl_f_set_id_Element ( self_ , id ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `id` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_id ( & self , id : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_class_name_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `className` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn class_name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_class_name_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_class_name_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `className` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn class_name ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_class_name_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `className` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_class_name ( & self , class_name : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_class_name_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , class_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let class_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( class_name , & mut __stack ) ; __widl_f_set_class_name_Element ( self_ , class_name ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `className` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_class_name ( & self , class_name : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_top_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_top ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_top_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_top_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_top ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_scroll_top_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_scroll_top ( & self , scroll_top : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_scroll_top_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , scroll_top : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let scroll_top = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( scroll_top , & mut __stack ) ; __widl_f_set_scroll_top_Element ( self_ , scroll_top ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_scroll_top ( & self , scroll_top : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_left_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_left ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_left_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_left_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_left ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_scroll_left_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollLeft` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_scroll_left ( & self , scroll_left : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_scroll_left_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , scroll_left : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let scroll_left = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( scroll_left , & mut __stack ) ; __widl_f_set_scroll_left_Element ( self_ , scroll_left ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollLeft` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_scroll_left ( & self , scroll_left : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_width_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_width ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_width_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_width_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_width ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_height_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_height ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_height_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_height_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_height ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_top_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_top ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_top_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_top_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientTop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_top ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_left_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_left ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_left_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_left_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientLeft` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_left ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_width_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_width ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_width_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_width_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_width ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_height_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_height ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_height_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_height_Element ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn client_height ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_inner_html_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn inner_html ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_inner_html_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_inner_html_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn inner_html ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_inner_html_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_html ( & self , inner_html : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_inner_html_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_html : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let inner_html = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( inner_html , & mut __stack ) ; __widl_f_set_inner_html_Element ( self_ , inner_html ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_html ( & self , inner_html : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_outer_html_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn outer_html ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_outer_html_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_outer_html_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerHTML` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn outer_html ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_outer_html_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_html ( & self , outer_html : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_outer_html_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_html : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let outer_html = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( outer_html , & mut __stack ) ; __widl_f_set_outer_html_Element ( self_ , outer_html ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerHTML` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_html ( & self , outer_html : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_slot_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `slot` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn slot ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_slot_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_slot_Element ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `slot` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn slot ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_slot_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `slot` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_slot ( & self , slot : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_slot_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , slot : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let slot = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( slot , & mut __stack ) ; __widl_f_set_slot_Element ( self_ , slot ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `slot` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn set_slot ( & self , slot : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_node_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_after_with_node_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_node_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_node_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_after_with_node_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_after_with_str_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_after_with_str_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_1_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_1_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_after_with_str_1_Element ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_2_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_2_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_after_with_str_2_Element ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_3_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_3_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_after_with_str_3_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_4_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_4_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_after_with_str_4_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_5_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_5_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_after_with_str_5_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_6_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_6_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_after_with_str_6_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_after_with_str_7_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_after_with_str_7_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_after_with_str_7_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `after()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn after_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_node_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_before_with_node_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_node_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_node_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_before_with_node_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_before_with_str_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_before_with_str_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_1_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_1_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_before_with_str_1_Element ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_2_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_2_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_before_with_str_2_Element ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_3_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_3_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_before_with_str_3_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_4_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_4_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_before_with_str_4_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_5_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_5_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_before_with_str_5_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_6_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_6_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_before_with_str_6_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_before_with_str_7_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_before_with_str_7_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_before_with_str_7_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `before()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn before_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `remove()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_remove_Element ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `remove()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn remove ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_node_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_replace_with_with_node_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_node_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_node_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_replace_with_with_node_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_replace_with_with_str_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_replace_with_with_str_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_1_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_1_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_replace_with_with_str_1_Element ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_2_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_2_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_replace_with_with_str_2_Element ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_3_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_3_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_replace_with_with_str_3_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_4_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_4_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_replace_with_with_str_4_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_5_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_5_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_replace_with_with_str_5_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_6_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_6_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_replace_with_with_str_6_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_replace_with_with_str_7_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_replace_with_with_str_7_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_replace_with_with_str_7_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `replaceWith()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn replace_with_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_box_quads_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_box_quads ( & self , ) -> Result < :: js_sys :: Array , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_box_quads_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_box_quads_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getBoxQuads()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn get_box_quads ( & self , ) -> Result < :: js_sys :: Array , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_previous_element_sibling_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `previousElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn previous_element_sibling ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_previous_element_sibling_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_previous_element_sibling_Element ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `previousElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn previous_element_sibling ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_next_element_sibling_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `nextElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn next_element_sibling ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_next_element_sibling_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_next_element_sibling_Element ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `nextElementSibling` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn next_element_sibling ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_node_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_append_with_node_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_node_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_node_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_append_with_node_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_append_with_str_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_append_with_str_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_1_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_1_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_append_with_str_1_Element ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_2_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_2_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_append_with_str_2_Element ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_3_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_3_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_append_with_str_3_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_4_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_4_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_append_with_str_4_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_5_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_5_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_append_with_str_5_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_6_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_6_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_append_with_str_6_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_append_with_str_7_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_append_with_str_7_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_append_with_str_7_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `append()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn append_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_node_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_prepend_with_node_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_node_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_node_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prepend_with_node_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_node_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes , & mut __stack ) ; __widl_f_prepend_with_str_Element ( self_ , nodes , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str ( & self , nodes : & :: js_sys :: Array ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_0_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_0_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prepend_with_str_0_Element ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_0 ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_1_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_1_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; __widl_f_prepend_with_str_1_Element ( self_ , nodes_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_1 ( & self , nodes_1 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_2_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_2_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; __widl_f_prepend_with_str_2_Element ( self_ , nodes_1 , nodes_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_2 ( & self , nodes_1 : & str , nodes_2 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_3_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_3_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; __widl_f_prepend_with_str_3_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_3 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_4_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_4_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; __widl_f_prepend_with_str_4_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_4 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_5_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_5_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; __widl_f_prepend_with_str_5_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_5 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_6_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_6_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; __widl_f_prepend_with_str_6_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_6 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prepend_with_str_7_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prepend_with_str_7_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_1 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_2 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_3 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_4 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_5 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_6 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , nodes_7 : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let nodes_1 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_1 , & mut __stack ) ; let nodes_2 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_2 , & mut __stack ) ; let nodes_3 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_3 , & mut __stack ) ; let nodes_4 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_4 , & mut __stack ) ; let nodes_5 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_5 , & mut __stack ) ; let nodes_6 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_6 , & mut __stack ) ; let nodes_7 = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( nodes_7 , & mut __stack ) ; __widl_f_prepend_with_str_7_Element ( self_ , nodes_1 , nodes_2 , nodes_3 , nodes_4 , nodes_5 , nodes_6 , nodes_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prepend()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn prepend_with_str_7 ( & self , nodes_1 : & str , nodes_2 : & str , nodes_3 : & str , nodes_4 : & str , nodes_5 : & str , nodes_6 : & str , nodes_7 : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_first_element_child_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn first_element_child ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_first_element_child_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_first_element_child_Element ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `firstElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn first_element_child ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_last_element_child_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn last_element_child ( & self , ) -> Option < Element > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_last_element_child_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_last_element_child_Element ( self_ ) } ; < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `lastElementChild` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn last_element_child ( & self , ) -> Option < Element > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_child_element_count_Element ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Element as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Element { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn child_element_count ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_child_element_count_Element ( self_ : < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Element as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_child_element_count_Element ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `childElementCount` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)\n\n*This API requires the following crate features to be activated: `Element`*" ] # [ allow ( clippy :: all ) ] pub fn child_element_count ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `EventTarget` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct EventTarget { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_EventTarget : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for EventTarget { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for EventTarget { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for EventTarget { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a EventTarget { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for EventTarget { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { EventTarget { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for EventTarget { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a EventTarget { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for EventTarget { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < EventTarget > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( EventTarget { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for EventTarget { # [ inline ] fn from ( obj : JsValue ) -> EventTarget { EventTarget { obj } } } impl AsRef < JsValue > for EventTarget { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < EventTarget > for JsValue { # [ inline ] fn from ( obj : EventTarget ) -> JsValue { obj . obj } } impl JsCast for EventTarget { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_EventTarget ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_EventTarget ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { EventTarget { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const EventTarget ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for EventTarget { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < EventTarget > for Object { # [ inline ] fn from ( obj : EventTarget ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for EventTarget { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < EventTarget as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new EventTarget(..)` constructor, creating a new instance of `EventTarget`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < EventTarget , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_EventTarget ( exn_data_ptr : * mut u32 ) -> < EventTarget as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_new_EventTarget ( exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < EventTarget as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new EventTarget(..)` constructor, creating a new instance of `EventTarget`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < EventTarget , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_add_event_listener_with_callback_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & EventTarget as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback ( & self , type_ : & str , listener : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_add_event_listener_with_callback_EventTarget ( self_ : < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , listener : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let listener = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( listener , & mut __stack ) ; __widl_f_add_event_listener_with_callback_EventTarget ( self_ , type_ , listener , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback ( & self , type_ : & str , listener : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_add_event_listener_with_callback_and_bool_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & EventTarget as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback_and_bool ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_add_event_listener_with_callback_and_bool_EventTarget ( self_ : < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , listener : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , options : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let listener = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( listener , & mut __stack ) ; let options = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( options , & mut __stack ) ; __widl_f_add_event_listener_with_callback_and_bool_EventTarget ( self_ , type_ , listener , options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback_and_bool ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_add_event_listener_with_callback_and_bool_and_wants_untrusted_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & EventTarget as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < bool > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback_and_bool_and_wants_untrusted ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool , wants_untrusted : Option < bool > ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_add_event_listener_with_callback_and_bool_and_wants_untrusted_EventTarget ( self_ : < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , listener : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , options : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , wants_untrusted : < Option < bool > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let listener = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( listener , & mut __stack ) ; let options = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( options , & mut __stack ) ; let wants_untrusted = < Option < bool > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( wants_untrusted , & mut __stack ) ; __widl_f_add_event_listener_with_callback_and_bool_and_wants_untrusted_EventTarget ( self_ , type_ , listener , options , wants_untrusted , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `addEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn add_event_listener_with_callback_and_bool_and_wants_untrusted ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool , wants_untrusted : Option < bool > ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_event_listener_with_callback_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & EventTarget as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `removeEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn remove_event_listener_with_callback ( & self , type_ : & str , listener : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_event_listener_with_callback_EventTarget ( self_ : < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , listener : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let listener = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( listener , & mut __stack ) ; __widl_f_remove_event_listener_with_callback_EventTarget ( self_ , type_ , listener , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `removeEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn remove_event_listener_with_callback ( & self , type_ : & str , listener : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_remove_event_listener_with_callback_and_bool_EventTarget ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & EventTarget as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl EventTarget { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `removeEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn remove_event_listener_with_callback_and_bool ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_remove_event_listener_with_callback_and_bool_EventTarget ( self_ : < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , listener : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , options : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & EventTarget as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let listener = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( listener , & mut __stack ) ; let options = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( options , & mut __stack ) ; __widl_f_remove_event_listener_with_callback_and_bool_EventTarget ( self_ , type_ , listener , options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `removeEventListener()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n\n*This API requires the following crate features to be activated: `EventTarget`*" ] # [ allow ( clippy :: all ) ] pub fn remove_event_listener_with_callback_and_bool ( & self , type_ : & str , listener : & :: js_sys :: Function , options : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `HTMLAudioElement` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement)\n\n*This API requires the following crate features to be activated: `HtmlAudioElement`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct HtmlAudioElement { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_HtmlAudioElement : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for HtmlAudioElement { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for HtmlAudioElement { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for HtmlAudioElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a HtmlAudioElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for HtmlAudioElement { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { HtmlAudioElement { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for HtmlAudioElement { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a HtmlAudioElement { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for HtmlAudioElement { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < HtmlAudioElement > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( HtmlAudioElement { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for HtmlAudioElement { # [ inline ] fn from ( obj : JsValue ) -> HtmlAudioElement { HtmlAudioElement { obj } } } impl AsRef < JsValue > for HtmlAudioElement { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < HtmlAudioElement > for JsValue { # [ inline ] fn from ( obj : HtmlAudioElement ) -> JsValue { obj . obj } } impl JsCast for HtmlAudioElement { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_HTMLAudioElement ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_HTMLAudioElement ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { HtmlAudioElement { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const HtmlAudioElement ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for HtmlAudioElement { type Target = HtmlMediaElement ; # [ inline ] fn deref ( & self ) -> & HtmlMediaElement { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < HtmlAudioElement > for HtmlMediaElement { # [ inline ] fn from ( obj : HtmlAudioElement ) -> HtmlMediaElement { use wasm_bindgen :: JsCast ; HtmlMediaElement :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < HtmlMediaElement > for HtmlAudioElement { # [ inline ] fn as_ref ( & self ) -> & HtmlMediaElement { use wasm_bindgen :: JsCast ; HtmlMediaElement :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlAudioElement > for Element { # [ inline ] fn from ( obj : HtmlAudioElement ) -> Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Element > for HtmlAudioElement { # [ inline ] fn as_ref ( & self ) -> & Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlAudioElement > for EventTarget { # [ inline ] fn from ( obj : HtmlAudioElement ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for HtmlAudioElement { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlAudioElement > for Object { # [ inline ] fn from ( obj : HtmlAudioElement ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for HtmlAudioElement { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Audio ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < HtmlAudioElement as WasmDescribe > :: describe ( ) ; } impl HtmlAudioElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new HTMLAudioElement(..)` constructor, creating a new instance of `HTMLAudioElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/HTMLAudioElement)\n\n*This API requires the following crate features to be activated: `HtmlAudioElement`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < HtmlAudioElement , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_Audio ( exn_data_ptr : * mut u32 ) -> < HtmlAudioElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_new_Audio ( exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < HtmlAudioElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new HTMLAudioElement(..)` constructor, creating a new instance of `HTMLAudioElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/HTMLAudioElement)\n\n*This API requires the following crate features to be activated: `HtmlAudioElement`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < HtmlAudioElement , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_src_Audio ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < HtmlAudioElement as WasmDescribe > :: describe ( ) ; } impl HtmlAudioElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new HTMLAudioElement(..)` constructor, creating a new instance of `HTMLAudioElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/HTMLAudioElement)\n\n*This API requires the following crate features to be activated: `HtmlAudioElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_src ( src : & str ) -> Result < HtmlAudioElement , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_with_src_Audio ( src : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < HtmlAudioElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let src = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( src , & mut __stack ) ; __widl_f_new_with_src_Audio ( src , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < HtmlAudioElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new HTMLAudioElement(..)` constructor, creating a new instance of `HTMLAudioElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/HTMLAudioElement)\n\n*This API requires the following crate features to be activated: `HtmlAudioElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_src ( src : & str ) -> Result < HtmlAudioElement , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `HTMLCanvasElement` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct HtmlCanvasElement { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_HtmlCanvasElement : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for HtmlCanvasElement { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for HtmlCanvasElement { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for HtmlCanvasElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a HtmlCanvasElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for HtmlCanvasElement { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { HtmlCanvasElement { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for HtmlCanvasElement { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a HtmlCanvasElement { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for HtmlCanvasElement { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < HtmlCanvasElement > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( HtmlCanvasElement { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for HtmlCanvasElement { # [ inline ] fn from ( obj : JsValue ) -> HtmlCanvasElement { HtmlCanvasElement { obj } } } impl AsRef < JsValue > for HtmlCanvasElement { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < HtmlCanvasElement > for JsValue { # [ inline ] fn from ( obj : HtmlCanvasElement ) -> JsValue { obj . obj } } impl JsCast for HtmlCanvasElement { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_HTMLCanvasElement ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_HTMLCanvasElement ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { HtmlCanvasElement { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const HtmlCanvasElement ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for HtmlCanvasElement { type Target = Element ; # [ inline ] fn deref ( & self ) -> & Element { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < HtmlCanvasElement > for Element { # [ inline ] fn from ( obj : HtmlCanvasElement ) -> Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Element > for HtmlCanvasElement { # [ inline ] fn as_ref ( & self ) -> & Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlCanvasElement > for EventTarget { # [ inline ] fn from ( obj : HtmlCanvasElement ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for HtmlCanvasElement { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlCanvasElement > for Object { # [ inline ] fn from ( obj : HtmlCanvasElement ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for HtmlCanvasElement { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_context_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Object > as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn get_context ( & self , context_id : & str ) -> Result < Option < :: js_sys :: Object > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_context_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , context_id : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < :: js_sys :: Object > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let context_id = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( context_id , & mut __stack ) ; __widl_f_get_context_HTMLCanvasElement ( self_ , context_id , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < :: js_sys :: Object > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn get_context ( & self , context_id : & str ) -> Result < Option < :: js_sys :: Object > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_context_with_context_options_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Object > as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn get_context_with_context_options ( & self , context_id : & str , context_options : & :: wasm_bindgen :: JsValue ) -> Result < Option < :: js_sys :: Object > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_context_with_context_options_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , context_id : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , context_options : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < :: js_sys :: Object > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let context_id = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( context_id , & mut __stack ) ; let context_options = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( context_options , & mut __stack ) ; __widl_f_get_context_with_context_options_HTMLCanvasElement ( self_ , context_id , context_options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < :: js_sys :: Object > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getContext()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn get_context_with_context_options ( & self , context_id : & str , context_options : & :: wasm_bindgen :: JsValue ) -> Result < Option < :: js_sys :: Object > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_blob_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob ( & self , callback : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_blob_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; __widl_f_to_blob_HTMLCanvasElement ( self_ , callback , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob ( & self , callback : & :: js_sys :: Function ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_blob_with_type_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob_with_type ( & self , callback : & :: js_sys :: Function , type_ : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_blob_with_type_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_to_blob_with_type_HTMLCanvasElement ( self_ , callback , type_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob_with_type ( & self , callback : & :: js_sys :: Function , type_ : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob_with_type_and_encoder_options ( & self , callback : & :: js_sys :: Function , type_ : & str , encoder_options : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , encoder_options : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let encoder_options = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( encoder_options , & mut __stack ) ; __widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement ( self_ , callback , type_ , encoder_options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toBlob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_blob_with_type_and_encoder_options ( & self , callback : & :: js_sys :: Function , type_ : & str , encoder_options : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_data_url_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_to_data_url_HTMLCanvasElement ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_with_type_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url_with_type ( & self , type_ : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_data_url_with_type_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_to_data_url_with_type_HTMLCanvasElement ( self_ , type_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url_with_type ( & self , type_ : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url_with_type_and_encoder_options ( & self , type_ : & str , encoder_options : & :: wasm_bindgen :: JsValue ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , encoder_options : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; let encoder_options = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( encoder_options , & mut __stack ) ; __widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement ( self_ , type_ , encoder_options , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toDataURL()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn to_data_url_with_type_and_encoder_options ( & self , type_ : & str , encoder_options : & :: wasm_bindgen :: JsValue ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_width_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn width ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_width_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_width_HTMLCanvasElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn width ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_width_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `width` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_width ( & self , width : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_width_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , width : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let width = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( width , & mut __stack ) ; __widl_f_set_width_HTMLCanvasElement ( self_ , width ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `width` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_width ( & self , width : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_height_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn height ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_height_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_height_HTMLCanvasElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn height ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_height_HTMLCanvasElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlCanvasElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `height` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_height ( & self , height : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_height_HTMLCanvasElement ( self_ : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , height : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let height = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( height , & mut __stack ) ; __widl_f_set_height_HTMLCanvasElement ( self_ , height ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `height` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_height ( & self , height : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `HTMLImageElement` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct HtmlImageElement { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_HtmlImageElement : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for HtmlImageElement { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for HtmlImageElement { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for HtmlImageElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a HtmlImageElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for HtmlImageElement { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { HtmlImageElement { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for HtmlImageElement { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a HtmlImageElement { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for HtmlImageElement { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < HtmlImageElement > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( HtmlImageElement { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for HtmlImageElement { # [ inline ] fn from ( obj : JsValue ) -> HtmlImageElement { HtmlImageElement { obj } } } impl AsRef < JsValue > for HtmlImageElement { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < HtmlImageElement > for JsValue { # [ inline ] fn from ( obj : HtmlImageElement ) -> JsValue { obj . obj } } impl JsCast for HtmlImageElement { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_HTMLImageElement ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_HTMLImageElement ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { HtmlImageElement { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const HtmlImageElement ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for HtmlImageElement { type Target = Element ; # [ inline ] fn deref ( & self ) -> & Element { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < HtmlImageElement > for Element { # [ inline ] fn from ( obj : HtmlImageElement ) -> Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Element > for HtmlImageElement { # [ inline ] fn as_ref ( & self ) -> & Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlImageElement > for EventTarget { # [ inline ] fn from ( obj : HtmlImageElement ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for HtmlImageElement { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlImageElement > for Object { # [ inline ] fn from ( obj : HtmlImageElement ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for HtmlImageElement { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_Image ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < HtmlImageElement as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_Image ( exn_data_ptr : * mut u32 ) -> < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_new_Image ( exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new ( ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_width_Image ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < u32 as WasmDescribe > :: describe ( ) ; < HtmlImageElement as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_width ( width : u32 ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_with_width_Image ( width : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let width = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( width , & mut __stack ) ; __widl_f_new_with_width_Image ( width , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_width ( width : u32 ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_with_width_and_height_Image ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < u32 as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < HtmlImageElement as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_width_and_height ( width : u32 , height : u32 ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_with_width_and_height_Image ( width : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , height : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let width = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( width , & mut __stack ) ; let height = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( height , & mut __stack ) ; __widl_f_new_with_width_and_height_Image ( width , height , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < HtmlImageElement as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new HTMLImageElement(..)` constructor, creating a new instance of `HTMLImageElement`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/HTMLImageElement)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn new_with_width_and_height ( width : u32 , height : u32 ) -> Result < HtmlImageElement , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alt_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `alt` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn alt ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_alt_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_alt_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `alt` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn alt ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_alt_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `alt` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_alt ( & self , alt : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_alt_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let alt = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt , & mut __stack ) ; __widl_f_set_alt_HTMLImageElement ( self_ , alt ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `alt` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_alt ( & self , alt : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_src_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `src` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn src ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_src_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_src_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `src` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn src ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_src_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `src` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_src ( & self , src : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_src_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , src : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let src = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( src , & mut __stack ) ; __widl_f_set_src_HTMLImageElement ( self_ , src ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `src` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_src ( & self , src : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_srcset_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `srcset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn srcset ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_srcset_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_srcset_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `srcset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn srcset ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_srcset_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `srcset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_srcset ( & self , srcset : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_srcset_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , srcset : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let srcset = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( srcset , & mut __stack ) ; __widl_f_set_srcset_HTMLImageElement ( self_ , srcset ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `srcset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_srcset ( & self , srcset : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cross_origin_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `crossOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn cross_origin ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_cross_origin_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_cross_origin_HTMLImageElement ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `crossOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn cross_origin ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_cross_origin_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `crossOrigin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_cross_origin ( & self , cross_origin : Option < & str > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_cross_origin_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cross_origin : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cross_origin = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cross_origin , & mut __stack ) ; __widl_f_set_cross_origin_HTMLImageElement ( self_ , cross_origin ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `crossOrigin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_cross_origin ( & self , cross_origin : Option < & str > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_use_map_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `useMap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn use_map ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_use_map_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_use_map_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `useMap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn use_map ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_use_map_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `useMap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_use_map ( & self , use_map : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_use_map_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , use_map : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let use_map = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( use_map , & mut __stack ) ; __widl_f_set_use_map_HTMLImageElement ( self_ , use_map ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `useMap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_use_map ( & self , use_map : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_referrer_policy_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `referrerPolicy` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn referrer_policy ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_referrer_policy_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_referrer_policy_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `referrerPolicy` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn referrer_policy ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_referrer_policy_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `referrerPolicy` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_referrer_policy ( & self , referrer_policy : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_referrer_policy_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , referrer_policy : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let referrer_policy = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( referrer_policy , & mut __stack ) ; __widl_f_set_referrer_policy_HTMLImageElement ( self_ , referrer_policy ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `referrerPolicy` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_referrer_policy ( & self , referrer_policy : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_map_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isMap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn is_map ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_is_map_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_is_map_HTMLImageElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isMap` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn is_map ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_is_map_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isMap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_is_map ( & self , is_map : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_is_map_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , is_map : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let is_map = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( is_map , & mut __stack ) ; __widl_f_set_is_map_HTMLImageElement ( self_ , is_map ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isMap` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_is_map ( & self , is_map : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_width_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn width ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_width_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_width_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `width` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn width ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_width_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `width` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_width ( & self , width : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_width_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , width : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let width = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( width , & mut __stack ) ; __widl_f_set_width_HTMLImageElement ( self_ , width ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `width` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_width ( & self , width : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_height_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn height ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_height_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_height_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `height` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn height ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_height_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `height` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_height ( & self , height : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_height_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , height : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let height = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( height , & mut __stack ) ; __widl_f_set_height_HTMLImageElement ( self_ , height ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `height` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_height ( & self , height : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_natural_width_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `naturalWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn natural_width ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_natural_width_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_natural_width_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `naturalWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn natural_width ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_natural_height_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `naturalHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn natural_height ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_natural_height_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_natural_height_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `naturalHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn natural_height ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_complete_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `complete` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn complete ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_complete_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_complete_HTMLImageElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `complete` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn complete ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_name_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_name_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_name_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_name_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_name ( & self , name : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_name_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_set_name_HTMLImageElement ( self_ , name ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/name)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_name ( & self , name : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_align_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `align` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn align ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_align_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_align_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `align` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn align ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_align_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `align` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_align ( & self , align : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_align_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , align : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let align = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( align , & mut __stack ) ; __widl_f_set_align_HTMLImageElement ( self_ , align ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `align` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/align)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_align ( & self , align : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_hspace_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hspace` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn hspace ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_hspace_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_hspace_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hspace` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn hspace ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_hspace_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hspace` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_hspace ( & self , hspace : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_hspace_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , hspace : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let hspace = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( hspace , & mut __stack ) ; __widl_f_set_hspace_HTMLImageElement ( self_ , hspace ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hspace` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/hspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_hspace ( & self , hspace : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_vspace_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `vspace` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn vspace ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_vspace_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_vspace_HTMLImageElement ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `vspace` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn vspace ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_vspace_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `vspace` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_vspace ( & self , vspace : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_vspace_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , vspace : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let vspace = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( vspace , & mut __stack ) ; __widl_f_set_vspace_HTMLImageElement ( self_ , vspace ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `vspace` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/vspace)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_vspace ( & self , vspace : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_long_desc_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `longDesc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn long_desc ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_long_desc_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_long_desc_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `longDesc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn long_desc ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_long_desc_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `longDesc` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_long_desc ( & self , long_desc : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_long_desc_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , long_desc : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let long_desc = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( long_desc , & mut __stack ) ; __widl_f_set_long_desc_HTMLImageElement ( self_ , long_desc ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `longDesc` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/longDesc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_long_desc ( & self , long_desc : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_border_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `border` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn border ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_border_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_border_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `border` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn border ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_border_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `border` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_border ( & self , border : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_border_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , border : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let border = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( border , & mut __stack ) ; __widl_f_set_border_HTMLImageElement ( self_ , border ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `border` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/border)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_border ( & self , border : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_sizes_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `sizes` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn sizes ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_sizes_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_sizes_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `sizes` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn sizes ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_sizes_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `sizes` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_sizes ( & self , sizes : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_sizes_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , sizes : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let sizes = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( sizes , & mut __stack ) ; __widl_f_set_sizes_HTMLImageElement ( self_ , sizes ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `sizes` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_sizes ( & self , sizes : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_current_src_HTMLImageElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlImageElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `currentSrc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_src ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_current_src_HTMLImageElement ( self_ : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_current_src_HTMLImageElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `currentSrc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_src ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `HTMLMediaElement` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct HtmlMediaElement { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_HtmlMediaElement : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for HtmlMediaElement { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for HtmlMediaElement { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for HtmlMediaElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a HtmlMediaElement { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for HtmlMediaElement { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { HtmlMediaElement { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for HtmlMediaElement { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a HtmlMediaElement { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for HtmlMediaElement { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < HtmlMediaElement > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( HtmlMediaElement { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for HtmlMediaElement { # [ inline ] fn from ( obj : JsValue ) -> HtmlMediaElement { HtmlMediaElement { obj } } } impl AsRef < JsValue > for HtmlMediaElement { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < HtmlMediaElement > for JsValue { # [ inline ] fn from ( obj : HtmlMediaElement ) -> JsValue { obj . obj } } impl JsCast for HtmlMediaElement { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_HTMLMediaElement ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_HTMLMediaElement ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { HtmlMediaElement { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const HtmlMediaElement ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for HtmlMediaElement { type Target = Element ; # [ inline ] fn deref ( & self ) -> & Element { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < HtmlMediaElement > for Element { # [ inline ] fn from ( obj : HtmlMediaElement ) -> Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Element > for HtmlMediaElement { # [ inline ] fn as_ref ( & self ) -> & Element { use wasm_bindgen :: JsCast ; Element :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlMediaElement > for EventTarget { # [ inline ] fn from ( obj : HtmlMediaElement ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for HtmlMediaElement { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < HtmlMediaElement > for Object { # [ inline ] fn from ( obj : HtmlMediaElement ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for HtmlMediaElement { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_can_play_type_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `canPlayType()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn can_play_type ( & self , type_ : & str ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_can_play_type_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_ : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_ = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_ , & mut __stack ) ; __widl_f_can_play_type_HTMLMediaElement ( self_ , type_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `canPlayType()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn can_play_type ( & self , type_ : & str ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fast_seek_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fastSeek()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn fast_seek ( & self , time : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fast_seek_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , time : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let time = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( time , & mut __stack ) ; __widl_f_fast_seek_HTMLMediaElement ( self_ , time , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fastSeek()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn fast_seek ( & self , time : f64 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_has_suspend_taint_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `hasSuspendTaint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/hasSuspendTaint)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn has_suspend_taint ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_has_suspend_taint_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_has_suspend_taint_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `hasSuspendTaint()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/hasSuspendTaint)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn has_suspend_taint ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_load_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `load()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn load ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_load_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_load_HTMLMediaElement ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `load()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn load ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_pause_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `pause()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn pause ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_pause_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_pause_HTMLMediaElement ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `pause()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn pause ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_play_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `play()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn play ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_play_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_play_HTMLMediaElement ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `play()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn play ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_seek_to_next_frame_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `seekToNextFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn seek_to_next_frame ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_seek_to_next_frame_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_seek_to_next_frame_HTMLMediaElement ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `seekToNextFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn seek_to_next_frame ( & self , ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_visible_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setVisible()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setVisible)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_visible ( & self , a_visible : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_visible_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_visible : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_visible = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_visible , & mut __stack ) ; __widl_f_set_visible_HTMLMediaElement ( self_ , a_visible ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setVisible()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setVisible)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_visible ( & self , a_visible : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_src_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `src` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn src ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_src_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_src_HTMLMediaElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `src` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn src ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_src_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `src` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_src ( & self , src : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_src_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , src : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let src = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( src , & mut __stack ) ; __widl_f_set_src_HTMLMediaElement ( self_ , src ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `src` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_src ( & self , src : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_current_src_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `currentSrc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_src ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_current_src_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_current_src_HTMLMediaElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `currentSrc` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_src ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cross_origin_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `crossOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn cross_origin ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_cross_origin_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_cross_origin_HTMLMediaElement ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `crossOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn cross_origin ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_cross_origin_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < & str > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `crossOrigin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_cross_origin ( & self , cross_origin : Option < & str > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_cross_origin_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cross_origin : < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let cross_origin = < Option < & str > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cross_origin , & mut __stack ) ; __widl_f_set_cross_origin_HTMLMediaElement ( self_ , cross_origin ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `crossOrigin` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_cross_origin ( & self , cross_origin : Option < & str > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_network_state_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < u16 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `networkState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn network_state ( & self , ) -> u16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_network_state_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_network_state_HTMLMediaElement ( self_ ) } ; < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `networkState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn network_state ( & self , ) -> u16 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_preload_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `preload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn preload ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_preload_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_preload_HTMLMediaElement ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `preload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn preload ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_preload_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `preload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_preload ( & self , preload : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_preload_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , preload : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let preload = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( preload , & mut __stack ) ; __widl_f_set_preload_HTMLMediaElement ( self_ , preload ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `preload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preload)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_preload ( & self , preload : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ready_state_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < u16 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `readyState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn ready_state ( & self , ) -> u16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ready_state_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ready_state_HTMLMediaElement ( self_ ) } ; < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `readyState` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn ready_state ( & self , ) -> u16 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_seeking_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `seeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn seeking ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_seeking_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_seeking_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `seeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn seeking ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_current_time_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `currentTime` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_time ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_current_time_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_current_time_HTMLMediaElement ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `currentTime` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn current_time ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_current_time_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `currentTime` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_current_time ( & self , current_time : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_current_time_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , current_time : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let current_time = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( current_time , & mut __stack ) ; __widl_f_set_current_time_HTMLMediaElement ( self_ , current_time ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `currentTime` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_current_time ( & self , current_time : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_duration_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `duration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn duration ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_duration_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_duration_HTMLMediaElement ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `duration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn duration ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_paused_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `paused` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn paused ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_paused_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_paused_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `paused` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn paused ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_default_playback_rate_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `defaultPlaybackRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn default_playback_rate ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_default_playback_rate_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_default_playback_rate_HTMLMediaElement ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `defaultPlaybackRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn default_playback_rate ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_default_playback_rate_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `defaultPlaybackRate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_default_playback_rate ( & self , default_playback_rate : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_default_playback_rate_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , default_playback_rate : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let default_playback_rate = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( default_playback_rate , & mut __stack ) ; __widl_f_set_default_playback_rate_HTMLMediaElement ( self_ , default_playback_rate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `defaultPlaybackRate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_default_playback_rate ( & self , default_playback_rate : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_playback_rate_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `playbackRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn playback_rate ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_playback_rate_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_playback_rate_HTMLMediaElement ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `playbackRate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn playback_rate ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_playback_rate_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `playbackRate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_playback_rate ( & self , playback_rate : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_playback_rate_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , playback_rate : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let playback_rate = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( playback_rate , & mut __stack ) ; __widl_f_set_playback_rate_HTMLMediaElement ( self_ , playback_rate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `playbackRate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_playback_rate ( & self , playback_rate : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ended_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn ended ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ended_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ended_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn ended ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_autoplay_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `autoplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn autoplay ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_autoplay_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_autoplay_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `autoplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn autoplay ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_autoplay_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `autoplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_autoplay ( & self , autoplay : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_autoplay_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , autoplay : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let autoplay = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( autoplay , & mut __stack ) ; __widl_f_set_autoplay_HTMLMediaElement ( self_ , autoplay ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `autoplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_autoplay ( & self , autoplay : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_loop_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `loop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn loop_ ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_loop_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_loop_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `loop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn loop_ ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_loop_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `loop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_loop ( & self , loop_ : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_loop_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , loop_ : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let loop_ = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( loop_ , & mut __stack ) ; __widl_f_set_loop_HTMLMediaElement ( self_ , loop_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `loop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_loop ( & self , loop_ : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_controls_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `controls` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn controls ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_controls_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_controls_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `controls` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn controls ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_controls_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `controls` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_controls ( & self , controls : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_controls_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , controls : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let controls = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( controls , & mut __stack ) ; __widl_f_set_controls_HTMLMediaElement ( self_ , controls ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `controls` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_controls ( & self , controls : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_volume_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `volume` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn volume ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_volume_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_volume_HTMLMediaElement ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `volume` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn volume ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_volume_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `volume` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_volume ( & self , volume : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_volume_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , volume : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let volume = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( volume , & mut __stack ) ; __widl_f_set_volume_HTMLMediaElement ( self_ , volume ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `volume` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_volume ( & self , volume : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_muted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `muted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn muted ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_muted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_muted_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `muted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn muted ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_muted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `muted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_muted ( & self , muted : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_muted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , muted : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let muted = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( muted , & mut __stack ) ; __widl_f_set_muted_HTMLMediaElement ( self_ , muted ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `muted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_muted ( & self , muted : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_default_muted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `defaultMuted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn default_muted ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_default_muted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_default_muted_HTMLMediaElement ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `defaultMuted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn default_muted ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_default_muted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `defaultMuted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_default_muted ( & self , default_muted : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_default_muted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , default_muted : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let default_muted = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( default_muted , & mut __stack ) ; __widl_f_set_default_muted_HTMLMediaElement ( self_ , default_muted ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `defaultMuted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_default_muted ( & self , default_muted : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onencrypted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onencrypted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn onencrypted ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onencrypted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onencrypted_HTMLMediaElement ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onencrypted` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn onencrypted ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onencrypted_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onencrypted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_onencrypted ( & self , onencrypted : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onencrypted_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onencrypted : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onencrypted = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onencrypted , & mut __stack ) ; __widl_f_set_onencrypted_HTMLMediaElement ( self_ , onencrypted ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onencrypted` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_onencrypted ( & self , onencrypted : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwaitingforkey_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaitingforkey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn onwaitingforkey ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwaitingforkey_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwaitingforkey_HTMLMediaElement ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaitingforkey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn onwaitingforkey ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwaitingforkey_HTMLMediaElement ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & HtmlMediaElement as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl HtmlMediaElement { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaitingforkey` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaitingforkey ( & self , onwaitingforkey : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwaitingforkey_HTMLMediaElement ( self_ : < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwaitingforkey : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & HtmlMediaElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwaitingforkey = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwaitingforkey , & mut __stack ) ; __widl_f_set_onwaitingforkey_HTMLMediaElement ( self_ , onwaitingforkey ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaitingforkey` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey)\n\n*This API requires the following crate features to be activated: `HtmlMediaElement`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaitingforkey ( & self , onwaitingforkey : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `KeyboardEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct KeyboardEvent { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_KeyboardEvent : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for KeyboardEvent { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for KeyboardEvent { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for KeyboardEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a KeyboardEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for KeyboardEvent { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { KeyboardEvent { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for KeyboardEvent { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a KeyboardEvent { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for KeyboardEvent { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < KeyboardEvent > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( KeyboardEvent { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for KeyboardEvent { # [ inline ] fn from ( obj : JsValue ) -> KeyboardEvent { KeyboardEvent { obj } } } impl AsRef < JsValue > for KeyboardEvent { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < KeyboardEvent > for JsValue { # [ inline ] fn from ( obj : KeyboardEvent ) -> JsValue { obj . obj } } impl JsCast for KeyboardEvent { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_KeyboardEvent ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_KeyboardEvent ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { KeyboardEvent { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const KeyboardEvent ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for KeyboardEvent { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < KeyboardEvent > for Object { # [ inline ] fn from ( obj : KeyboardEvent ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for KeyboardEvent { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < KeyboardEvent as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new KeyboardEvent(..)` constructor, creating a new instance of `KeyboardEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_arg : & str ) -> Result < KeyboardEvent , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_KeyboardEvent ( type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < KeyboardEvent as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; __widl_f_new_KeyboardEvent ( type_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < KeyboardEvent as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new KeyboardEvent(..)` constructor, creating a new instance of `KeyboardEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_arg : & str ) -> Result < KeyboardEvent , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_modifier_state_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getModifierState()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn get_modifier_state ( & self , key : & str ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_modifier_state_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let key = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key , & mut __stack ) ; __widl_f_get_modifier_state_KeyboardEvent ( self_ , key ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getModifierState()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn get_modifier_state ( & self , key : & str ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event ( & self , type_arg : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; __widl_f_init_keyboard_event_KeyboardEvent ( self_ , type_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event ( & self , type_arg : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg ( & self , type_arg : & str , bubbles_arg : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg ( & self , type_arg : & str , bubbles_arg : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , location_arg : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; let location_arg = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( location_arg , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , location_arg : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; let location_arg = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( location_arg , & mut __stack ) ; let ctrl_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , location_arg : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; let location_arg = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( location_arg , & mut __stack ) ; let ctrl_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key , & mut __stack ) ; let alt_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool , shift_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , location_arg : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; let location_arg = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( location_arg , & mut __stack ) ; let ctrl_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key , & mut __stack ) ; let alt_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key , & mut __stack ) ; let shift_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key , shift_key , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool , shift_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 11u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool , shift_key : bool , meta_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , bubbles_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , location_arg : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , meta_key : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let bubbles_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( bubbles_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; let location_arg = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( location_arg , & mut __stack ) ; let ctrl_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key , & mut __stack ) ; let alt_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key , & mut __stack ) ; let shift_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key , & mut __stack ) ; let meta_key = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( meta_key , & mut __stack ) ; __widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent ( self_ , type_arg , bubbles_arg , cancelable_arg , view_arg , key_arg , location_arg , ctrl_key , alt_key , shift_key , meta_key , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initKeyboardEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key ( & self , type_arg : & str , bubbles_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , key_arg : & str , location_arg : u32 , ctrl_key : bool , alt_key : bool , shift_key : bool , meta_key : bool ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_char_code_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `charCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn char_code ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_char_code_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_char_code_KeyboardEvent ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `charCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn char_code ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_key_code_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `keyCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn key_code ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_key_code_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_key_code_KeyboardEvent ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `keyCode` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn key_code ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alt_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `altKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn alt_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_alt_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_alt_key_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `altKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn alt_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ctrl_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ctrlKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ctrl_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ctrl_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ctrl_key_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ctrlKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ctrl_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shift_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shiftKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn shift_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shift_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shift_key_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shiftKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn shift_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_meta_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `metaKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn meta_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_meta_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_meta_key_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `metaKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn meta_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_location_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `location` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn location ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_location_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_location_KeyboardEvent ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `location` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn location ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_repeat_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `repeat` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn repeat ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_repeat_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_repeat_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `repeat` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn repeat ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_composing_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isComposing` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn is_composing ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_is_composing_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_is_composing_KeyboardEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isComposing` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn is_composing ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_key_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `key` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn key ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_key_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_key_KeyboardEvent ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `key` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn key ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_code_KeyboardEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & KeyboardEvent as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl KeyboardEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `code` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn code ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_code_KeyboardEvent ( self_ : < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & KeyboardEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_code_KeyboardEvent ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `code` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code)\n\n*This API requires the following crate features to be activated: `KeyboardEvent`*" ] # [ allow ( clippy :: all ) ] pub fn code ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `MouseEvent` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct MouseEvent { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_MouseEvent : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for MouseEvent { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for MouseEvent { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for MouseEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a MouseEvent { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for MouseEvent { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { MouseEvent { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for MouseEvent { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a MouseEvent { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for MouseEvent { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < MouseEvent > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( MouseEvent { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for MouseEvent { # [ inline ] fn from ( obj : JsValue ) -> MouseEvent { MouseEvent { obj } } } impl AsRef < JsValue > for MouseEvent { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < MouseEvent > for JsValue { # [ inline ] fn from ( obj : MouseEvent ) -> JsValue { obj . obj } } impl JsCast for MouseEvent { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_MouseEvent ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_MouseEvent ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { MouseEvent { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const MouseEvent ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for MouseEvent { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < MouseEvent > for Object { # [ inline ] fn from ( obj : MouseEvent ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for MouseEvent { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_new_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < MouseEvent as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `new MouseEvent(..)` constructor, creating a new instance of `MouseEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_arg : & str ) -> Result < MouseEvent , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_new_MouseEvent ( type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < MouseEvent as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; __widl_f_new_MouseEvent ( type_arg , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < MouseEvent as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `new MouseEvent(..)` constructor, creating a new instance of `MouseEvent`\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn new ( type_arg : & str ) -> Result < MouseEvent , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_modifier_state_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getModifierState()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn get_modifier_state ( & self , key_arg : & str ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_modifier_state_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , key_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let key_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( key_arg , & mut __stack ) ; __widl_f_get_modifier_state_MouseEvent ( self_ , key_arg ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getModifierState()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn get_modifier_state ( & self , key_arg : & str ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event ( & self , type_arg : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; __widl_f_init_mouse_event_MouseEvent ( self_ , type_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event ( & self , type_arg : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg ( & self , type_arg : & str , can_bubble_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_MouseEvent ( self_ , type_arg , can_bubble_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg ( & self , type_arg : & str , can_bubble_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 11u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 12u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; let alt_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg , alt_key_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 13u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; let alt_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key_arg , & mut __stack ) ; let shift_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg , alt_key_arg , shift_key_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 14u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , meta_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; let alt_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key_arg , & mut __stack ) ; let shift_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key_arg , & mut __stack ) ; let meta_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( meta_key_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg , alt_key_arg , shift_key_arg , meta_key_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 15u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < i16 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool , button_arg : i16 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , meta_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , button_arg : < i16 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; let alt_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key_arg , & mut __stack ) ; let shift_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key_arg , & mut __stack ) ; let meta_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( meta_key_arg , & mut __stack ) ; let button_arg = < i16 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( button_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg , alt_key_arg , shift_key_arg , meta_key_arg , button_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool , button_arg : i16 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 16u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < Option < & Window > as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; < i16 as WasmDescribe > :: describe ( ) ; < Option < & EventTarget > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `EventTarget`, `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool , button_arg : i16 , related_target_arg : Option < & EventTarget > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , type_arg : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , can_bubble_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , cancelable_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , view_arg : < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , detail_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_x_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , client_y_arg : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ctrl_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , alt_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , shift_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , meta_key_arg : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , button_arg : < i16 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , related_target_arg : < Option < & EventTarget > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let type_arg = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( type_arg , & mut __stack ) ; let can_bubble_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( can_bubble_arg , & mut __stack ) ; let cancelable_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( cancelable_arg , & mut __stack ) ; let view_arg = < Option < & Window > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( view_arg , & mut __stack ) ; let detail_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( detail_arg , & mut __stack ) ; let screen_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x_arg , & mut __stack ) ; let screen_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y_arg , & mut __stack ) ; let client_x_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_x_arg , & mut __stack ) ; let client_y_arg = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( client_y_arg , & mut __stack ) ; let ctrl_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ctrl_key_arg , & mut __stack ) ; let alt_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( alt_key_arg , & mut __stack ) ; let shift_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( shift_key_arg , & mut __stack ) ; let meta_key_arg = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( meta_key_arg , & mut __stack ) ; let button_arg = < i16 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( button_arg , & mut __stack ) ; let related_target_arg = < Option < & EventTarget > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( related_target_arg , & mut __stack ) ; __widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg_MouseEvent ( self_ , type_arg , can_bubble_arg , cancelable_arg , view_arg , detail_arg , screen_x_arg , screen_y_arg , client_x_arg , client_y_arg , ctrl_key_arg , alt_key_arg , shift_key_arg , meta_key_arg , button_arg , related_target_arg ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `initMouseEvent()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent)\n\n*This API requires the following crate features to be activated: `EventTarget`, `MouseEvent`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg ( & self , type_arg : & str , can_bubble_arg : bool , cancelable_arg : bool , view_arg : Option < & Window > , detail_arg : i32 , screen_x_arg : i32 , screen_y_arg : i32 , client_x_arg : i32 , client_y_arg : i32 , ctrl_key_arg : bool , alt_key_arg : bool , shift_key_arg : bool , meta_key_arg : bool , button_arg : i16 , related_target_arg : Option < & EventTarget > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_x_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn screen_x ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_screen_x_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_x_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn screen_x ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_y_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn screen_y ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_screen_y_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_y_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn screen_y ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_x_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn client_x ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_x_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_x_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn client_x ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_client_y_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clientY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn client_y ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_client_y_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_client_y_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clientY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn client_y ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_x_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `x` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn x ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_x_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_x_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `x` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/x)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn x ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_y_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `y` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn y ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_y_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_y_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `y` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/y)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn y ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_offset_x_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `offsetX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn offset_x ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_offset_x_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_offset_x_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `offsetX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn offset_x ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_offset_y_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `offsetY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn offset_y ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_offset_y_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_offset_y_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `offsetY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn offset_y ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ctrl_key_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ctrlKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ctrl_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ctrl_key_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ctrl_key_MouseEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ctrlKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn ctrl_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_shift_key_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `shiftKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn shift_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_shift_key_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_shift_key_MouseEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `shiftKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn shift_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alt_key_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `altKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn alt_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_alt_key_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_alt_key_MouseEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `altKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn alt_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_meta_key_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `metaKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn meta_key ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_meta_key_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_meta_key_MouseEvent ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `metaKey` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn meta_key ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_button_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i16 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `button` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn button ( & self , ) -> i16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_button_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_button_MouseEvent ( self_ ) } ; < i16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `button` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn button ( & self , ) -> i16 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_buttons_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < u16 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `buttons` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn buttons ( & self , ) -> u16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_buttons_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_buttons_MouseEvent ( self_ ) } ; < u16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `buttons` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn buttons ( & self , ) -> u16 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_related_target_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < Option < EventTarget > as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `relatedTarget` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n*This API requires the following crate features to be activated: `EventTarget`, `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn related_target ( & self , ) -> Option < EventTarget > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_related_target_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < EventTarget > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_related_target_MouseEvent ( self_ ) } ; < Option < EventTarget > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `relatedTarget` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget)\n\n*This API requires the following crate features to be activated: `EventTarget`, `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn related_target ( & self , ) -> Option < EventTarget > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_region_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `region` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/region)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn region ( & self , ) -> Option < String > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_region_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_region_MouseEvent ( self_ ) } ; < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `region` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/region)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn region ( & self , ) -> Option < String > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_movement_x_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `movementX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn movement_x ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_movement_x_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_movement_x_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `movementX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn movement_x ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_movement_y_MouseEvent ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & MouseEvent as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl MouseEvent { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `movementY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn movement_y ( & self , ) -> i32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_movement_y_MouseEvent ( self_ : < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & MouseEvent as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_movement_y_MouseEvent ( self_ ) } ; < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `movementY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementY)\n\n*This API requires the following crate features to be activated: `MouseEvent`*" ] # [ allow ( clippy :: all ) ] pub fn movement_y ( & self , ) -> i32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Performance` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Performance { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Performance : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Performance { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for Performance { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Performance { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Performance { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Performance { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { Performance { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for Performance { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Performance { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Performance { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Performance > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Performance { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for Performance { # [ inline ] fn from ( obj : JsValue ) -> Performance { Performance { obj } } } impl AsRef < JsValue > for Performance { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < Performance > for JsValue { # [ inline ] fn from ( obj : Performance ) -> JsValue { obj . obj } } impl JsCast for Performance { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_Performance ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Performance ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Performance { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Performance ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for Performance { type Target = EventTarget ; # [ inline ] fn deref ( & self ) -> & EventTarget { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < Performance > for EventTarget { # [ inline ] fn from ( obj : Performance ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for Performance { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < Performance > for Object { # [ inline ] fn from ( obj : Performance ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Performance { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_marks_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearMarks()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_marks ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_marks_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_marks_Performance ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearMarks()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_marks ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_marks_with_mark_name_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearMarks()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_marks_with_mark_name ( & self , mark_name : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_marks_with_mark_name_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , mark_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let mark_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( mark_name , & mut __stack ) ; __widl_f_clear_marks_with_mark_name_Performance ( self_ , mark_name ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearMarks()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_marks_with_mark_name ( & self , mark_name : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_measures_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearMeasures()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_measures ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_measures_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_measures_Performance ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearMeasures()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_measures ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_measures_with_measure_name_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearMeasures()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_measures_with_measure_name ( & self , measure_name : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_measures_with_measure_name_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , measure_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let measure_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( measure_name , & mut __stack ) ; __widl_f_clear_measures_with_measure_name_Performance ( self_ , measure_name ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearMeasures()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_measures_with_measure_name ( & self , measure_name : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_resource_timings_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearResourceTimings()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_resource_timings ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_resource_timings_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_resource_timings_Performance ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearResourceTimings()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn clear_resource_timings ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_entries_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getEntries()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries ( & self , ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_entries_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_get_entries_Performance ( self_ ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getEntries()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries ( & self , ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_entries_by_name_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getEntriesByName()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_name ( & self , name : & str ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_entries_by_name_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_get_entries_by_name_Performance ( self_ , name ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getEntriesByName()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_name ( & self , name : & str ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_entries_by_name_with_entry_type_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getEntriesByName()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_name_with_entry_type ( & self , name : & str , entry_type : & str ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_entries_by_name_with_entry_type_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , entry_type : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; let entry_type = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( entry_type , & mut __stack ) ; __widl_f_get_entries_by_name_with_entry_type_Performance ( self_ , name , entry_type ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getEntriesByName()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_name_with_entry_type ( & self , name : & str , entry_type : & str ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_entries_by_type_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Array as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `getEntriesByType()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_type ( & self , entry_type : & str ) -> :: js_sys :: Array { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_entries_by_type_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , entry_type : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let entry_type = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( entry_type , & mut __stack ) ; __widl_f_get_entries_by_type_Performance ( self_ , entry_type ) } ; < :: js_sys :: Array as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `getEntriesByType()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn get_entries_by_type ( & self , entry_type : & str ) -> :: js_sys :: Array { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_mark_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `mark()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn mark ( & self , mark_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_mark_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , mark_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let mark_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( mark_name , & mut __stack ) ; __widl_f_mark_Performance ( self_ , mark_name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `mark()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn mark ( & self , mark_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_measure_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure ( & self , measure_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_measure_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , measure_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let measure_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( measure_name , & mut __stack ) ; __widl_f_measure_Performance ( self_ , measure_name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure ( & self , measure_name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_measure_with_start_mark_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure_with_start_mark ( & self , measure_name : & str , start_mark : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_measure_with_start_mark_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , measure_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_mark : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let measure_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( measure_name , & mut __stack ) ; let start_mark = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_mark , & mut __stack ) ; __widl_f_measure_with_start_mark_Performance ( self_ , measure_name , start_mark , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure_with_start_mark ( & self , measure_name : & str , start_mark : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_measure_with_start_mark_and_end_mark_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure_with_start_mark_and_end_mark ( & self , measure_name : & str , start_mark : & str , end_mark : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_measure_with_start_mark_and_end_mark_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , measure_name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , start_mark : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , end_mark : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let measure_name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( measure_name , & mut __stack ) ; let start_mark = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( start_mark , & mut __stack ) ; let end_mark = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( end_mark , & mut __stack ) ; __widl_f_measure_with_start_mark_and_end_mark_Performance ( self_ , measure_name , start_mark , end_mark , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `measure()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn measure_with_start_mark_and_end_mark ( & self , measure_name : & str , start_mark : & str , end_mark : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_now_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `now()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn now ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_now_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_now_Performance ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `now()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn now ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_resource_timing_buffer_size_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setResourceTimingBufferSize()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn set_resource_timing_buffer_size ( & self , max_size : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_resource_timing_buffer_size_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , max_size : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let max_size = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( max_size , & mut __stack ) ; __widl_f_set_resource_timing_buffer_size_Performance ( self_ , max_size ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setResourceTimingBufferSize()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn set_resource_timing_buffer_size ( & self , max_size : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_json_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < :: js_sys :: Object as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toJSON()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn to_json ( & self , ) -> :: js_sys :: Object { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_json_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_to_json_Performance ( self_ ) } ; < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toJSON()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn to_json ( & self , ) -> :: js_sys :: Object { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_origin_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `timeOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn time_origin ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_origin_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_time_origin_Performance ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `timeOrigin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn time_origin ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_timing_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < PerformanceTiming as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `timing` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing)\n\n*This API requires the following crate features to be activated: `Performance`, `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn timing ( & self , ) -> PerformanceTiming { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_timing_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < PerformanceTiming as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_timing_Performance ( self_ ) } ; < PerformanceTiming as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `timing` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing)\n\n*This API requires the following crate features to be activated: `Performance`, `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn timing ( & self , ) -> PerformanceTiming { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onresourcetimingbufferfull_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresourcetimingbufferfull` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn onresourcetimingbufferfull ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onresourcetimingbufferfull_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onresourcetimingbufferfull_Performance ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresourcetimingbufferfull` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn onresourcetimingbufferfull ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onresourcetimingbufferfull_Performance ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Performance as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Performance { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresourcetimingbufferfull` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresourcetimingbufferfull ( & self , onresourcetimingbufferfull : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onresourcetimingbufferfull_Performance ( self_ : < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onresourcetimingbufferfull : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Performance as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onresourcetimingbufferfull = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onresourcetimingbufferfull , & mut __stack ) ; __widl_f_set_onresourcetimingbufferfull_Performance ( self_ , onresourcetimingbufferfull ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresourcetimingbufferfull` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull)\n\n*This API requires the following crate features to be activated: `Performance`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresourcetimingbufferfull ( & self , onresourcetimingbufferfull : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `PerformanceTiming` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct PerformanceTiming { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_PerformanceTiming : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for PerformanceTiming { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for PerformanceTiming { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for PerformanceTiming { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a PerformanceTiming { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for PerformanceTiming { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { PerformanceTiming { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for PerformanceTiming { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a PerformanceTiming { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for PerformanceTiming { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < PerformanceTiming > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( PerformanceTiming { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for PerformanceTiming { # [ inline ] fn from ( obj : JsValue ) -> PerformanceTiming { PerformanceTiming { obj } } } impl AsRef < JsValue > for PerformanceTiming { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < PerformanceTiming > for JsValue { # [ inline ] fn from ( obj : PerformanceTiming ) -> JsValue { obj . obj } } impl JsCast for PerformanceTiming { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_PerformanceTiming ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_PerformanceTiming ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { PerformanceTiming { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const PerformanceTiming ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for PerformanceTiming { type Target = Object ; # [ inline ] fn deref ( & self ) -> & Object { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < PerformanceTiming > for Object { # [ inline ] fn from ( obj : PerformanceTiming ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for PerformanceTiming { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_to_json_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < :: js_sys :: Object as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `toJSON()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/toJSON)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn to_json ( & self , ) -> :: js_sys :: Object { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_to_json_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_to_json_PerformanceTiming ( self_ ) } ; < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `toJSON()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/toJSON)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn to_json ( & self , ) -> :: js_sys :: Object { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_navigation_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `navigationStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn navigation_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_navigation_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_navigation_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `navigationStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn navigation_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_unload_event_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `unloadEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn unload_event_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_unload_event_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_unload_event_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `unloadEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn unload_event_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_unload_event_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `unloadEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn unload_event_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_unload_event_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_unload_event_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `unloadEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/unloadEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn unload_event_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_redirect_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `redirectStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn redirect_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_redirect_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_redirect_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `redirectStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn redirect_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_redirect_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `redirectEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn redirect_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_redirect_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_redirect_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `redirectEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/redirectEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn redirect_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fetch_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fetchStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/fetchStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn fetch_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fetch_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_fetch_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fetchStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/fetchStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn fetch_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_domain_lookup_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domainLookupStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn domain_lookup_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_domain_lookup_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_domain_lookup_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domainLookupStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn domain_lookup_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_domain_lookup_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domainLookupEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn domain_lookup_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_domain_lookup_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_domain_lookup_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domainLookupEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domainLookupEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn domain_lookup_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_connect_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `connectStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn connect_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_connect_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_connect_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `connectStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn connect_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_connect_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `connectEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn connect_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_connect_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_connect_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `connectEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/connectEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn connect_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_secure_connection_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `secureConnectionStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/secureConnectionStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn secure_connection_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_secure_connection_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_secure_connection_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `secureConnectionStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/secureConnectionStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn secure_connection_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `requestStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/requestStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn request_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_request_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_request_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `requestStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/requestStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn request_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_response_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `responseStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn response_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_response_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_response_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `responseStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn response_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_response_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `responseEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn response_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_response_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_response_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `responseEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn response_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dom_loading_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domLoading` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domLoading)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_loading ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dom_loading_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dom_loading_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domLoading` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domLoading)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_loading ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dom_interactive_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domInteractive` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domInteractive)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_interactive ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dom_interactive_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dom_interactive_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domInteractive` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domInteractive)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_interactive ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dom_content_loaded_event_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domContentLoadedEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_content_loaded_event_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dom_content_loaded_event_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dom_content_loaded_event_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domContentLoadedEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_content_loaded_event_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dom_content_loaded_event_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domContentLoadedEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_content_loaded_event_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dom_content_loaded_event_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dom_content_loaded_event_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domContentLoadedEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_content_loaded_event_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dom_complete_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `domComplete` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domComplete)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_complete ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dom_complete_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_dom_complete_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `domComplete` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/domComplete)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn dom_complete ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_load_event_start_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `loadEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn load_event_start ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_load_event_start_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_load_event_start_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `loadEventStart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventStart)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn load_event_start ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_load_event_end_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `loadEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn load_event_end ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_load_event_end_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_load_event_end_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `loadEventEnd` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/loadEventEnd)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn load_event_end ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_to_non_blank_paint_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `timeToNonBlankPaint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/timeToNonBlankPaint)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn time_to_non_blank_paint ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_to_non_blank_paint_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_time_to_non_blank_paint_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `timeToNonBlankPaint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/timeToNonBlankPaint)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn time_to_non_blank_paint ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_to_dom_content_flushed_PerformanceTiming ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & PerformanceTiming as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl PerformanceTiming { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `timeToDOMContentFlushed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/timeToDOMContentFlushed)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn time_to_dom_content_flushed ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_to_dom_content_flushed_PerformanceTiming ( self_ : < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & PerformanceTiming as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_time_to_dom_content_flushed_PerformanceTiming ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `timeToDOMContentFlushed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/timeToDOMContentFlushed)\n\n*This API requires the following crate features to be activated: `PerformanceTiming`*" ] # [ allow ( clippy :: all ) ] pub fn time_to_dom_content_flushed ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ allow ( bad_style ) ] # [ derive ( Debug , Clone ) ] # [ doc = "The `Window` object\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ repr ( transparent ) ] # [ allow ( clippy :: all ) ] pub struct Window { obj : :: wasm_bindgen :: JsValue , } # [ allow ( bad_style ) ] # [ allow ( clippy :: all ) ] const __wbg_generated_const_Window : ( ) = { use wasm_bindgen :: convert :: { IntoWasmAbi , FromWasmAbi , Stack } ; use wasm_bindgen :: convert :: { OptionIntoWasmAbi , OptionFromWasmAbi } ; use wasm_bindgen :: convert :: RefFromWasmAbi ; use wasm_bindgen :: describe :: WasmDescribe ; use wasm_bindgen :: { JsValue , JsCast } ; use wasm_bindgen :: __rt :: core ; impl WasmDescribe for Window { fn describe ( ) { JsValue :: describe ( ) ; } } impl IntoWasmAbi for Window { type Abi = < JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { self . obj . into_abi ( extra ) } } impl OptionIntoWasmAbi for Window { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl < 'a > OptionIntoWasmAbi for & 'a Window { # [ inline ] fn none ( ) -> Self :: Abi { 0 } } impl FromWasmAbi for Window { type Abi = < JsValue as FromWasmAbi > :: Abi ; # [ inline ] unsafe fn from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self { Window { obj : JsValue :: from_abi ( js , extra ) , } } } impl OptionFromWasmAbi for Window { # [ inline ] fn is_none ( abi : & Self :: Abi ) -> bool { * abi == 0 } } impl < 'a > IntoWasmAbi for & 'a Window { type Abi = < & 'a JsValue as IntoWasmAbi > :: Abi ; # [ inline ] fn into_abi ( self , extra : & mut Stack ) -> Self :: Abi { ( & self . obj ) . into_abi ( extra ) } } impl RefFromWasmAbi for Window { type Abi = < JsValue as RefFromWasmAbi > :: Abi ; type Anchor = core :: mem :: ManuallyDrop < Window > ; # [ inline ] unsafe fn ref_from_abi ( js : Self :: Abi , extra : & mut Stack ) -> Self :: Anchor { let tmp = < JsValue as RefFromWasmAbi > :: ref_from_abi ( js , extra ) ; core :: mem :: ManuallyDrop :: new ( Window { obj : core :: mem :: ManuallyDrop :: into_inner ( tmp ) , } ) } } impl From < JsValue > for Window { # [ inline ] fn from ( obj : JsValue ) -> Window { Window { obj } } } impl AsRef < JsValue > for Window { # [ inline ] fn as_ref ( & self ) -> & JsValue { & self . obj } } impl From < Window > for JsValue { # [ inline ] fn from ( obj : Window ) -> JsValue { obj . obj } } impl JsCast for Window { # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_instanceof_Window ( val : u32 ) -> u32 ; } unsafe { let idx = val . into_abi ( & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ; __widl_instanceof_Window ( idx ) != 0 } } # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] fn instanceof ( val : & JsValue ) -> bool { drop ( val ) ; panic ! ( "cannot check instanceof on non-wasm targets" ) ; } # [ inline ] fn unchecked_from_js ( val : JsValue ) -> Self { Window { obj : val } } # [ inline ] fn unchecked_from_js_ref ( val : & JsValue ) -> & Self { unsafe { & * ( val as * const JsValue as * const Window ) } } } ( ) } ; # [ allow ( clippy :: all ) ] impl core :: ops :: Deref for Window { type Target = EventTarget ; # [ inline ] fn deref ( & self ) -> & EventTarget { self . as_ref ( ) } } # [ allow ( clippy :: all ) ] impl From < Window > for EventTarget { # [ inline ] fn from ( obj : Window ) -> EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < EventTarget > for Window { # [ inline ] fn as_ref ( & self ) -> & EventTarget { use wasm_bindgen :: JsCast ; EventTarget :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ allow ( clippy :: all ) ] impl From < Window > for Object { # [ inline ] fn from ( obj : Window ) -> Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js ( obj . into ( ) ) } } # [ allow ( clippy :: all ) ] impl AsRef < Object > for Window { # [ inline ] fn as_ref ( & self ) -> & Object { use wasm_bindgen :: JsCast ; Object :: unchecked_from_js_ref ( self . as_ref ( ) ) } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alert_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_alert_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_alert_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_alert_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert_with_message ( & self , message : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_alert_with_message_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_alert_with_message_Window ( self_ , message , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `alert()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn alert_with_message ( & self , message : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_blur_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `blur()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn blur ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_blur_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_blur_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `blur()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn blur ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancel_animation_frame_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `cancelAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_animation_frame ( & self , handle : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_cancel_animation_frame_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_cancel_animation_frame_Window ( self_ , handle , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `cancelAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_animation_frame ( & self , handle : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_cancel_idle_callback_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `cancelIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_idle_callback ( & self , handle : u32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_cancel_idle_callback_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < u32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_cancel_idle_callback_Window ( self_ , handle ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `cancelIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn cancel_idle_callback ( & self , handle : u32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_capture_events_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `captureEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn capture_events ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_capture_events_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_capture_events_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `captureEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn capture_events ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_close_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn close ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_close_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_close_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `close()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn close ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_confirm_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_confirm_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_confirm_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_confirm_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm_with_message ( & self , message : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_confirm_with_message_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_confirm_with_message_Window ( self_ , message , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `confirm()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn confirm_with_message ( & self , message : & str ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_focus_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `focus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn focus ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_focus_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_focus_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `focus()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn focus ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_by_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `moveBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_move_by_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_by_Window ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `moveBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_move_to_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_move_to_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_move_to_Window ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `moveTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn move_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_open_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_open_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url ( & self , url : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_open_with_url_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; __widl_f_open_with_url_Window ( self_ , url , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url ( & self , url : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target ( & self , url : & str , target : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_open_with_url_and_target_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let target = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target , & mut __stack ) ; __widl_f_open_with_url_and_target_Window ( self_ , url , target , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target ( & self , url : & str , target : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_open_with_url_and_target_and_features_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target_and_features ( & self , url : & str , target : & str , features : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_open_with_url_and_target_and_features_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , url : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , features : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let url = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( url , & mut __stack ) ; let target = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target , & mut __stack ) ; let features = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( features , & mut __stack ) ; __widl_f_open_with_url_and_target_and_features_Window ( self_ , url , target , features , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `open()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn open_with_url_and_target_and_features ( & self , url : & str , target : & str , features : & str ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_post_message_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let target_origin = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target_origin , & mut __stack ) ; __widl_f_post_message_Window ( self_ , message , target_origin , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_post_message_with_transfer_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_post_message_with_transfer_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , target_origin : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , transfer : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let target_origin = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( target_origin , & mut __stack ) ; let transfer = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( transfer , & mut __stack ) ; __widl_f_post_message_with_transfer_Window ( self_ , message , target_origin , transfer , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `postMessage()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn post_message_with_transfer ( & self , message : & :: wasm_bindgen :: JsValue , target_origin : & str , transfer : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_print_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `print()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn print ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_print_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_print_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `print()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn print ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt ( & self , ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prompt_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_prompt_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt ( & self , ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message ( & self , message : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prompt_with_message_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; __widl_f_prompt_with_message_Window ( self_ , message , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message ( & self , message : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_prompt_with_message_and_default_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < Option < String > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message_and_default ( & self , message : & str , default : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_prompt_with_message_and_default_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , message : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , default : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let message = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( message , & mut __stack ) ; let default = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( default , & mut __stack ) ; __widl_f_prompt_with_message_and_default_Window ( self_ , message , default , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < String > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `prompt()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn prompt_with_message_and_default ( & self , message : & str , default : & str ) -> Result < Option < String > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_release_events_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `releaseEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn release_events ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_release_events_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_release_events_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `releaseEvents()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn release_events ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_animation_frame_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `requestAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_animation_frame ( & self , callback : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_request_animation_frame_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; __widl_f_request_animation_frame_Window ( self_ , callback , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `requestAnimationFrame()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_animation_frame ( & self , callback : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_request_idle_callback_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_idle_callback ( & self , callback : & :: js_sys :: Function ) -> Result < u32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_request_idle_callback_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , callback : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let callback = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( callback , & mut __stack ) ; __widl_f_request_idle_callback_Window ( self_ , callback , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `requestIdleCallback()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn request_idle_callback ( & self , callback : & :: js_sys :: Function ) -> Result < u32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_resize_by_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `resizeBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_resize_by_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_resize_by_Window ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `resizeBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_by ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_resize_to_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `resizeTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_resize_to_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_resize_to_Window ( self_ , x , y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `resizeTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn resize_to ( & self , x : i32 , y : i32 ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_with_x_and_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scroll()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_by_with_x_and_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_by_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_by_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_by_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_by_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollBy()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_by ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_with_x_and_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to_with_x_and_y ( & self , x : f64 , y : f64 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_to_with_x_and_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , x : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , y : < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let x = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( x , & mut __stack ) ; let y = < f64 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( y , & mut __stack ) ; __widl_f_scroll_to_with_x_and_y_Window ( self_ , x , y ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to_with_x_and_y ( & self , x : f64 , y : f64 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_to_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_to_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_to_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollTo()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_to ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_stop_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn stop ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_stop_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_stop_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `stop()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn stop ( & self , ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_get_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Object as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The indexing getter\n\n\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn get ( & self , name : & str ) -> :: js_sys :: Object { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_get_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_get_Window ( self_ , name ) } ; < :: js_sys :: Object as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The indexing getter\n\n\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn get ( & self , name : & str ) -> :: js_sys :: Object { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_window_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `window` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn window ( & self , ) -> Window { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_window_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_window_Window ( self_ ) } ; < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `window` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn window ( & self , ) -> Window { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_self_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `self` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn self_ ( & self , ) -> Window { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_self_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_self_Window ( self_ ) } ; < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `self` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn self_ ( & self , ) -> Window { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_document_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Document > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `document` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn document ( & self , ) -> Option < Document > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_document_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Document > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_document_Window ( self_ ) } ; < Option < Document > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `document` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)\n\n*This API requires the following crate features to be activated: `Document`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn document ( & self , ) -> Option < Document > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_name_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_name_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_name_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `name` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn name ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_name_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_name ( & self , name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_name_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , name : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let name = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( name , & mut __stack ) ; __widl_f_set_name_Window ( self_ , name , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `name` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_name ( & self , name : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_status_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `status` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn status ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_status_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_status_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `status` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn status ( & self , ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_status_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `status` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_status ( & self , status : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_status_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , status : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let status = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( status , & mut __stack ) ; __widl_f_set_status_Window ( self_ , status , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `status` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_status ( & self , status : & str ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_closed_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `closed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn closed ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_closed_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_closed_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `closed` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn closed ( & self , ) -> Result < bool , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_event_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `event` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn event ( & self , ) -> :: wasm_bindgen :: JsValue { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_event_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_event_Window ( self_ ) } ; < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `event` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn event ( & self , ) -> :: wasm_bindgen :: JsValue { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_frames_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Window as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `frames` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn frames ( & self , ) -> Result < Window , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_frames_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_frames_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Window as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `frames` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn frames ( & self , ) -> Result < Window , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_length_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < u32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn length ( & self , ) -> u32 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_length_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_length_Window ( self_ ) } ; < u32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `length` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn length ( & self , ) -> u32 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_top_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `top` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn top ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_top_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_top_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `top` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn top ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_opener_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `opener` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn opener ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_opener_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_opener_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `opener` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn opener ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_opener_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `opener` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_opener ( & self , opener : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_opener_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , opener : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let opener = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( opener , & mut __stack ) ; __widl_f_set_opener_Window ( self_ , opener , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `opener` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_opener ( & self , opener : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_parent_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Window > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `parent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn parent ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_parent_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_parent_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Window > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `parent` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn parent ( & self , ) -> Result < Option < Window > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_frame_element_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Element > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `frameElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)\n\n*This API requires the following crate features to be activated: `Element`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn frame_element ( & self , ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_frame_element_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_frame_element_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < Option < Element > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `frameElement` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)\n\n*This API requires the following crate features to be activated: `Element`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn frame_element ( & self , ) -> Result < Option < Element > , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onappinstalled_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onappinstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onappinstalled ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onappinstalled_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onappinstalled_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onappinstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onappinstalled ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onappinstalled_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onappinstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onappinstalled ( & self , onappinstalled : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onappinstalled_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onappinstalled : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onappinstalled = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onappinstalled , & mut __stack ) ; __widl_f_set_onappinstalled_Window ( self_ , onappinstalled ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onappinstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onappinstalled ( & self , onappinstalled : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_inner_width_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_inner_width_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_inner_width_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_inner_width_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_width ( & self , inner_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_inner_width_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_width : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let inner_width = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( inner_width , & mut __stack ) ; __widl_f_set_inner_width_Window ( self_ , inner_width , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_width ( & self , inner_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_inner_height_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_inner_height_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_inner_height_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn inner_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_inner_height_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `innerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_height ( & self , inner_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_inner_height_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , inner_height : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let inner_height = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( inner_height , & mut __stack ) ; __widl_f_set_inner_height_Window ( self_ , inner_height , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `innerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_inner_height ( & self , inner_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_x_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_x ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_x_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_x_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_x ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_page_x_offset_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `pageXOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_x_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_page_x_offset_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_page_x_offset_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `pageXOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_x_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_scroll_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `scrollY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_y ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_scroll_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_scroll_y_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `scrollY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn scroll_y ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_page_y_offset_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `pageYOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_y_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_page_y_offset_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_page_y_offset_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `pageYOffset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn page_y_offset ( & self , ) -> Result < f64 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_x_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_x ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_screen_x_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_x_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenX` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_x ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_screen_x_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_x ( & self , screen_x : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_screen_x_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_x : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let screen_x = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_x , & mut __stack ) ; __widl_f_set_screen_x_Window ( self_ , screen_x , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenX` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_x ( & self , screen_x : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_screen_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_y ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_screen_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_screen_y_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenY` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn screen_y ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_screen_y_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `screenY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_y ( & self , screen_y : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_screen_y_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , screen_y : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let screen_y = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( screen_y , & mut __stack ) ; __widl_f_set_screen_y_Window ( self_ , screen_y , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `screenY` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_screen_y ( & self , screen_y : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_outer_width_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_outer_width_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_outer_width_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerWidth` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_width ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_outer_width_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_width ( & self , outer_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_outer_width_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_width : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let outer_width = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( outer_width , & mut __stack ) ; __widl_f_set_outer_width_Window ( self_ , outer_width , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerWidth` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_width ( & self , outer_width : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_outer_height_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_outer_height_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_outer_height_Window ( self_ , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerHeight` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn outer_height ( & self , ) -> Result < :: wasm_bindgen :: JsValue , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_outer_height_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `outerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_height ( & self , outer_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_outer_height_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , outer_height : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> ( ) ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let outer_height = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( outer_height , & mut __stack ) ; __widl_f_set_outer_height_Window ( self_ , outer_height , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( ( ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `outerHeight` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_outer_height ( & self , outer_height : & :: wasm_bindgen :: JsValue ) -> Result < ( ) , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_device_pixel_ratio_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < f64 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `devicePixelRatio` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn device_pixel_ratio ( & self , ) -> f64 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_device_pixel_ratio_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_device_pixel_ratio_Window ( self_ ) } ; < f64 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `devicePixelRatio` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn device_pixel_ratio ( & self , ) -> f64 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_performance_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < Performance > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `performance` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/performance)\n\n*This API requires the following crate features to be activated: `Performance`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn performance ( & self , ) -> Option < Performance > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_performance_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < Performance > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_performance_Window ( self_ ) } ; < Option < Performance > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `performance` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/performance)\n\n*This API requires the following crate features to be activated: `Performance`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn performance ( & self , ) -> Option < Performance > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_orientation_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i16 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `orientation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn orientation ( & self , ) -> i16 { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_orientation_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < i16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_orientation_Window ( self_ ) } ; < i16 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `orientation` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn orientation ( & self , ) -> i16 { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onorientationchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onorientationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onorientationchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onorientationchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onorientationchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onorientationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onorientationchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onorientationchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onorientationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onorientationchange ( & self , onorientationchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onorientationchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onorientationchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onorientationchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onorientationchange , & mut __stack ) ; __widl_f_set_onorientationchange_Window ( self_ , onorientationchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onorientationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onorientationchange ( & self , onorientationchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayconnect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplayconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayconnect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvrdisplayconnect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplayconnect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplayconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayconnect ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayconnect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplayconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayconnect ( & self , onvrdisplayconnect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvrdisplayconnect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayconnect : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplayconnect = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplayconnect , & mut __stack ) ; __widl_f_set_onvrdisplayconnect_Window ( self_ , onvrdisplayconnect ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplayconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayconnect ( & self , onvrdisplayconnect : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydisconnect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaydisconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydisconnect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvrdisplaydisconnect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaydisconnect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaydisconnect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydisconnect ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydisconnect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaydisconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydisconnect ( & self , onvrdisplaydisconnect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvrdisplaydisconnect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydisconnect : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaydisconnect = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaydisconnect , & mut __stack ) ; __widl_f_set_onvrdisplaydisconnect_Window ( self_ , onvrdisplaydisconnect ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaydisconnect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydisconnect ( & self , onvrdisplaydisconnect : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplayactivate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplayactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayactivate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvrdisplayactivate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplayactivate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplayactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplayactivate ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplayactivate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplayactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayactivate ( & self , onvrdisplayactivate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvrdisplayactivate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplayactivate : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplayactivate = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplayactivate , & mut __stack ) ; __widl_f_set_onvrdisplayactivate_Window ( self_ , onvrdisplayactivate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplayactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplayactivate ( & self , onvrdisplayactivate : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaydeactivate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaydeactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydeactivate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvrdisplaydeactivate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaydeactivate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaydeactivate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaydeactivate ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaydeactivate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaydeactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydeactivate ( & self , onvrdisplaydeactivate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvrdisplaydeactivate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaydeactivate : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaydeactivate = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaydeactivate , & mut __stack ) ; __widl_f_set_onvrdisplaydeactivate_Window ( self_ , onvrdisplaydeactivate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaydeactivate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaydeactivate ( & self , onvrdisplaydeactivate : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvrdisplaypresentchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaypresentchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaypresentchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvrdisplaypresentchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvrdisplaypresentchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaypresentchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvrdisplaypresentchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvrdisplaypresentchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvrdisplaypresentchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaypresentchange ( & self , onvrdisplaypresentchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvrdisplaypresentchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvrdisplaypresentchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvrdisplaypresentchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvrdisplaypresentchange , & mut __stack ) ; __widl_f_set_onvrdisplaypresentchange_Window ( self_ , onvrdisplaypresentchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvrdisplaypresentchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvrdisplaypresentchange ( & self , onvrdisplaypresentchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onabort_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onabort ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onabort_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onabort_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onabort` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onabort ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onabort_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onabort ( & self , onabort : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onabort_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onabort : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onabort = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onabort , & mut __stack ) ; __widl_f_set_onabort_Window ( self_ , onabort ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onabort` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onabort ( & self , onabort : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onblur_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onblur ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onblur_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onblur_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onblur` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onblur ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onblur_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onblur ( & self , onblur : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onblur_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onblur : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onblur = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onblur , & mut __stack ) ; __widl_f_set_onblur_Window ( self_ , onblur ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onblur` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onblur ( & self , onblur : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onfocus_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onfocus ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onfocus_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onfocus_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfocus` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onfocus ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onfocus_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfocus ( & self , onfocus : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onfocus_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onfocus : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onfocus = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onfocus , & mut __stack ) ; __widl_f_set_onfocus_Window ( self_ , onfocus ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onfocus` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onfocus ( & self , onfocus : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onauxclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onauxclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onauxclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onauxclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onauxclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onauxclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onauxclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onauxclick ( & self , onauxclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onauxclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onauxclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onauxclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onauxclick , & mut __stack ) ; __widl_f_set_onauxclick_Window ( self_ , onauxclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onauxclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onauxclick ( & self , onauxclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplay_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncanplay_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplay_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplay ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplay_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplay ( & self , oncanplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncanplay_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplay : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplay = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplay , & mut __stack ) ; __widl_f_set_oncanplay_Window ( self_ , oncanplay ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplay ( & self , oncanplay : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncanplaythrough_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplaythrough ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncanplaythrough_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncanplaythrough_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplaythrough` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncanplaythrough ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncanplaythrough_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplaythrough ( & self , oncanplaythrough : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncanplaythrough_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncanplaythrough : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncanplaythrough = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncanplaythrough , & mut __stack ) ; __widl_f_set_oncanplaythrough_Window ( self_ , oncanplaythrough ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncanplaythrough` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncanplaythrough ( & self , oncanplaythrough : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onchange ( & self , onchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onchange , & mut __stack ) ; __widl_f_set_onchange_Window ( self_ , onchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onchange ( & self , onchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclick ( & self , onclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclick , & mut __stack ) ; __widl_f_set_onclick_Window ( self_ , onclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclick ( & self , onclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onclose_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclose ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onclose_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onclose_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclose` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onclose ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onclose_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclose ( & self , onclose : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onclose_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onclose : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onclose = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onclose , & mut __stack ) ; __widl_f_set_onclose_Window ( self_ , onclose ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onclose` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onclose ( & self , onclose : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oncontextmenu_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncontextmenu ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oncontextmenu_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oncontextmenu_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncontextmenu` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oncontextmenu ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oncontextmenu_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncontextmenu ( & self , oncontextmenu : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oncontextmenu_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oncontextmenu : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oncontextmenu = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oncontextmenu , & mut __stack ) ; __widl_f_set_oncontextmenu_Window ( self_ , oncontextmenu ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oncontextmenu` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oncontextmenu ( & self , oncontextmenu : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondblclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondblclick ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondblclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondblclick_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondblclick` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondblclick ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondblclick_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondblclick ( & self , ondblclick : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondblclick_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondblclick : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondblclick = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondblclick , & mut __stack ) ; __widl_f_set_ondblclick_Window ( self_ , ondblclick ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondblclick` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondblclick ( & self , ondblclick : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrag_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrag ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondrag_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrag_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrag` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrag ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrag_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrag ( & self , ondrag : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondrag_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrag : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrag = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrag , & mut __stack ) ; __widl_f_set_ondrag_Window ( self_ , ondrag ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrag` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrag ( & self , ondrag : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragend ( & self , ondragend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragend , & mut __stack ) ; __widl_f_set_ondragend_Window ( self_ , ondragend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragend ( & self , ondragend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragenter ( & self , ondragenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragenter , & mut __stack ) ; __widl_f_set_ondragenter_Window ( self_ , ondragenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragenter ( & self , ondragenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragexit_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragexit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragexit_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragexit_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragexit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragexit ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragexit_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragexit ( & self , ondragexit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragexit_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragexit : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragexit = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragexit , & mut __stack ) ; __widl_f_set_ondragexit_Window ( self_ , ondragexit ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragexit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragexit ( & self , ondragexit : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragleave ( & self , ondragleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragleave , & mut __stack ) ; __widl_f_set_ondragleave_Window ( self_ , ondragleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragleave ( & self , ondragleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragover ( & self , ondragover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragover , & mut __stack ) ; __widl_f_set_ondragover_Window ( self_ , ondragover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragover ( & self , ondragover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondragstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondragstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondragstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondragstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondragstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragstart ( & self , ondragstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondragstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondragstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondragstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondragstart , & mut __stack ) ; __widl_f_set_ondragstart_Window ( self_ , ondragstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondragstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondragstart ( & self , ondragstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondrop_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrop ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondrop_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondrop_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrop` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondrop ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondrop_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrop ( & self , ondrop : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondrop_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondrop : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondrop = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondrop , & mut __stack ) ; __widl_f_set_ondrop_Window ( self_ , ondrop ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondrop` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondrop ( & self , ondrop : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ondurationchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondurationchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ondurationchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ondurationchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondurationchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ondurationchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ondurationchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondurationchange ( & self , ondurationchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ondurationchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ondurationchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ondurationchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ondurationchange , & mut __stack ) ; __widl_f_set_ondurationchange_Window ( self_ , ondurationchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ondurationchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ondurationchange ( & self , ondurationchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onemptied_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onemptied ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onemptied_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onemptied_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onemptied` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onemptied ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onemptied_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onemptied ( & self , onemptied : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onemptied_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onemptied : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onemptied = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onemptied , & mut __stack ) ; __widl_f_set_onemptied_Window ( self_ , onemptied ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onemptied` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onemptied ( & self , onemptied : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onended_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onended ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onended_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onended_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onended` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onended ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onended_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onended ( & self , onended : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onended_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onended : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onended = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onended , & mut __stack ) ; __widl_f_set_onended_Window ( self_ , onended ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onended` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onended ( & self , onended : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninput_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninput ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oninput_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninput_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninput` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninput ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninput_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninput ( & self , oninput : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oninput_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninput : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninput = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninput , & mut __stack ) ; __widl_f_set_oninput_Window ( self_ , oninput ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninput` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninput ( & self , oninput : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_oninvalid_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninvalid ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_oninvalid_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_oninvalid_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninvalid` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn oninvalid ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_oninvalid_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninvalid ( & self , oninvalid : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_oninvalid_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , oninvalid : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let oninvalid = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( oninvalid , & mut __stack ) ; __widl_f_set_oninvalid_Window ( self_ , oninvalid ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `oninvalid` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_oninvalid ( & self , oninvalid : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeydown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeydown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeydown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeydown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeydown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeydown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeydown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeydown ( & self , onkeydown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeydown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeydown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeydown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeydown , & mut __stack ) ; __widl_f_set_onkeydown_Window ( self_ , onkeydown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeydown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeydown ( & self , onkeydown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeypress_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeypress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeypress_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeypress_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeypress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeypress ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeypress_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeypress ( & self , onkeypress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeypress_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeypress : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeypress = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeypress , & mut __stack ) ; __widl_f_set_onkeypress_Window ( self_ , onkeypress ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeypress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeypress ( & self , onkeypress : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onkeyup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeyup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onkeyup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onkeyup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeyup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onkeyup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onkeyup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeyup ( & self , onkeyup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onkeyup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onkeyup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onkeyup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onkeyup , & mut __stack ) ; __widl_f_set_onkeyup_Window ( self_ , onkeyup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onkeyup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onkeyup ( & self , onkeyup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onload ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onload ( & self , onload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onload : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onload = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onload , & mut __stack ) ; __widl_f_set_onload_Window ( self_ , onload ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onload ( & self , onload : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadeddata_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadeddata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadeddata_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadeddata_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadeddata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadeddata ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadeddata_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadeddata ( & self , onloadeddata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadeddata_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadeddata : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadeddata = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadeddata , & mut __stack ) ; __widl_f_set_onloadeddata_Window ( self_ , onloadeddata ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadeddata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadeddata ( & self , onloadeddata : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadedmetadata_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadedmetadata ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadedmetadata_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadedmetadata_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadedmetadata` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadedmetadata ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadedmetadata_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadedmetadata ( & self , onloadedmetadata : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadedmetadata_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadedmetadata : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadedmetadata = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadedmetadata , & mut __stack ) ; __widl_f_set_onloadedmetadata_Window ( self_ , onloadedmetadata ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadedmetadata` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadedmetadata ( & self , onloadedmetadata : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadend ( & self , onloadend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadend , & mut __stack ) ; __widl_f_set_onloadend_Window ( self_ , onloadend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadend ( & self , onloadend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onloadstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onloadstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onloadstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onloadstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onloadstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadstart ( & self , onloadstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onloadstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onloadstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onloadstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onloadstart , & mut __stack ) ; __widl_f_set_onloadstart_Window ( self_ , onloadstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onloadstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onloadstart ( & self , onloadstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousedown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousedown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmousedown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousedown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousedown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousedown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousedown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousedown ( & self , onmousedown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmousedown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousedown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousedown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousedown , & mut __stack ) ; __widl_f_set_onmousedown_Window ( self_ , onmousedown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousedown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousedown ( & self , onmousedown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseenter ( & self , onmouseenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseenter , & mut __stack ) ; __widl_f_set_onmouseenter_Window ( self_ , onmouseenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseenter ( & self , onmouseenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseleave ( & self , onmouseleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseleave , & mut __stack ) ; __widl_f_set_onmouseleave_Window ( self_ , onmouseleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseleave ( & self , onmouseleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmousemove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousemove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmousemove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmousemove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousemove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmousemove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmousemove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousemove ( & self , onmousemove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmousemove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmousemove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmousemove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmousemove , & mut __stack ) ; __widl_f_set_onmousemove_Window ( self_ , onmousemove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmousemove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmousemove ( & self , onmousemove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseout_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseout_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseout_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseout ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseout_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseout ( & self , onmouseout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseout_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseout : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseout = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseout , & mut __stack ) ; __widl_f_set_onmouseout_Window ( self_ , onmouseout ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseout ( & self , onmouseout : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseover ( & self , onmouseover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseover , & mut __stack ) ; __widl_f_set_onmouseover_Window ( self_ , onmouseover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseover ( & self , onmouseover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmouseup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmouseup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmouseup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmouseup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmouseup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseup ( & self , onmouseup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmouseup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmouseup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmouseup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmouseup , & mut __stack ) ; __widl_f_set_onmouseup_Window ( self_ , onmouseup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmouseup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmouseup ( & self , onmouseup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwheel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwheel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwheel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwheel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwheel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwheel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwheel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwheel ( & self , onwheel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwheel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwheel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwheel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwheel , & mut __stack ) ; __widl_f_set_onwheel_Window ( self_ , onwheel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwheel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwheel ( & self , onwheel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpause_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpause ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpause_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpause_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpause` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpause ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpause_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpause ( & self , onpause : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpause_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpause : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpause = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpause , & mut __stack ) ; __widl_f_set_onpause_Window ( self_ , onpause ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpause` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpause ( & self , onpause : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplay_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplay ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onplay_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplay_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplay` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplay ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplay_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplay ( & self , onplay : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onplay_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplay : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplay = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplay , & mut __stack ) ; __widl_f_set_onplay_Window ( self_ , onplay ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplay` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplay ( & self , onplay : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onplaying_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplaying ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onplaying_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onplaying_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplaying` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onplaying ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onplaying_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplaying ( & self , onplaying : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onplaying_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onplaying : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onplaying = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onplaying , & mut __stack ) ; __widl_f_set_onplaying_Window ( self_ , onplaying ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onplaying` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onplaying ( & self , onplaying : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onprogress_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onprogress ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onprogress_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onprogress_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onprogress` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onprogress ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onprogress_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onprogress ( & self , onprogress : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onprogress_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onprogress : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onprogress = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onprogress , & mut __stack ) ; __widl_f_set_onprogress_Window ( self_ , onprogress ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onprogress` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onprogress ( & self , onprogress : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onratechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onratechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onratechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onratechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onratechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onratechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onratechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onratechange ( & self , onratechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onratechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onratechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onratechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onratechange , & mut __stack ) ; __widl_f_set_onratechange_Window ( self_ , onratechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onratechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onratechange ( & self , onratechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onreset_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onreset ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onreset_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onreset_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreset` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onreset ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onreset_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreset ( & self , onreset : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onreset_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onreset : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onreset = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onreset , & mut __stack ) ; __widl_f_set_onreset_Window ( self_ , onreset ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onreset` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onreset ( & self , onreset : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onresize_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onresize ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onresize_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onresize_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresize` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onresize ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onresize_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresize ( & self , onresize : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onresize_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onresize : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onresize = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onresize , & mut __stack ) ; __widl_f_set_onresize_Window ( self_ , onresize ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onresize` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onresize ( & self , onresize : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onscroll_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onscroll ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onscroll_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onscroll_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onscroll` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onscroll ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onscroll_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onscroll ( & self , onscroll : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onscroll_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onscroll : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onscroll = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onscroll , & mut __stack ) ; __widl_f_set_onscroll_Window ( self_ , onscroll ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onscroll` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onscroll ( & self , onscroll : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeked_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeked ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onseeked_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeked_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeked` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeked ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeked_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeked ( & self , onseeked : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onseeked_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeked : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeked = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeked , & mut __stack ) ; __widl_f_set_onseeked_Window ( self_ , onseeked ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeked` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeked ( & self , onseeked : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onseeking_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeking ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onseeking_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onseeking_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeking` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onseeking ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onseeking_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeking ( & self , onseeking : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onseeking_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onseeking : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onseeking = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onseeking , & mut __stack ) ; __widl_f_set_onseeking_Window ( self_ , onseeking ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onseeking` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onseeking ( & self , onseeking : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselect ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onselect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselect_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselect` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselect ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselect_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselect ( & self , onselect : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onselect_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselect : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselect = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselect , & mut __stack ) ; __widl_f_set_onselect_Window ( self_ , onselect ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselect` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselect ( & self , onselect : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onshow_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onshow ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onshow_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onshow_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onshow ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onshow_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onshow ( & self , onshow : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onshow_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onshow : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onshow = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onshow , & mut __stack ) ; __widl_f_set_onshow_Window ( self_ , onshow ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onshow ( & self , onshow : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onstalled_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstalled ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onstalled_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onstalled_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstalled` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstalled ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onstalled_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstalled ( & self , onstalled : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onstalled_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstalled : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onstalled = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onstalled , & mut __stack ) ; __widl_f_set_onstalled_Window ( self_ , onstalled ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstalled` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstalled ( & self , onstalled : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsubmit_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsubmit ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onsubmit_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsubmit_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsubmit` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsubmit ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsubmit_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsubmit ( & self , onsubmit : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onsubmit_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsubmit : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsubmit = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsubmit , & mut __stack ) ; __widl_f_set_onsubmit_Window ( self_ , onsubmit ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsubmit` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsubmit ( & self , onsubmit : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onsuspend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsuspend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onsuspend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onsuspend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsuspend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onsuspend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onsuspend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsuspend ( & self , onsuspend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onsuspend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onsuspend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onsuspend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onsuspend , & mut __stack ) ; __widl_f_set_onsuspend_Window ( self_ , onsuspend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onsuspend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onsuspend ( & self , onsuspend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontimeupdate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontimeupdate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontimeupdate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontimeupdate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontimeupdate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontimeupdate ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontimeupdate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontimeupdate ( & self , ontimeupdate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontimeupdate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontimeupdate : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontimeupdate = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontimeupdate , & mut __stack ) ; __widl_f_set_ontimeupdate_Window ( self_ , ontimeupdate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontimeupdate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontimeupdate ( & self , ontimeupdate : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onvolumechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvolumechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onvolumechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onvolumechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvolumechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onvolumechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onvolumechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvolumechange ( & self , onvolumechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onvolumechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onvolumechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onvolumechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onvolumechange , & mut __stack ) ; __widl_f_set_onvolumechange_Window ( self_ , onvolumechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onvolumechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onvolumechange ( & self , onvolumechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwaiting_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwaiting ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwaiting_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwaiting_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaiting` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwaiting ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwaiting_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaiting ( & self , onwaiting : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwaiting_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwaiting : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwaiting = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwaiting , & mut __stack ) ; __widl_f_set_onwaiting_Window ( self_ , onwaiting ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwaiting` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwaiting ( & self , onwaiting : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onselectstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselectstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onselectstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onselectstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onselectstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onselectstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectstart ( & self , onselectstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onselectstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onselectstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onselectstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onselectstart , & mut __stack ) ; __widl_f_set_onselectstart_Window ( self_ , onselectstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onselectstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onselectstart ( & self , onselectstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontoggle_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontoggle ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontoggle_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontoggle_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontoggle` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontoggle ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontoggle_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontoggle ( & self , ontoggle : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontoggle_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontoggle : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontoggle = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontoggle , & mut __stack ) ; __widl_f_set_ontoggle_Window ( self_ , ontoggle ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontoggle` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontoggle ( & self , ontoggle : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointercancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointercancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointercancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointercancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointercancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointercancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointercancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointercancel ( & self , onpointercancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointercancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointercancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointercancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointercancel , & mut __stack ) ; __widl_f_set_onpointercancel_Window ( self_ , onpointercancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointercancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointercancel ( & self , onpointercancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerdown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerdown ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerdown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerdown_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerdown` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerdown ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerdown_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerdown ( & self , onpointerdown : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerdown_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerdown : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerdown = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerdown , & mut __stack ) ; __widl_f_set_onpointerdown_Window ( self_ , onpointerdown ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerdown` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerdown ( & self , onpointerdown : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerup ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerup_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerup` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerup ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerup_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerup ( & self , onpointerup : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerup_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerup : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerup = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerup , & mut __stack ) ; __widl_f_set_onpointerup_Window ( self_ , onpointerup ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerup` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerup ( & self , onpointerup : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointermove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointermove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointermove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointermove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointermove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointermove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointermove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointermove ( & self , onpointermove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointermove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointermove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointermove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointermove , & mut __stack ) ; __widl_f_set_onpointermove_Window ( self_ , onpointermove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointermove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointermove ( & self , onpointermove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerout_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerout ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerout_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerout_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerout` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerout ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerout_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerout ( & self , onpointerout : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerout_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerout : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerout = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerout , & mut __stack ) ; __widl_f_set_onpointerout_Window ( self_ , onpointerout ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerout` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerout ( & self , onpointerout : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerover ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerover_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerover` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerover ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerover_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerover ( & self , onpointerover : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerover_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerover : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerover = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerover , & mut __stack ) ; __widl_f_set_onpointerover_Window ( self_ , onpointerover ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerover` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerover ( & self , onpointerover : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerenter ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerenter_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerenter` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerenter ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerenter_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerenter ( & self , onpointerenter : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerenter_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerenter : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerenter = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerenter , & mut __stack ) ; __widl_f_set_onpointerenter_Window ( self_ , onpointerenter ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerenter` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerenter ( & self , onpointerenter : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpointerleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerleave ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpointerleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpointerleave_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerleave` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpointerleave ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpointerleave_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerleave ( & self , onpointerleave : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpointerleave_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpointerleave : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpointerleave = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpointerleave , & mut __stack ) ; __widl_f_set_onpointerleave_Window ( self_ , onpointerleave ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpointerleave` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpointerleave ( & self , onpointerleave : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ongotpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ongotpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ongotpointercapture_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ongotpointercapture_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ongotpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ongotpointercapture ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ongotpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ongotpointercapture ( & self , ongotpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ongotpointercapture_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ongotpointercapture : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ongotpointercapture = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ongotpointercapture , & mut __stack ) ; __widl_f_set_ongotpointercapture_Window ( self_ , ongotpointercapture ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ongotpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ongotpointercapture ( & self , ongotpointercapture : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onlostpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlostpointercapture ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onlostpointercapture_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onlostpointercapture_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlostpointercapture` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlostpointercapture ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onlostpointercapture_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlostpointercapture ( & self , onlostpointercapture : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onlostpointercapture_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlostpointercapture : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onlostpointercapture = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onlostpointercapture , & mut __stack ) ; __widl_f_set_onlostpointercapture_Window ( self_ , onlostpointercapture ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlostpointercapture` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlostpointercapture ( & self , onlostpointercapture : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationcancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationcancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationcancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationcancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationcancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationcancel ( & self , onanimationcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationcancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationcancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationcancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationcancel , & mut __stack ) ; __widl_f_set_onanimationcancel_Window ( self_ , onanimationcancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationcancel ( & self , onanimationcancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationend ( & self , onanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationend , & mut __stack ) ; __widl_f_set_onanimationend_Window ( self_ , onanimationend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationend ( & self , onanimationend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationiteration_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationiteration_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationiteration ( & self , onanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationiteration_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationiteration : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationiteration = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationiteration , & mut __stack ) ; __widl_f_set_onanimationiteration_Window ( self_ , onanimationiteration ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationiteration ( & self , onanimationiteration : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onanimationstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onanimationstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onanimationstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationstart ( & self , onanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onanimationstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onanimationstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onanimationstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onanimationstart , & mut __stack ) ; __widl_f_set_onanimationstart_Window ( self_ , onanimationstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onanimationstart ( & self , onanimationstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitioncancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitioncancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitioncancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitioncancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitioncancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitioncancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitioncancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitioncancel ( & self , ontransitioncancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitioncancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitioncancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitioncancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitioncancel , & mut __stack ) ; __widl_f_set_ontransitioncancel_Window ( self_ , ontransitioncancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitioncancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitioncancel ( & self , ontransitioncancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionend ( & self , ontransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionend , & mut __stack ) ; __widl_f_set_ontransitionend_Window ( self_ , ontransitionend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionend ( & self , ontransitionend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionrun_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionrun ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionrun_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionrun_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionrun` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionrun ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionrun_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionrun ( & self , ontransitionrun : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionrun_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionrun : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionrun = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionrun , & mut __stack ) ; __widl_f_set_ontransitionrun_Window ( self_ , ontransitionrun ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionrun` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionrun ( & self , ontransitionrun : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontransitionstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontransitionstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontransitionstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontransitionstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontransitionstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionstart ( & self , ontransitionstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontransitionstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontransitionstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontransitionstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontransitionstart , & mut __stack ) ; __widl_f_set_ontransitionstart_Window ( self_ , ontransitionstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontransitionstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontransitionstart ( & self , ontransitionstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationend ( & self , onwebkitanimationend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationend , & mut __stack ) ; __widl_f_set_onwebkitanimationend_Window ( self_ , onwebkitanimationend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationend ( & self , onwebkitanimationend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationiteration_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationiteration_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationiteration` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationiteration ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationiteration_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationiteration ( & self , onwebkitanimationiteration : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationiteration_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationiteration : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationiteration = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationiteration , & mut __stack ) ; __widl_f_set_onwebkitanimationiteration_Window ( self_ , onwebkitanimationiteration ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationiteration` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationiteration ( & self , onwebkitanimationiteration : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkitanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkitanimationstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkitanimationstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkitanimationstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkitanimationstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationstart ( & self , onwebkitanimationstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkitanimationstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkitanimationstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkitanimationstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkitanimationstart , & mut __stack ) ; __widl_f_set_onwebkitanimationstart_Window ( self_ , onwebkitanimationstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkitanimationstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkitanimationstart ( & self , onwebkitanimationstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onwebkittransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkittransitionend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onwebkittransitionend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onwebkittransitionend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkittransitionend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onwebkittransitionend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onwebkittransitionend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkittransitionend ( & self , onwebkittransitionend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onwebkittransitionend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onwebkittransitionend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onwebkittransitionend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onwebkittransitionend , & mut __stack ) ; __widl_f_set_onwebkittransitionend_Window ( self_ , onwebkittransitionend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onwebkittransitionend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onwebkittransitionend ( & self , onwebkittransitionend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onerror_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onerror_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onerror_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onerror ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onerror_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onerror_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onerror : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onerror = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onerror , & mut __stack ) ; __widl_f_set_onerror_Window ( self_ , onerror ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onerror ( & self , onerror : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchstart ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchstart_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchstart` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchstart ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchstart_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchstart ( & self , ontouchstart : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchstart_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchstart : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchstart = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchstart , & mut __stack ) ; __widl_f_set_ontouchstart_Window ( self_ , ontouchstart ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchstart` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchstart ( & self , ontouchstart : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchend ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchend_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchend` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchend ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchend_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchend ( & self , ontouchend : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchend_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchend : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchend = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchend , & mut __stack ) ; __widl_f_set_ontouchend_Window ( self_ , ontouchend ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchend` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchend ( & self , ontouchend : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchmove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchmove ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchmove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchmove_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchmove` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchmove ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchmove_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchmove ( & self , ontouchmove : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchmove_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchmove : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchmove = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchmove , & mut __stack ) ; __widl_f_set_ontouchmove_Window ( self_ , ontouchmove ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchmove` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchmove ( & self , ontouchmove : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ontouchcancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchcancel ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ontouchcancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ontouchcancel_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchcancel` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ontouchcancel ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ontouchcancel_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchcancel ( & self , ontouchcancel : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ontouchcancel_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ontouchcancel : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ontouchcancel = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ontouchcancel , & mut __stack ) ; __widl_f_set_ontouchcancel_Window ( self_ , ontouchcancel ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ontouchcancel` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ontouchcancel ( & self , ontouchcancel : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onafterprint_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onafterprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onafterprint ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onafterprint_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onafterprint_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onafterprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onafterprint ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onafterprint_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onafterprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onafterprint ( & self , onafterprint : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onafterprint_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onafterprint : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onafterprint = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onafterprint , & mut __stack ) ; __widl_f_set_onafterprint_Window ( self_ , onafterprint ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onafterprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onafterprint ( & self , onafterprint : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onbeforeprint_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforeprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeprint ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onbeforeprint_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onbeforeprint_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforeprint` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeprint ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeprint_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforeprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeprint ( & self , onbeforeprint : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onbeforeprint_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeprint : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onbeforeprint = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onbeforeprint , & mut __stack ) ; __widl_f_set_onbeforeprint_Window ( self_ , onbeforeprint ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforeprint` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeprint ( & self , onbeforeprint : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onbeforeunload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforeunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeunload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onbeforeunload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onbeforeunload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforeunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onbeforeunload ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onbeforeunload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onbeforeunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeunload ( & self , onbeforeunload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onbeforeunload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onbeforeunload : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onbeforeunload = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onbeforeunload , & mut __stack ) ; __widl_f_set_onbeforeunload_Window ( self_ , onbeforeunload ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onbeforeunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onbeforeunload ( & self , onbeforeunload : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onhashchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onhashchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onhashchange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onhashchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onhashchange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onhashchange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onhashchange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onhashchange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onhashchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onhashchange ( & self , onhashchange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onhashchange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onhashchange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onhashchange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onhashchange , & mut __stack ) ; __widl_f_set_onhashchange_Window ( self_ , onhashchange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onhashchange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onhashchange ( & self , onhashchange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onlanguagechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlanguagechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlanguagechange ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onlanguagechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onlanguagechange_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlanguagechange` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onlanguagechange ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onlanguagechange_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onlanguagechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlanguagechange ( & self , onlanguagechange : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onlanguagechange_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onlanguagechange : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onlanguagechange = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onlanguagechange , & mut __stack ) ; __widl_f_set_onlanguagechange_Window ( self_ , onlanguagechange ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onlanguagechange` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onlanguagechange ( & self , onlanguagechange : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessage_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmessage_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessage_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmessage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessage ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessage_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmessage_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessage : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessage = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessage , & mut __stack ) ; __widl_f_set_onmessage_Window ( self_ , onmessage ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmessage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessage ( & self , onmessage : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onmessageerror_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onmessageerror_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onmessageerror_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmessageerror` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onmessageerror ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onmessageerror_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onmessageerror_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onmessageerror : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onmessageerror = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onmessageerror , & mut __stack ) ; __widl_f_set_onmessageerror_Window ( self_ , onmessageerror ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onmessageerror` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onmessageerror ( & self , onmessageerror : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onoffline_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onoffline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onoffline ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onoffline_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onoffline_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onoffline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onoffline ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onoffline_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onoffline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onoffline ( & self , onoffline : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onoffline_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onoffline : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onoffline = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onoffline , & mut __stack ) ; __widl_f_set_onoffline_Window ( self_ , onoffline ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onoffline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onoffline ( & self , onoffline : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_ononline_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ononline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ononline ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_ononline_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_ononline_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ononline` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn ononline ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_ononline_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `ononline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ononline ( & self , ononline : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_ononline_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , ononline : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let ononline = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( ononline , & mut __stack ) ; __widl_f_set_ononline_Window ( self_ , ononline ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `ononline` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_ononline ( & self , ononline : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpagehide_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpagehide` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpagehide ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpagehide_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpagehide_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpagehide` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpagehide ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpagehide_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpagehide` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpagehide ( & self , onpagehide : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpagehide_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpagehide : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpagehide = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpagehide , & mut __stack ) ; __widl_f_set_onpagehide_Window ( self_ , onpagehide ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpagehide` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpagehide ( & self , onpagehide : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpageshow_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpageshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpageshow ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpageshow_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpageshow_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpageshow` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpageshow ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpageshow_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpageshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpageshow ( & self , onpageshow : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpageshow_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpageshow : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpageshow = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpageshow , & mut __stack ) ; __widl_f_set_onpageshow_Window ( self_ , onpageshow ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpageshow` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpageshow ( & self , onpageshow : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onpopstate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpopstate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpopstate ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onpopstate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onpopstate_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpopstate` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onpopstate ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onpopstate_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onpopstate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpopstate ( & self , onpopstate : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onpopstate_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onpopstate : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onpopstate = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onpopstate , & mut __stack ) ; __widl_f_set_onpopstate_Window ( self_ , onpopstate ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onpopstate` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onpopstate ( & self , onpopstate : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onstorage_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstorage ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onstorage_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onstorage_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstorage` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onstorage ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onstorage_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onstorage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstorage ( & self , onstorage : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onstorage_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onstorage : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onstorage = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onstorage , & mut __stack ) ; __widl_f_set_onstorage_Window ( self_ , onstorage ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onstorage` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onstorage ( & self , onstorage : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_onunload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onunload ( & self , ) -> Option < :: js_sys :: Function > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_onunload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_onunload_Window ( self_ ) } ; < Option < :: js_sys :: Function > as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onunload` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn onunload ( & self , ) -> Option < :: js_sys :: Function > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_onunload_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < Option < & :: js_sys :: Function > as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `onunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onunload ( & self , onunload : Option < & :: js_sys :: Function > ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_onunload_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , onunload : < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let onunload = < Option < & :: js_sys :: Function > as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( onunload , & mut __stack ) ; __widl_f_set_onunload_Window ( self_ , onunload ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `onunload` setter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_onunload ( & self , onunload : Option < & :: js_sys :: Function > ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_atob_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `atob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn atob ( & self , atob : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_atob_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , atob : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let atob = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( atob , & mut __stack ) ; __widl_f_atob_Window ( self_ , atob , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `atob()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn atob ( & self , atob : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_btoa_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `btoa()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn btoa ( & self , btoa : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_btoa_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , btoa : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let btoa = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( btoa , & mut __stack ) ; __widl_f_btoa_Window ( self_ , btoa , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `btoa()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn btoa ( & self , btoa : & str ) -> Result < String , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_interval_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_interval_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_interval_with_handle_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval_with_handle ( & self , handle : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_interval_with_handle_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_clear_interval_with_handle_Window ( self_ , handle ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_interval_with_handle ( & self , handle : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout ( & self , ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_timeout_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_clear_timeout_Window ( self_ ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout ( & self , ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_timeout_with_handle_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout_with_handle ( & self , handle : i32 ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_timeout_with_handle_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handle : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handle = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handle , & mut __stack ) ; __widl_f_clear_timeout_with_handle_Window ( self_ , handle ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `clearTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn clear_timeout_with_handle ( & self , handle : i32 ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_image_element_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_image_element ( & self , a_image : & HtmlImageElement ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_html_image_element_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_html_image_element_Window ( self_ , a_image , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_image_element ( & self , a_image : & HtmlImageElement ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_canvas_element ( & self , a_image : & HtmlCanvasElement ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_html_canvas_element_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_html_canvas_element_Window ( self_ , a_image , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_canvas_element ( & self , a_image : & HtmlCanvasElement ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d ( & self , a_image : & CanvasRenderingContext2d ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window ( self_ , a_image , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d ( & self , a_image : & CanvasRenderingContext2d ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Object as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source ( & self , a_image : & :: js_sys :: Object ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_buffer_source_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & :: js_sys :: Object as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_buffer_source_Window ( self_ , a_image , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source ( & self , a_image : & :: js_sys :: Object ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & mut [ u8 ] as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array ( & self , a_image : & mut [ u8 ] ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_u8_array_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & mut [ u8 ] as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; __widl_f_create_image_bitmap_with_u8_array_Window ( self_ , a_image , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array ( & self , a_image : & mut [ u8 ] ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & HtmlImageElement as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & HtmlImageElement , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & HtmlImageElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlImageElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & HtmlImageElement , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & HtmlCanvasElement as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & HtmlCanvasElement , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & HtmlCanvasElement as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & HtmlCanvasElement , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & CanvasRenderingContext2d as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & CanvasRenderingContext2d , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & CanvasRenderingContext2d as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & CanvasRenderingContext2d , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Object as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & :: js_sys :: Object , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & :: js_sys :: Object as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & :: js_sys :: Object as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & :: js_sys :: Object , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & mut [ u8 ] as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & mut [ u8 ] , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_image : < & mut [ u8 ] as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sx : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sy : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sw : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , a_sh : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let a_image = < & mut [ u8 ] as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_image , & mut __stack ) ; let a_sx = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sx , & mut __stack ) ; let a_sy = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sy , & mut __stack ) ; let a_sw = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sw , & mut __stack ) ; let a_sh = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( a_sh , & mut __stack ) ; __widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window ( self_ , a_image , a_sx , a_sy , a_sw , a_sh , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `createImageBitmap()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh ( & self , a_image : & mut [ u8 ] , a_sx : i32 , a_sy : i32 , a_sw : i32 , a_sh : i32 ) -> Result < :: js_sys :: Promise , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_fetch_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < :: js_sys :: Promise as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn fetch_with_str ( & self , input : & str ) -> :: js_sys :: Promise { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_fetch_with_str_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , input : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let input = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( input , & mut __stack ) ; __widl_f_fetch_with_str_Window ( self_ , input ) } ; < :: js_sys :: Promise as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `fetch()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn fetch_with_str ( & self , input : & str ) -> :: js_sys :: Promise { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_interval_with_callback_Window ( self_ , handler , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_Window ( self_ , handler , timeout , arguments , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window ( self_ , handler , timeout , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window ( self_ , handler , timeout , arguments_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; let arguments_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_7 , & mut __stack ) ; __widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_interval_with_str_Window ( self_ , handler , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_Window ( self_ , handler , timeout , unused , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_0_Window ( self_ , handler , timeout , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_1_Window ( self_ , handler , timeout , unused_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_2_Window ( self_ , handler , timeout , unused_1 , unused_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_3_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_4_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_5_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_6_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; let unused_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_7 , & mut __stack ) ; __widl_f_set_interval_with_str_and_timeout_and_unused_7_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setInterval()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_interval_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_timeout_with_callback_Window ( self_ , handler , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback ( & self , handler : & :: js_sys :: Function ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window ( self_ , handler , timeout , arguments , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window ( self_ , handler , timeout , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_0 ( & self , handler : & :: js_sys :: Function , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window ( self_ , handler , timeout , arguments_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_1 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_2 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_3 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_4 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_5 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_6 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Function as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , arguments_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & :: js_sys :: Function as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let arguments_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_1 , & mut __stack ) ; let arguments_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_2 , & mut __stack ) ; let arguments_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_3 , & mut __stack ) ; let arguments_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_4 , & mut __stack ) ; let arguments_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_5 , & mut __stack ) ; let arguments_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_6 , & mut __stack ) ; let arguments_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( arguments_7 , & mut __stack ) ; __widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window ( self_ , handler , timeout , arguments_1 , arguments_2 , arguments_3 , arguments_4 , arguments_5 , arguments_6 , arguments_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_callback_and_timeout_and_arguments_7 ( & self , handler : & :: js_sys :: Function , timeout : i32 , arguments_1 : & :: wasm_bindgen :: JsValue , arguments_2 : & :: wasm_bindgen :: JsValue , arguments_3 : & :: wasm_bindgen :: JsValue , arguments_4 : & :: wasm_bindgen :: JsValue , arguments_5 : & :: wasm_bindgen :: JsValue , arguments_6 : & :: wasm_bindgen :: JsValue , arguments_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; __widl_f_set_timeout_with_str_Window ( self_ , handler , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str ( & self , handler : & str ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_Window ( self_ , handler , timeout , unused , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused ( & self , handler : & str , timeout : i32 , unused : & :: js_sys :: Array ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window ( self_ , handler , timeout , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_0 ( & self , handler : & str , timeout : i32 ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window ( self_ , handler , timeout , unused_1 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_1 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window ( self_ , handler , timeout , unused_1 , unused_2 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_2 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_3 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_4 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_5 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 9u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_6 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 10u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < & str as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < i32 as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , handler : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , timeout : < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , unused_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , exn_data_ptr : * mut u32 ) -> < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let mut exn_data = [ 0 ; 2 ] ; let exn_data_ptr = exn_data . as_mut_ptr ( ) ; let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; let handler = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( handler , & mut __stack ) ; let timeout = < i32 as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( timeout , & mut __stack ) ; let unused_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_1 , & mut __stack ) ; let unused_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_2 , & mut __stack ) ; let unused_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_3 , & mut __stack ) ; let unused_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_4 , & mut __stack ) ; let unused_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_5 , & mut __stack ) ; let unused_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_6 , & mut __stack ) ; let unused_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( unused_7 , & mut __stack ) ; __widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window ( self_ , handler , timeout , unused_1 , unused_2 , unused_3 , unused_4 , unused_5 , unused_6 , unused_7 , exn_data_ptr ) } ; if exn_data [ 0 ] == 1 { return Err ( < :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( exn_data [ 1 ] , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ) ) } Ok ( < i32 as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `setTimeout()` method\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn set_timeout_with_str_and_timeout_and_unused_7 ( & self , handler : & str , timeout : i32 , unused_1 : & :: wasm_bindgen :: JsValue , unused_2 : & :: wasm_bindgen :: JsValue , unused_3 : & :: wasm_bindgen :: JsValue , unused_4 : & :: wasm_bindgen :: JsValue , unused_5 : & :: wasm_bindgen :: JsValue , unused_6 : & :: wasm_bindgen :: JsValue , unused_7 : & :: wasm_bindgen :: JsValue ) -> Result < i32 , :: wasm_bindgen :: JsValue > { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_origin_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < String as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn origin ( & self , ) -> String { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_origin_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_origin_Window ( self_ ) } ; < String as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `origin` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn origin ( & self , ) -> String { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_is_secure_context_Window ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & Window as WasmDescribe > :: describe ( ) ; < bool as WasmDescribe > :: describe ( ) ; } impl Window { # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `isSecureContext` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn is_secure_context ( & self , ) -> bool { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_is_secure_context_Window ( self_ : < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: Abi ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let self_ = < & Window as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( self , & mut __stack ) ; __widl_f_is_secure_context_Window ( self_ ) } ; < bool as :: wasm_bindgen :: convert :: FromWasmAbi > :: from_abi ( _ret , & mut :: wasm_bindgen :: convert :: GlobalStack :: new ( ) , ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `isSecureContext` getter\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)\n\n*This API requires the following crate features to be activated: `Window`*" ] # [ allow ( clippy :: all ) ] pub fn is_secure_context ( & self , ) -> bool { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DRAW_CARET : u32 = 1u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DO_NOT_FLUSH : u32 = 2u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_DRAW_VIEW : u32 = 4u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_USE_WIDGET_LAYERS : u32 = 8u64 as u32 ; } impl CanvasRenderingContext2d { pub const DRAWWINDOW_ASYNC_DECODE_IMAGES : u32 = 16u64 as u32 ; } impl HtmlMediaElement { pub const NETWORK_EMPTY : u16 = 0i64 as u16 ; } impl HtmlMediaElement { pub const NETWORK_IDLE : u16 = 1u64 as u16 ; } impl HtmlMediaElement { pub const NETWORK_LOADING : u16 = 2u64 as u16 ; } impl HtmlMediaElement { pub const NETWORK_NO_SOURCE : u16 = 3u64 as u16 ; } impl HtmlMediaElement { pub const HAVE_NOTHING : u16 = 0i64 as u16 ; } impl HtmlMediaElement { pub const HAVE_METADATA : u16 = 1u64 as u16 ; } impl HtmlMediaElement { pub const HAVE_CURRENT_DATA : u16 = 2u64 as u16 ; } impl HtmlMediaElement { pub const HAVE_FUTURE_DATA : u16 = 3u64 as u16 ; } impl HtmlMediaElement { pub const HAVE_ENOUGH_DATA : u16 = 4u64 as u16 ; } impl KeyboardEvent { pub const DOM_KEY_LOCATION_STANDARD : u32 = 0u64 as u32 ; } impl KeyboardEvent { pub const DOM_KEY_LOCATION_LEFT : u32 = 1u64 as u32 ; } impl KeyboardEvent { pub const DOM_KEY_LOCATION_RIGHT : u32 = 2u64 as u32 ; } impl KeyboardEvent { pub const DOM_KEY_LOCATION_NUMPAD : u32 = 3u64 as u32 ; } # [ allow ( non_upper_case_globals ) ] # [ cfg ( target_arch = "wasm32" ) ] # [ link_section = "__wasm_bindgen_unstable" ] # [ doc ( hidden ) ] # [ allow ( clippy :: all ) ] pub static __WASM_BINDGEN_GENERATED_ac758165b6c361b7 : [ u8 ; 81750usize ] = * b".\0\0\0{\"schema_version\":\"0.2.37\",\"version\":\"0.2.37\"} ?\x01\0\0\0\x8A\x08\0\0\x02\x18CanvasRenderingContext2D*__widl_instanceof_CanvasRenderingContext2D\0\0\0\0-__widl_f_draw_window_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\ndrawWindow\0\0\08__widl_f_draw_window_with_flags_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\ndrawWindow\0\0\0(__widl_f_canvas_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x06canvas\x01\x06canvas\0\0\0.__widl_f_global_alpha_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BglobalAlpha\x01\x0BglobalAlpha\0\0\02__widl_f_set_global_alpha_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BglobalAlpha\x01\x0BglobalAlpha\0\0\0<__widl_f_global_composite_operation_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x18globalCompositeOperation\x01\x18globalCompositeOperation\0\0\0@__widl_f_set_global_composite_operation_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x18globalCompositeOperation\x01\x18globalCompositeOperation\0\0\0D__widl_f_draw_image_with_html_image_element_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0E__widl_f_draw_image_with_html_canvas_element_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0R__widl_f_draw_image_with_html_image_element_and_dw_and_dh_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0S__widl_f_draw_image_with_html_canvas_element_and_dw_and_dh_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0n__widl_f_draw_image_with_html_image_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0o__widl_f_draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tdrawImage\0\0\0,__widl_f_begin_path_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tbeginPath\0\0\0&__widl_f_clip_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04clip\0\0\0&__widl_f_fill_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04fill\0\0\0;__widl_f_is_point_in_path_with_f64_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\risPointInPath\0\0\0A__widl_f_is_point_in_stroke_with_x_and_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0FisPointInStroke\0\0\0(__widl_f_stroke_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06stroke\0\0\0.__widl_f_stroke_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BstrokeStyle\x01\x0BstrokeStyle\0\0\02__widl_f_set_stroke_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BstrokeStyle\x01\x0BstrokeStyle\0\0\0,__widl_f_fill_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\tfillStyle\x01\tfillStyle\0\0\00__widl_f_set_fill_style_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\tfillStyle\x01\tfillStyle\0\0\0(__widl_f_filter_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x06filter\x01\x06filter\0\0\0,__widl_f_set_filter_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x06filter\x01\x06filter\0\0\00__widl_f_add_hit_region_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0CaddHitRegion\0\0\03__widl_f_clear_hit_regions_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0FclearHitRegions\0\0\03__widl_f_remove_hit_region_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0FremoveHitRegion\0\0\09__widl_f_image_smoothing_enabled_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x15imageSmoothingEnabled\x01\x15imageSmoothingEnabled\0\0\0=__widl_f_set_image_smoothing_enabled_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x15imageSmoothingEnabled\x01\x15imageSmoothingEnabled\0\0\0/__widl_f_get_line_dash_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0BgetLineDash\0\0\0/__widl_f_set_line_dash_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0BsetLineDash\0\0\0,__widl_f_line_width_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\tlineWidth\x01\tlineWidth\0\0\00__widl_f_set_line_width_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\tlineWidth\x01\tlineWidth\0\0\0*__widl_f_line_cap_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x07lineCap\x01\x07lineCap\0\0\0.__widl_f_set_line_cap_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x07lineCap\x01\x07lineCap\0\0\0+__widl_f_line_join_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x08lineJoin\x01\x08lineJoin\0\0\0/__widl_f_set_line_join_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x08lineJoin\x01\x08lineJoin\0\0\0-__widl_f_miter_limit_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\nmiterLimit\x01\nmiterLimit\0\0\01__widl_f_set_miter_limit_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\nmiterLimit\x01\nmiterLimit\0\0\02__widl_f_line_dash_offset_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0ElineDashOffset\x01\x0ElineDashOffset\0\0\06__widl_f_set_line_dash_offset_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0ElineDashOffset\x01\x0ElineDashOffset\0\0\0%__widl_f_arc_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03arc\0\0\08__widl_f_arc_with_anticlockwise_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x03arc\0\0\0(__widl_f_arc_to_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05arcTo\0\0\01__widl_f_bezier_curve_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\rbezierCurveTo\0\0\0,__widl_f_close_path_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tclosePath\0\0\0)__widl_f_ellipse_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07ellipse\0\0\0<__widl_f_ellipse_with_anticlockwise_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07ellipse\0\0\0)__widl_f_line_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06lineTo\0\0\0)__widl_f_move_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06moveTo\0\0\04__widl_f_quadratic_curve_to_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x10quadraticCurveTo\0\0\0&__widl_f_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04rect\0\0\0,__widl_f_clear_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\tclearRect\0\0\0+__widl_f_fill_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08fillRect\0\0\0-__widl_f_stroke_rect_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\nstrokeRect\0\0\01__widl_f_shadow_offset_x_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\rshadowOffsetX\x01\rshadowOffsetX\0\0\05__widl_f_set_shadow_offset_x_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\rshadowOffsetX\x01\rshadowOffsetX\0\0\01__widl_f_shadow_offset_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\rshadowOffsetY\x01\rshadowOffsetY\0\0\05__widl_f_set_shadow_offset_y_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\rshadowOffsetY\x01\rshadowOffsetY\0\0\0-__widl_f_shadow_blur_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\nshadowBlur\x01\nshadowBlur\0\0\01__widl_f_set_shadow_blur_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\nshadowBlur\x01\nshadowBlur\0\0\0.__widl_f_shadow_color_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0BshadowColor\x01\x0BshadowColor\0\0\02__widl_f_set_shadow_color_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0BshadowColor\x01\x0BshadowColor\0\0\0)__widl_f_restore_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x07restore\0\0\0&__widl_f_save_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x04save\0\0\0+__widl_f_fill_text_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08fillText\0\0\0:__widl_f_fill_text_with_max_width_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x08fillText\0\0\0-__widl_f_stroke_text_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\nstrokeText\0\0\0<__widl_f_stroke_text_with_max_width_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\nstrokeText\0\0\0&__widl_f_font_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x04font\x01\x04font\0\0\0*__widl_f_set_font_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x04font\x01\x04font\0\0\0,__widl_f_text_align_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\ttextAlign\x01\ttextAlign\0\0\00__widl_f_set_text_align_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\ttextAlign\x01\ttextAlign\0\0\0/__widl_f_text_baseline_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x01\x0CtextBaseline\x01\x0CtextBaseline\0\0\03__widl_f_set_text_baseline_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\x02\x0CtextBaseline\x01\x0CtextBaseline\0\0\01__widl_f_reset_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0EresetTransform\0\0\0(__widl_f_rotate_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x06rotate\0\0\0'__widl_f_scale_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x05scale\0\0\0/__widl_f_set_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x0CsetTransform\0\0\0+__widl_f_transform_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\ttransform\0\0\0+__widl_f_translate_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\ttranslate\0\0\08__widl_f_draw_custom_focus_ring_CanvasRenderingContext2D\0\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x13drawCustomFocusRing\0\0\06__widl_f_draw_focus_if_needed_CanvasRenderingContext2D\x01\0\x01\x18CanvasRenderingContext2D\x01\0\0\x01\x11drawFocusIfNeeded\0\0\x02\x08Document\x1A__widl_instanceof_Document\0\0\0\0\x15__widl_f_new_Document\x01\0\x01\x08Document\0\x01\x03new\0\0\0 __widl_f_create_element_Document\x01\0\x01\x08Document\x01\0\0\x01\rcreateElement\0\0\0)__widl_f_create_element_with_str_Document\x01\0\x01\x08Document\x01\0\0\x01\rcreateElement\0\0\0#__widl_f_create_element_ns_Document\x01\0\x01\x08Document\x01\0\0\x01\x0FcreateElementNS\0\0\0,__widl_f_create_element_ns_with_str_Document\x01\0\x01\x08Document\x01\0\0\x01\x0FcreateElementNS\0\0\0-__widl_f_enable_style_sheets_for_set_Document\0\0\x01\x08Document\x01\0\0\x01\x17enableStyleSheetsForSet\0\0\0!__widl_f_exit_fullscreen_Document\0\0\x01\x08Document\x01\0\0\x01\x0EexitFullscreen\0\0\0#__widl_f_exit_pointer_lock_Document\0\0\x01\x08Document\x01\0\0\x01\x0FexitPointerLock\0\0\0 __widl_f_get_animations_Document\0\0\x01\x08Document\x01\0\0\x01\rgetAnimations\0\0\0#__widl_f_get_element_by_id_Document\0\0\x01\x08Document\x01\0\0\x01\x0EgetElementById\0\0\0\x1B__widl_f_has_focus_Document\x01\0\x01\x08Document\x01\0\0\x01\x08hasFocus\0\0\0 __widl_f_query_selector_Document\x01\0\x01\x08Document\x01\0\0\x01\rquerySelector\0\0\0!__widl_f_release_capture_Document\0\0\x01\x08Document\x01\0\0\x01\x0EreleaseCapture\0\0\0\x15__widl_f_url_Document\x01\0\x01\x08Document\x01\0\x01\x03URL\x01\x03URL\0\0\0\x1E__widl_f_document_uri_Document\x01\0\x01\x08Document\x01\0\x01\x0BdocumentURI\x01\x0BdocumentURI\0\0\0\x1D__widl_f_compat_mode_Document\0\0\x01\x08Document\x01\0\x01\ncompatMode\x01\ncompatMode\0\0\0\x1F__widl_f_character_set_Document\0\0\x01\x08Document\x01\0\x01\x0CcharacterSet\x01\x0CcharacterSet\0\0\0\x19__widl_f_charset_Document\0\0\x01\x08Document\x01\0\x01\x07charset\x01\x07charset\0\0\0 __widl_f_input_encoding_Document\0\0\x01\x08Document\x01\0\x01\rinputEncoding\x01\rinputEncoding\0\0\0\x1E__widl_f_content_type_Document\0\0\x01\x08Document\x01\0\x01\x0BcontentType\x01\x0BcontentType\0\0\0\"__widl_f_document_element_Document\0\0\x01\x08Document\x01\0\x01\x0FdocumentElement\x01\x0FdocumentElement\0\0\0\x1A__widl_f_referrer_Document\0\0\x01\x08Document\x01\0\x01\x08referrer\x01\x08referrer\0\0\0\x1F__widl_f_last_modified_Document\0\0\x01\x08Document\x01\0\x01\x0ClastModified\x01\x0ClastModified\0\0\0\x1D__widl_f_ready_state_Document\0\0\x01\x08Document\x01\0\x01\nreadyState\x01\nreadyState\0\0\0\x17__widl_f_title_Document\0\0\x01\x08Document\x01\0\x01\x05title\x01\x05title\0\0\0\x1B__widl_f_set_title_Document\0\0\x01\x08Document\x01\0\x02\x05title\x01\x05title\0\0\0\x15__widl_f_dir_Document\0\0\x01\x08Document\x01\0\x01\x03dir\x01\x03dir\0\0\0\x19__widl_f_set_dir_Document\0\0\x01\x08Document\x01\0\x02\x03dir\x01\x03dir\0\0\0\x1E__widl_f_default_view_Document\0\0\x01\x08Document\x01\0\x01\x0BdefaultView\x01\x0BdefaultView\0\0\0$__widl_f_onreadystatechange_Document\0\0\x01\x08Document\x01\0\x01\x12onreadystatechange\x01\x12onreadystatechange\0\0\0(__widl_f_set_onreadystatechange_Document\0\0\x01\x08Document\x01\0\x02\x12onreadystatechange\x01\x12onreadystatechange\0\0\0'__widl_f_onbeforescriptexecute_Document\0\0\x01\x08Document\x01\0\x01\x15onbeforescriptexecute\x01\x15onbeforescriptexecute\0\0\0+__widl_f_set_onbeforescriptexecute_Document\0\0\x01\x08Document\x01\0\x02\x15onbeforescriptexecute\x01\x15onbeforescriptexecute\0\0\0&__widl_f_onafterscriptexecute_Document\0\0\x01\x08Document\x01\0\x01\x14onafterscriptexecute\x01\x14onafterscriptexecute\0\0\0*__widl_f_set_onafterscriptexecute_Document\0\0\x01\x08Document\x01\0\x02\x14onafterscriptexecute\x01\x14onafterscriptexecute\0\0\0#__widl_f_onselectionchange_Document\0\0\x01\x08Document\x01\0\x01\x11onselectionchange\x01\x11onselectionchange\0\0\0'__widl_f_set_onselectionchange_Document\0\0\x01\x08Document\x01\0\x02\x11onselectionchange\x01\x11onselectionchange\0\0\0 __widl_f_current_script_Document\0\0\x01\x08Document\x01\0\x01\rcurrentScript\x01\rcurrentScript\0\0\0\x1C__widl_f_fullscreen_Document\0\0\x01\x08Document\x01\0\x01\nfullscreen\x01\nfullscreen\0\0\0$__widl_f_fullscreen_enabled_Document\0\0\x01\x08Document\x01\0\x01\x11fullscreenEnabled\x01\x11fullscreenEnabled\0\0\0$__widl_f_onfullscreenchange_Document\0\0\x01\x08Document\x01\0\x01\x12onfullscreenchange\x01\x12onfullscreenchange\0\0\0(__widl_f_set_onfullscreenchange_Document\0\0\x01\x08Document\x01\0\x02\x12onfullscreenchange\x01\x12onfullscreenchange\0\0\0#__widl_f_onfullscreenerror_Document\0\0\x01\x08Document\x01\0\x01\x11onfullscreenerror\x01\x11onfullscreenerror\0\0\0'__widl_f_set_onfullscreenerror_Document\0\0\x01\x08Document\x01\0\x02\x11onfullscreenerror\x01\x11onfullscreenerror\0\0\0%__widl_f_onpointerlockchange_Document\0\0\x01\x08Document\x01\0\x01\x13onpointerlockchange\x01\x13onpointerlockchange\0\0\0)__widl_f_set_onpointerlockchange_Document\0\0\x01\x08Document\x01\0\x02\x13onpointerlockchange\x01\x13onpointerlockchange\0\0\0$__widl_f_onpointerlockerror_Document\0\0\x01\x08Document\x01\0\x01\x12onpointerlockerror\x01\x12onpointerlockerror\0\0\0(__widl_f_set_onpointerlockerror_Document\0\0\x01\x08Document\x01\0\x02\x12onpointerlockerror\x01\x12onpointerlockerror\0\0\0\x18__widl_f_hidden_Document\0\0\x01\x08Document\x01\0\x01\x06hidden\x01\x06hidden\0\0\0$__widl_f_onvisibilitychange_Document\0\0\x01\x08Document\x01\0\x01\x12onvisibilitychange\x01\x12onvisibilitychange\0\0\0(__widl_f_set_onvisibilitychange_Document\0\0\x01\x08Document\x01\0\x02\x12onvisibilitychange\x01\x12onvisibilitychange\0\0\0*__widl_f_selected_style_sheet_set_Document\0\0\x01\x08Document\x01\0\x01\x15selectedStyleSheetSet\x01\x15selectedStyleSheetSet\0\0\0.__widl_f_set_selected_style_sheet_set_Document\0\0\x01\x08Document\x01\0\x02\x15selectedStyleSheetSet\x01\x15selectedStyleSheetSet\0\0\0&__widl_f_last_style_sheet_set_Document\0\0\x01\x08Document\x01\0\x01\x11lastStyleSheetSet\x01\x11lastStyleSheetSet\0\0\0+__widl_f_preferred_style_sheet_set_Document\0\0\x01\x08Document\x01\0\x01\x16preferredStyleSheetSet\x01\x16preferredStyleSheetSet\0\0\0#__widl_f_scrolling_element_Document\0\0\x01\x08Document\x01\0\x01\x10scrollingElement\x01\x10scrollingElement\0\0\0\x18__widl_f_oncopy_Document\0\0\x01\x08Document\x01\0\x01\x06oncopy\x01\x06oncopy\0\0\0\x1C__widl_f_set_oncopy_Document\0\0\x01\x08Document\x01\0\x02\x06oncopy\x01\x06oncopy\0\0\0\x17__widl_f_oncut_Document\0\0\x01\x08Document\x01\0\x01\x05oncut\x01\x05oncut\0\0\0\x1B__widl_f_set_oncut_Document\0\0\x01\x08Document\x01\0\x02\x05oncut\x01\x05oncut\0\0\0\x19__widl_f_onpaste_Document\0\0\x01\x08Document\x01\0\x01\x07onpaste\x01\x07onpaste\0\0\0\x1D__widl_f_set_onpaste_Document\0\0\x01\x08Document\x01\0\x02\x07onpaste\x01\x07onpaste\0\0\0$__widl_f_element_from_point_Document\0\0\x01\x08Document\x01\0\0\x01\x10elementFromPoint\0\0\0%__widl_f_elements_from_point_Document\0\0\x01\x08Document\x01\0\0\x01\x11elementsFromPoint\0\0\0 __widl_f_active_element_Document\0\0\x01\x08Document\x01\0\x01\ractiveElement\x01\ractiveElement\0\0\0&__widl_f_pointer_lock_element_Document\0\0\x01\x08Document\x01\0\x01\x12pointerLockElement\x01\x12pointerLockElement\0\0\0$__widl_f_fullscreen_element_Document\0\0\x01\x08Document\x01\0\x01\x11fullscreenElement\x01\x11fullscreenElement\0\0\0\x1F__widl_f_get_box_quads_Document\x01\0\x01\x08Document\x01\0\0\x01\x0BgetBoxQuads\0\0\0\x19__widl_f_onabort_Document\0\0\x01\x08Document\x01\0\x01\x07onabort\x01\x07onabort\0\0\0\x1D__widl_f_set_onabort_Document\0\0\x01\x08Document\x01\0\x02\x07onabort\x01\x07onabort\0\0\0\x18__widl_f_onblur_Document\0\0\x01\x08Document\x01\0\x01\x06onblur\x01\x06onblur\0\0\0\x1C__widl_f_set_onblur_Document\0\0\x01\x08Document\x01\0\x02\x06onblur\x01\x06onblur\0\0\0\x19__widl_f_onfocus_Document\0\0\x01\x08Document\x01\0\x01\x07onfocus\x01\x07onfocus\0\0\0\x1D__widl_f_set_onfocus_Document\0\0\x01\x08Document\x01\0\x02\x07onfocus\x01\x07onfocus\0\0\0\x1C__widl_f_onauxclick_Document\0\0\x01\x08Document\x01\0\x01\nonauxclick\x01\nonauxclick\0\0\0 __widl_f_set_onauxclick_Document\0\0\x01\x08Document\x01\0\x02\nonauxclick\x01\nonauxclick\0\0\0\x1B__widl_f_oncanplay_Document\0\0\x01\x08Document\x01\0\x01\toncanplay\x01\toncanplay\0\0\0\x1F__widl_f_set_oncanplay_Document\0\0\x01\x08Document\x01\0\x02\toncanplay\x01\toncanplay\0\0\0\"__widl_f_oncanplaythrough_Document\0\0\x01\x08Document\x01\0\x01\x10oncanplaythrough\x01\x10oncanplaythrough\0\0\0&__widl_f_set_oncanplaythrough_Document\0\0\x01\x08Document\x01\0\x02\x10oncanplaythrough\x01\x10oncanplaythrough\0\0\0\x1A__widl_f_onchange_Document\0\0\x01\x08Document\x01\0\x01\x08onchange\x01\x08onchange\0\0\0\x1E__widl_f_set_onchange_Document\0\0\x01\x08Document\x01\0\x02\x08onchange\x01\x08onchange\0\0\0\x19__widl_f_onclick_Document\0\0\x01\x08Document\x01\0\x01\x07onclick\x01\x07onclick\0\0\0\x1D__widl_f_set_onclick_Document\0\0\x01\x08Document\x01\0\x02\x07onclick\x01\x07onclick\0\0\0\x19__widl_f_onclose_Document\0\0\x01\x08Document\x01\0\x01\x07onclose\x01\x07onclose\0\0\0\x1D__widl_f_set_onclose_Document\0\0\x01\x08Document\x01\0\x02\x07onclose\x01\x07onclose\0\0\0\x1F__widl_f_oncontextmenu_Document\0\0\x01\x08Document\x01\0\x01\roncontextmenu\x01\roncontextmenu\0\0\0#__widl_f_set_oncontextmenu_Document\0\0\x01\x08Document\x01\0\x02\roncontextmenu\x01\roncontextmenu\0\0\0\x1C__widl_f_ondblclick_Document\0\0\x01\x08Document\x01\0\x01\nondblclick\x01\nondblclick\0\0\0 __widl_f_set_ondblclick_Document\0\0\x01\x08Document\x01\0\x02\nondblclick\x01\nondblclick\0\0\0\x18__widl_f_ondrag_Document\0\0\x01\x08Document\x01\0\x01\x06ondrag\x01\x06ondrag\0\0\0\x1C__widl_f_set_ondrag_Document\0\0\x01\x08Document\x01\0\x02\x06ondrag\x01\x06ondrag\0\0\0\x1B__widl_f_ondragend_Document\0\0\x01\x08Document\x01\0\x01\tondragend\x01\tondragend\0\0\0\x1F__widl_f_set_ondragend_Document\0\0\x01\x08Document\x01\0\x02\tondragend\x01\tondragend\0\0\0\x1D__widl_f_ondragenter_Document\0\0\x01\x08Document\x01\0\x01\x0Bondragenter\x01\x0Bondragenter\0\0\0!__widl_f_set_ondragenter_Document\0\0\x01\x08Document\x01\0\x02\x0Bondragenter\x01\x0Bondragenter\0\0\0\x1C__widl_f_ondragexit_Document\0\0\x01\x08Document\x01\0\x01\nondragexit\x01\nondragexit\0\0\0 __widl_f_set_ondragexit_Document\0\0\x01\x08Document\x01\0\x02\nondragexit\x01\nondragexit\0\0\0\x1D__widl_f_ondragleave_Document\0\0\x01\x08Document\x01\0\x01\x0Bondragleave\x01\x0Bondragleave\0\0\0!__widl_f_set_ondragleave_Document\0\0\x01\x08Document\x01\0\x02\x0Bondragleave\x01\x0Bondragleave\0\0\0\x1C__widl_f_ondragover_Document\0\0\x01\x08Document\x01\0\x01\nondragover\x01\nondragover\0\0\0 __widl_f_set_ondragover_Document\0\0\x01\x08Document\x01\0\x02\nondragover\x01\nondragover\0\0\0\x1D__widl_f_ondragstart_Document\0\0\x01\x08Document\x01\0\x01\x0Bondragstart\x01\x0Bondragstart\0\0\0!__widl_f_set_ondragstart_Document\0\0\x01\x08Document\x01\0\x02\x0Bondragstart\x01\x0Bondragstart\0\0\0\x18__widl_f_ondrop_Document\0\0\x01\x08Document\x01\0\x01\x06ondrop\x01\x06ondrop\0\0\0\x1C__widl_f_set_ondrop_Document\0\0\x01\x08Document\x01\0\x02\x06ondrop\x01\x06ondrop\0\0\0\"__widl_f_ondurationchange_Document\0\0\x01\x08Document\x01\0\x01\x10ondurationchange\x01\x10ondurationchange\0\0\0&__widl_f_set_ondurationchange_Document\0\0\x01\x08Document\x01\0\x02\x10ondurationchange\x01\x10ondurationchange\0\0\0\x1B__widl_f_onemptied_Document\0\0\x01\x08Document\x01\0\x01\tonemptied\x01\tonemptied\0\0\0\x1F__widl_f_set_onemptied_Document\0\0\x01\x08Document\x01\0\x02\tonemptied\x01\tonemptied\0\0\0\x19__widl_f_onended_Document\0\0\x01\x08Document\x01\0\x01\x07onended\x01\x07onended\0\0\0\x1D__widl_f_set_onended_Document\0\0\x01\x08Document\x01\0\x02\x07onended\x01\x07onended\0\0\0\x19__widl_f_oninput_Document\0\0\x01\x08Document\x01\0\x01\x07oninput\x01\x07oninput\0\0\0\x1D__widl_f_set_oninput_Document\0\0\x01\x08Document\x01\0\x02\x07oninput\x01\x07oninput\0\0\0\x1B__widl_f_oninvalid_Document\0\0\x01\x08Document\x01\0\x01\toninvalid\x01\toninvalid\0\0\0\x1F__widl_f_set_oninvalid_Document\0\0\x01\x08Document\x01\0\x02\toninvalid\x01\toninvalid\0\0\0\x1B__widl_f_onkeydown_Document\0\0\x01\x08Document\x01\0\x01\tonkeydown\x01\tonkeydown\0\0\0\x1F__widl_f_set_onkeydown_Document\0\0\x01\x08Document\x01\0\x02\tonkeydown\x01\tonkeydown\0\0\0\x1C__widl_f_onkeypress_Document\0\0\x01\x08Document\x01\0\x01\nonkeypress\x01\nonkeypress\0\0\0 __widl_f_set_onkeypress_Document\0\0\x01\x08Document\x01\0\x02\nonkeypress\x01\nonkeypress\0\0\0\x19__widl_f_onkeyup_Document\0\0\x01\x08Document\x01\0\x01\x07onkeyup\x01\x07onkeyup\0\0\0\x1D__widl_f_set_onkeyup_Document\0\0\x01\x08Document\x01\0\x02\x07onkeyup\x01\x07onkeyup\0\0\0\x18__widl_f_onload_Document\0\0\x01\x08Document\x01\0\x01\x06onload\x01\x06onload\0\0\0\x1C__widl_f_set_onload_Document\0\0\x01\x08Document\x01\0\x02\x06onload\x01\x06onload\0\0\0\x1E__widl_f_onloadeddata_Document\0\0\x01\x08Document\x01\0\x01\x0Conloadeddata\x01\x0Conloadeddata\0\0\0\"__widl_f_set_onloadeddata_Document\0\0\x01\x08Document\x01\0\x02\x0Conloadeddata\x01\x0Conloadeddata\0\0\0\"__widl_f_onloadedmetadata_Document\0\0\x01\x08Document\x01\0\x01\x10onloadedmetadata\x01\x10onloadedmetadata\0\0\0&__widl_f_set_onloadedmetadata_Document\0\0\x01\x08Document\x01\0\x02\x10onloadedmetadata\x01\x10onloadedmetadata\0\0\0\x1B__widl_f_onloadend_Document\0\0\x01\x08Document\x01\0\x01\tonloadend\x01\tonloadend\0\0\0\x1F__widl_f_set_onloadend_Document\0\0\x01\x08Document\x01\0\x02\tonloadend\x01\tonloadend\0\0\0\x1D__widl_f_onloadstart_Document\0\0\x01\x08Document\x01\0\x01\x0Bonloadstart\x01\x0Bonloadstart\0\0\0!__widl_f_set_onloadstart_Document\0\0\x01\x08Document\x01\0\x02\x0Bonloadstart\x01\x0Bonloadstart\0\0\0\x1D__widl_f_onmousedown_Document\0\0\x01\x08Document\x01\0\x01\x0Bonmousedown\x01\x0Bonmousedown\0\0\0!__widl_f_set_onmousedown_Document\0\0\x01\x08Document\x01\0\x02\x0Bonmousedown\x01\x0Bonmousedown\0\0\0\x1E__widl_f_onmouseenter_Document\0\0\x01\x08Document\x01\0\x01\x0Conmouseenter\x01\x0Conmouseenter\0\0\0\"__widl_f_set_onmouseenter_Document\0\0\x01\x08Document\x01\0\x02\x0Conmouseenter\x01\x0Conmouseenter\0\0\0\x1E__widl_f_onmouseleave_Document\0\0\x01\x08Document\x01\0\x01\x0Conmouseleave\x01\x0Conmouseleave\0\0\0\"__widl_f_set_onmouseleave_Document\0\0\x01\x08Document\x01\0\x02\x0Conmouseleave\x01\x0Conmouseleave\0\0\0\x1D__widl_f_onmousemove_Document\0\0\x01\x08Document\x01\0\x01\x0Bonmousemove\x01\x0Bonmousemove\0\0\0!__widl_f_set_onmousemove_Document\0\0\x01\x08Document\x01\0\x02\x0Bonmousemove\x01\x0Bonmousemove\0\0\0\x1C__widl_f_onmouseout_Document\0\0\x01\x08Document\x01\0\x01\nonmouseout\x01\nonmouseout\0\0\0 __widl_f_set_onmouseout_Document\0\0\x01\x08Document\x01\0\x02\nonmouseout\x01\nonmouseout\0\0\0\x1D__widl_f_onmouseover_Document\0\0\x01\x08Document\x01\0\x01\x0Bonmouseover\x01\x0Bonmouseover\0\0\0!__widl_f_set_onmouseover_Document\0\0\x01\x08Document\x01\0\x02\x0Bonmouseover\x01\x0Bonmouseover\0\0\0\x1B__widl_f_onmouseup_Document\0\0\x01\x08Document\x01\0\x01\tonmouseup\x01\tonmouseup\0\0\0\x1F__widl_f_set_onmouseup_Document\0\0\x01\x08Document\x01\0\x02\tonmouseup\x01\tonmouseup\0\0\0\x19__widl_f_onwheel_Document\0\0\x01\x08Document\x01\0\x01\x07onwheel\x01\x07onwheel\0\0\0\x1D__widl_f_set_onwheel_Document\0\0\x01\x08Document\x01\0\x02\x07onwheel\x01\x07onwheel\0\0\0\x19__widl_f_onpause_Document\0\0\x01\x08Document\x01\0\x01\x07onpause\x01\x07onpause\0\0\0\x1D__widl_f_set_onpause_Document\0\0\x01\x08Document\x01\0\x02\x07onpause\x01\x07onpause\0\0\0\x18__widl_f_onplay_Document\0\0\x01\x08Document\x01\0\x01\x06onplay\x01\x06onplay\0\0\0\x1C__widl_f_set_onplay_Document\0\0\x01\x08Document\x01\0\x02\x06onplay\x01\x06onplay\0\0\0\x1B__widl_f_onplaying_Document\0\0\x01\x08Document\x01\0\x01\tonplaying\x01\tonplaying\0\0\0\x1F__widl_f_set_onplaying_Document\0\0\x01\x08Document\x01\0\x02\tonplaying\x01\tonplaying\0\0\0\x1C__widl_f_onprogress_Document\0\0\x01\x08Document\x01\0\x01\nonprogress\x01\nonprogress\0\0\0 __widl_f_set_onprogress_Document\0\0\x01\x08Document\x01\0\x02\nonprogress\x01\nonprogress\0\0\0\x1E__widl_f_onratechange_Document\0\0\x01\x08Document\x01\0\x01\x0Conratechange\x01\x0Conratechange\0\0\0\"__widl_f_set_onratechange_Document\0\0\x01\x08Document\x01\0\x02\x0Conratechange\x01\x0Conratechange\0\0\0\x19__widl_f_onreset_Document\0\0\x01\x08Document\x01\0\x01\x07onreset\x01\x07onreset\0\0\0\x1D__widl_f_set_onreset_Document\0\0\x01\x08Document\x01\0\x02\x07onreset\x01\x07onreset\0\0\0\x1A__widl_f_onresize_Document\0\0\x01\x08Document\x01\0\x01\x08onresize\x01\x08onresize\0\0\0\x1E__widl_f_set_onresize_Document\0\0\x01\x08Document\x01\0\x02\x08onresize\x01\x08onresize\0\0\0\x1A__widl_f_onscroll_Document\0\0\x01\x08Document\x01\0\x01\x08onscroll\x01\x08onscroll\0\0\0\x1E__widl_f_set_onscroll_Document\0\0\x01\x08Document\x01\0\x02\x08onscroll\x01\x08onscroll\0\0\0\x1A__widl_f_onseeked_Document\0\0\x01\x08Document\x01\0\x01\x08onseeked\x01\x08onseeked\0\0\0\x1E__widl_f_set_onseeked_Document\0\0\x01\x08Document\x01\0\x02\x08onseeked\x01\x08onseeked\0\0\0\x1B__widl_f_onseeking_Document\0\0\x01\x08Document\x01\0\x01\tonseeking\x01\tonseeking\0\0\0\x1F__widl_f_set_onseeking_Document\0\0\x01\x08Document\x01\0\x02\tonseeking\x01\tonseeking\0\0\0\x1A__widl_f_onselect_Document\0\0\x01\x08Document\x01\0\x01\x08onselect\x01\x08onselect\0\0\0\x1E__widl_f_set_onselect_Document\0\0\x01\x08Document\x01\0\x02\x08onselect\x01\x08onselect\0\0\0\x18__widl_f_onshow_Document\0\0\x01\x08Document\x01\0\x01\x06onshow\x01\x06onshow\0\0\0\x1C__widl_f_set_onshow_Document\0\0\x01\x08Document\x01\0\x02\x06onshow\x01\x06onshow\0\0\0\x1B__widl_f_onstalled_Document\0\0\x01\x08Document\x01\0\x01\tonstalled\x01\tonstalled\0\0\0\x1F__widl_f_set_onstalled_Document\0\0\x01\x08Document\x01\0\x02\tonstalled\x01\tonstalled\0\0\0\x1A__widl_f_onsubmit_Document\0\0\x01\x08Document\x01\0\x01\x08onsubmit\x01\x08onsubmit\0\0\0\x1E__widl_f_set_onsubmit_Document\0\0\x01\x08Document\x01\0\x02\x08onsubmit\x01\x08onsubmit\0\0\0\x1B__widl_f_onsuspend_Document\0\0\x01\x08Document\x01\0\x01\tonsuspend\x01\tonsuspend\0\0\0\x1F__widl_f_set_onsuspend_Document\0\0\x01\x08Document\x01\0\x02\tonsuspend\x01\tonsuspend\0\0\0\x1E__widl_f_ontimeupdate_Document\0\0\x01\x08Document\x01\0\x01\x0Contimeupdate\x01\x0Contimeupdate\0\0\0\"__widl_f_set_ontimeupdate_Document\0\0\x01\x08Document\x01\0\x02\x0Contimeupdate\x01\x0Contimeupdate\0\0\0 __widl_f_onvolumechange_Document\0\0\x01\x08Document\x01\0\x01\x0Eonvolumechange\x01\x0Eonvolumechange\0\0\0$__widl_f_set_onvolumechange_Document\0\0\x01\x08Document\x01\0\x02\x0Eonvolumechange\x01\x0Eonvolumechange\0\0\0\x1B__widl_f_onwaiting_Document\0\0\x01\x08Document\x01\0\x01\tonwaiting\x01\tonwaiting\0\0\0\x1F__widl_f_set_onwaiting_Document\0\0\x01\x08Document\x01\0\x02\tonwaiting\x01\tonwaiting\0\0\0\x1F__widl_f_onselectstart_Document\0\0\x01\x08Document\x01\0\x01\ronselectstart\x01\ronselectstart\0\0\0#__widl_f_set_onselectstart_Document\0\0\x01\x08Document\x01\0\x02\ronselectstart\x01\ronselectstart\0\0\0\x1A__widl_f_ontoggle_Document\0\0\x01\x08Document\x01\0\x01\x08ontoggle\x01\x08ontoggle\0\0\0\x1E__widl_f_set_ontoggle_Document\0\0\x01\x08Document\x01\0\x02\x08ontoggle\x01\x08ontoggle\0\0\0!__widl_f_onpointercancel_Document\0\0\x01\x08Document\x01\0\x01\x0Fonpointercancel\x01\x0Fonpointercancel\0\0\0%__widl_f_set_onpointercancel_Document\0\0\x01\x08Document\x01\0\x02\x0Fonpointercancel\x01\x0Fonpointercancel\0\0\0\x1F__widl_f_onpointerdown_Document\0\0\x01\x08Document\x01\0\x01\ronpointerdown\x01\ronpointerdown\0\0\0#__widl_f_set_onpointerdown_Document\0\0\x01\x08Document\x01\0\x02\ronpointerdown\x01\ronpointerdown\0\0\0\x1D__widl_f_onpointerup_Document\0\0\x01\x08Document\x01\0\x01\x0Bonpointerup\x01\x0Bonpointerup\0\0\0!__widl_f_set_onpointerup_Document\0\0\x01\x08Document\x01\0\x02\x0Bonpointerup\x01\x0Bonpointerup\0\0\0\x1F__widl_f_onpointermove_Document\0\0\x01\x08Document\x01\0\x01\ronpointermove\x01\ronpointermove\0\0\0#__widl_f_set_onpointermove_Document\0\0\x01\x08Document\x01\0\x02\ronpointermove\x01\ronpointermove\0\0\0\x1E__widl_f_onpointerout_Document\0\0\x01\x08Document\x01\0\x01\x0Conpointerout\x01\x0Conpointerout\0\0\0\"__widl_f_set_onpointerout_Document\0\0\x01\x08Document\x01\0\x02\x0Conpointerout\x01\x0Conpointerout\0\0\0\x1F__widl_f_onpointerover_Document\0\0\x01\x08Document\x01\0\x01\ronpointerover\x01\ronpointerover\0\0\0#__widl_f_set_onpointerover_Document\0\0\x01\x08Document\x01\0\x02\ronpointerover\x01\ronpointerover\0\0\0 __widl_f_onpointerenter_Document\0\0\x01\x08Document\x01\0\x01\x0Eonpointerenter\x01\x0Eonpointerenter\0\0\0$__widl_f_set_onpointerenter_Document\0\0\x01\x08Document\x01\0\x02\x0Eonpointerenter\x01\x0Eonpointerenter\0\0\0 __widl_f_onpointerleave_Document\0\0\x01\x08Document\x01\0\x01\x0Eonpointerleave\x01\x0Eonpointerleave\0\0\0$__widl_f_set_onpointerleave_Document\0\0\x01\x08Document\x01\0\x02\x0Eonpointerleave\x01\x0Eonpointerleave\0\0\0%__widl_f_ongotpointercapture_Document\0\0\x01\x08Document\x01\0\x01\x13ongotpointercapture\x01\x13ongotpointercapture\0\0\0)__widl_f_set_ongotpointercapture_Document\0\0\x01\x08Document\x01\0\x02\x13ongotpointercapture\x01\x13ongotpointercapture\0\0\0&__widl_f_onlostpointercapture_Document\0\0\x01\x08Document\x01\0\x01\x14onlostpointercapture\x01\x14onlostpointercapture\0\0\0*__widl_f_set_onlostpointercapture_Document\0\0\x01\x08Document\x01\0\x02\x14onlostpointercapture\x01\x14onlostpointercapture\0\0\0#__widl_f_onanimationcancel_Document\0\0\x01\x08Document\x01\0\x01\x11onanimationcancel\x01\x11onanimationcancel\0\0\0'__widl_f_set_onanimationcancel_Document\0\0\x01\x08Document\x01\0\x02\x11onanimationcancel\x01\x11onanimationcancel\0\0\0 __widl_f_onanimationend_Document\0\0\x01\x08Document\x01\0\x01\x0Eonanimationend\x01\x0Eonanimationend\0\0\0$__widl_f_set_onanimationend_Document\0\0\x01\x08Document\x01\0\x02\x0Eonanimationend\x01\x0Eonanimationend\0\0\0&__widl_f_onanimationiteration_Document\0\0\x01\x08Document\x01\0\x01\x14onanimationiteration\x01\x14onanimationiteration\0\0\0*__widl_f_set_onanimationiteration_Document\0\0\x01\x08Document\x01\0\x02\x14onanimationiteration\x01\x14onanimationiteration\0\0\0\"__widl_f_onanimationstart_Document\0\0\x01\x08Document\x01\0\x01\x10onanimationstart\x01\x10onanimationstart\0\0\0&__widl_f_set_onanimationstart_Document\0\0\x01\x08Document\x01\0\x02\x10onanimationstart\x01\x10onanimationstart\0\0\0$__widl_f_ontransitioncancel_Document\0\0\x01\x08Document\x01\0\x01\x12ontransitioncancel\x01\x12ontransitioncancel\0\0\0(__widl_f_set_ontransitioncancel_Document\0\0\x01\x08Document\x01\0\x02\x12ontransitioncancel\x01\x12ontransitioncancel\0\0\0!__widl_f_ontransitionend_Document\0\0\x01\x08Document\x01\0\x01\x0Fontransitionend\x01\x0Fontransitionend\0\0\0%__widl_f_set_ontransitionend_Document\0\0\x01\x08Document\x01\0\x02\x0Fontransitionend\x01\x0Fontransitionend\0\0\0!__widl_f_ontransitionrun_Document\0\0\x01\x08Document\x01\0\x01\x0Fontransitionrun\x01\x0Fontransitionrun\0\0\0%__widl_f_set_ontransitionrun_Document\0\0\x01\x08Document\x01\0\x02\x0Fontransitionrun\x01\x0Fontransitionrun\0\0\0#__widl_f_ontransitionstart_Document\0\0\x01\x08Document\x01\0\x01\x11ontransitionstart\x01\x11ontransitionstart\0\0\0'__widl_f_set_ontransitionstart_Document\0\0\x01\x08Document\x01\0\x02\x11ontransitionstart\x01\x11ontransitionstart\0\0\0&__widl_f_onwebkitanimationend_Document\0\0\x01\x08Document\x01\0\x01\x14onwebkitanimationend\x01\x14onwebkitanimationend\0\0\0*__widl_f_set_onwebkitanimationend_Document\0\0\x01\x08Document\x01\0\x02\x14onwebkitanimationend\x01\x14onwebkitanimationend\0\0\0,__widl_f_onwebkitanimationiteration_Document\0\0\x01\x08Document\x01\0\x01\x1Aonwebkitanimationiteration\x01\x1Aonwebkitanimationiteration\0\0\00__widl_f_set_onwebkitanimationiteration_Document\0\0\x01\x08Document\x01\0\x02\x1Aonwebkitanimationiteration\x01\x1Aonwebkitanimationiteration\0\0\0(__widl_f_onwebkitanimationstart_Document\0\0\x01\x08Document\x01\0\x01\x16onwebkitanimationstart\x01\x16onwebkitanimationstart\0\0\0,__widl_f_set_onwebkitanimationstart_Document\0\0\x01\x08Document\x01\0\x02\x16onwebkitanimationstart\x01\x16onwebkitanimationstart\0\0\0'__widl_f_onwebkittransitionend_Document\0\0\x01\x08Document\x01\0\x01\x15onwebkittransitionend\x01\x15onwebkittransitionend\0\0\0+__widl_f_set_onwebkittransitionend_Document\0\0\x01\x08Document\x01\0\x02\x15onwebkittransitionend\x01\x15onwebkittransitionend\0\0\0\x19__widl_f_onerror_Document\0\0\x01\x08Document\x01\0\x01\x07onerror\x01\x07onerror\0\0\0\x1D__widl_f_set_onerror_Document\0\0\x01\x08Document\x01\0\x02\x07onerror\x01\x07onerror\0\0\0\"__widl_f_append_with_node_Document\x01\x01\x01\x08Document\x01\0\0\x01\x06append\0\0\0$__widl_f_append_with_node_0_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0!__widl_f_append_with_str_Document\x01\x01\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_0_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_1_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_2_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_3_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_4_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_5_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_6_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_str_7_Document\x01\0\x01\x08Document\x01\0\0\x01\x06append\0\0\0#__widl_f_prepend_with_node_Document\x01\x01\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0%__widl_f_prepend_with_node_0_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0\"__widl_f_prepend_with_str_Document\x01\x01\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_0_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_1_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_2_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_3_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_4_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_5_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_6_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_str_7_Document\x01\0\x01\x08Document\x01\0\0\x01\x07prepend\0\0\0%__widl_f_first_element_child_Document\0\0\x01\x08Document\x01\0\x01\x11firstElementChild\x01\x11firstElementChild\0\0\0$__widl_f_last_element_child_Document\0\0\x01\x08Document\x01\0\x01\x10lastElementChild\x01\x10lastElementChild\0\0\0%__widl_f_child_element_count_Document\0\0\x01\x08Document\x01\0\x01\x11childElementCount\x01\x11childElementCount\0\0\0\x1E__widl_f_ontouchstart_Document\0\0\x01\x08Document\x01\0\x01\x0Contouchstart\x01\x0Contouchstart\0\0\0\"__widl_f_set_ontouchstart_Document\0\0\x01\x08Document\x01\0\x02\x0Contouchstart\x01\x0Contouchstart\0\0\0\x1C__widl_f_ontouchend_Document\0\0\x01\x08Document\x01\0\x01\nontouchend\x01\nontouchend\0\0\0 __widl_f_set_ontouchend_Document\0\0\x01\x08Document\x01\0\x02\nontouchend\x01\nontouchend\0\0\0\x1D__widl_f_ontouchmove_Document\0\0\x01\x08Document\x01\0\x01\x0Bontouchmove\x01\x0Bontouchmove\0\0\0!__widl_f_set_ontouchmove_Document\0\0\x01\x08Document\x01\0\x02\x0Bontouchmove\x01\x0Bontouchmove\0\0\0\x1F__widl_f_ontouchcancel_Document\0\0\x01\x08Document\x01\0\x01\rontouchcancel\x01\rontouchcancel\0\0\0#__widl_f_set_ontouchcancel_Document\0\0\x01\x08Document\x01\0\x02\rontouchcancel\x01\rontouchcancel\0\0\x02\x07Element\x19__widl_instanceof_Element\0\0\0\0\x18__widl_f_closest_Element\x01\0\x01\x07Element\x01\0\0\x01\x07closest\0\0\0\x1E__widl_f_get_attribute_Element\0\0\x01\x07Element\x01\0\0\x01\x0CgetAttribute\0\0\0!__widl_f_get_attribute_ns_Element\0\0\x01\x07Element\x01\0\0\x01\x0EgetAttributeNS\0\0\0$__widl_f_get_attribute_names_Element\0\0\x01\x07Element\x01\0\0\x01\x11getAttributeNames\0\0\0\x1E__widl_f_has_attribute_Element\0\0\x01\x07Element\x01\0\0\x01\x0ChasAttribute\0\0\0!__widl_f_has_attribute_ns_Element\0\0\x01\x07Element\x01\0\0\x01\x0EhasAttributeNS\0\0\0\x1F__widl_f_has_attributes_Element\0\0\x01\x07Element\x01\0\0\x01\rhasAttributes\0\0\0$__widl_f_has_pointer_capture_Element\0\0\x01\x07Element\x01\0\0\x01\x11hasPointerCapture\0\0\0(__widl_f_insert_adjacent_element_Element\x01\0\x01\x07Element\x01\0\0\x01\x15insertAdjacentElement\0\0\0%__widl_f_insert_adjacent_html_Element\x01\0\x01\x07Element\x01\0\0\x01\x12insertAdjacentHTML\0\0\0%__widl_f_insert_adjacent_text_Element\x01\0\x01\x07Element\x01\0\0\x01\x12insertAdjacentText\0\0\0\x18__widl_f_matches_Element\x01\0\x01\x07Element\x01\0\0\x01\x07matches\0\0\0\x1F__widl_f_query_selector_Element\x01\0\x01\x07Element\x01\0\0\x01\rquerySelector\0\0\0 __widl_f_release_capture_Element\0\0\x01\x07Element\x01\0\0\x01\x0EreleaseCapture\0\0\0(__widl_f_release_pointer_capture_Element\x01\0\x01\x07Element\x01\0\0\x01\x15releasePointerCapture\0\0\0!__widl_f_remove_attribute_Element\x01\0\x01\x07Element\x01\0\0\x01\x0FremoveAttribute\0\0\0$__widl_f_remove_attribute_ns_Element\x01\0\x01\x07Element\x01\0\0\x01\x11removeAttributeNS\0\0\0#__widl_f_request_fullscreen_Element\x01\0\x01\x07Element\x01\0\0\x01\x11requestFullscreen\0\0\0%__widl_f_request_pointer_lock_Element\0\0\x01\x07Element\x01\0\0\x01\x12requestPointerLock\0\0\0$__widl_f_scroll_with_x_and_y_Element\0\0\x01\x07Element\x01\0\0\x01\x06scroll\0\0\0\x17__widl_f_scroll_Element\0\0\x01\x07Element\x01\0\0\x01\x06scroll\0\0\0'__widl_f_scroll_by_with_x_and_y_Element\0\0\x01\x07Element\x01\0\0\x01\x08scrollBy\0\0\0\x1A__widl_f_scroll_by_Element\0\0\x01\x07Element\x01\0\0\x01\x08scrollBy\0\0\0!__widl_f_scroll_into_view_Element\0\0\x01\x07Element\x01\0\0\x01\x0EscrollIntoView\0\0\0+__widl_f_scroll_into_view_with_bool_Element\0\0\x01\x07Element\x01\0\0\x01\x0EscrollIntoView\0\0\0'__widl_f_scroll_to_with_x_and_y_Element\0\0\x01\x07Element\x01\0\0\x01\x08scrollTo\0\0\0\x1A__widl_f_scroll_to_Element\0\0\x01\x07Element\x01\0\0\x01\x08scrollTo\0\0\0\x1E__widl_f_set_attribute_Element\x01\0\x01\x07Element\x01\0\0\x01\x0CsetAttribute\0\0\0!__widl_f_set_attribute_ns_Element\x01\0\x01\x07Element\x01\0\0\x01\x0EsetAttributeNS\0\0\0\x1C__widl_f_set_capture_Element\0\0\x01\x07Element\x01\0\0\x01\nsetCapture\0\0\05__widl_f_set_capture_with_retarget_to_element_Element\0\0\x01\x07Element\x01\0\0\x01\nsetCapture\0\0\0$__widl_f_set_pointer_capture_Element\x01\0\x01\x07Element\x01\0\0\x01\x11setPointerCapture\0\0\0!__widl_f_toggle_attribute_Element\x01\0\x01\x07Element\x01\0\0\x01\x0FtoggleAttribute\0\0\0,__widl_f_toggle_attribute_with_force_Element\x01\0\x01\x07Element\x01\0\0\x01\x0FtoggleAttribute\0\0\0(__widl_f_webkit_matches_selector_Element\x01\0\x01\x07Element\x01\0\0\x01\x15webkitMatchesSelector\0\0\0\x1E__widl_f_namespace_uri_Element\0\0\x01\x07Element\x01\0\x01\x0CnamespaceURI\x01\x0CnamespaceURI\0\0\0\x17__widl_f_prefix_Element\0\0\x01\x07Element\x01\0\x01\x06prefix\x01\x06prefix\0\0\0\x1B__widl_f_local_name_Element\0\0\x01\x07Element\x01\0\x01\tlocalName\x01\tlocalName\0\0\0\x19__widl_f_tag_name_Element\0\0\x01\x07Element\x01\0\x01\x07tagName\x01\x07tagName\0\0\0\x13__widl_f_id_Element\0\0\x01\x07Element\x01\0\x01\x02id\x01\x02id\0\0\0\x17__widl_f_set_id_Element\0\0\x01\x07Element\x01\0\x02\x02id\x01\x02id\0\0\0\x1B__widl_f_class_name_Element\0\0\x01\x07Element\x01\0\x01\tclassName\x01\tclassName\0\0\0\x1F__widl_f_set_class_name_Element\0\0\x01\x07Element\x01\0\x02\tclassName\x01\tclassName\0\0\0\x1B__widl_f_scroll_top_Element\0\0\x01\x07Element\x01\0\x01\tscrollTop\x01\tscrollTop\0\0\0\x1F__widl_f_set_scroll_top_Element\0\0\x01\x07Element\x01\0\x02\tscrollTop\x01\tscrollTop\0\0\0\x1C__widl_f_scroll_left_Element\0\0\x01\x07Element\x01\0\x01\nscrollLeft\x01\nscrollLeft\0\0\0 __widl_f_set_scroll_left_Element\0\0\x01\x07Element\x01\0\x02\nscrollLeft\x01\nscrollLeft\0\0\0\x1D__widl_f_scroll_width_Element\0\0\x01\x07Element\x01\0\x01\x0BscrollWidth\x01\x0BscrollWidth\0\0\0\x1E__widl_f_scroll_height_Element\0\0\x01\x07Element\x01\0\x01\x0CscrollHeight\x01\x0CscrollHeight\0\0\0\x1B__widl_f_client_top_Element\0\0\x01\x07Element\x01\0\x01\tclientTop\x01\tclientTop\0\0\0\x1C__widl_f_client_left_Element\0\0\x01\x07Element\x01\0\x01\nclientLeft\x01\nclientLeft\0\0\0\x1D__widl_f_client_width_Element\0\0\x01\x07Element\x01\0\x01\x0BclientWidth\x01\x0BclientWidth\0\0\0\x1E__widl_f_client_height_Element\0\0\x01\x07Element\x01\0\x01\x0CclientHeight\x01\x0CclientHeight\0\0\0\x1B__widl_f_inner_html_Element\0\0\x01\x07Element\x01\0\x01\tinnerHTML\x01\tinnerHTML\0\0\0\x1F__widl_f_set_inner_html_Element\0\0\x01\x07Element\x01\0\x02\tinnerHTML\x01\tinnerHTML\0\0\0\x1B__widl_f_outer_html_Element\0\0\x01\x07Element\x01\0\x01\touterHTML\x01\touterHTML\0\0\0\x1F__widl_f_set_outer_html_Element\0\0\x01\x07Element\x01\0\x02\touterHTML\x01\touterHTML\0\0\0\x15__widl_f_slot_Element\0\0\x01\x07Element\x01\0\x01\x04slot\x01\x04slot\0\0\0\x19__widl_f_set_slot_Element\0\0\x01\x07Element\x01\0\x02\x04slot\x01\x04slot\0\0\0 __widl_f_after_with_node_Element\x01\x01\x01\x07Element\x01\0\0\x01\x05after\0\0\0\"__widl_f_after_with_node_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0\x1F__widl_f_after_with_str_Element\x01\x01\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_1_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_2_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_3_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_4_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_5_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_6_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_after_with_str_7_Element\x01\0\x01\x07Element\x01\0\0\x01\x05after\0\0\0!__widl_f_before_with_node_Element\x01\x01\x01\x07Element\x01\0\0\x01\x06before\0\0\0#__widl_f_before_with_node_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0 __widl_f_before_with_str_Element\x01\x01\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_1_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_2_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_3_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_4_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_5_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_6_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\"__widl_f_before_with_str_7_Element\x01\0\x01\x07Element\x01\0\0\x01\x06before\0\0\0\x17__widl_f_remove_Element\0\0\x01\x07Element\x01\0\0\x01\x06remove\0\0\0'__widl_f_replace_with_with_node_Element\x01\x01\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0)__widl_f_replace_with_with_node_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0&__widl_f_replace_with_with_str_Element\x01\x01\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_1_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_2_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_3_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_4_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_5_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_6_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0(__widl_f_replace_with_with_str_7_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BreplaceWith\0\0\0\x1E__widl_f_get_box_quads_Element\x01\0\x01\x07Element\x01\0\0\x01\x0BgetBoxQuads\0\0\0)__widl_f_previous_element_sibling_Element\0\0\x01\x07Element\x01\0\x01\x16previousElementSibling\x01\x16previousElementSibling\0\0\0%__widl_f_next_element_sibling_Element\0\0\x01\x07Element\x01\0\x01\x12nextElementSibling\x01\x12nextElementSibling\0\0\0!__widl_f_append_with_node_Element\x01\x01\x01\x07Element\x01\0\0\x01\x06append\0\0\0#__widl_f_append_with_node_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0 __widl_f_append_with_str_Element\x01\x01\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_1_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_2_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_3_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_4_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_5_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_6_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_append_with_str_7_Element\x01\0\x01\x07Element\x01\0\0\x01\x06append\0\0\0\"__widl_f_prepend_with_node_Element\x01\x01\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0$__widl_f_prepend_with_node_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0!__widl_f_prepend_with_str_Element\x01\x01\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_0_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_1_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_2_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_3_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_4_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_5_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_6_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0#__widl_f_prepend_with_str_7_Element\x01\0\x01\x07Element\x01\0\0\x01\x07prepend\0\0\0$__widl_f_first_element_child_Element\0\0\x01\x07Element\x01\0\x01\x11firstElementChild\x01\x11firstElementChild\0\0\0#__widl_f_last_element_child_Element\0\0\x01\x07Element\x01\0\x01\x10lastElementChild\x01\x10lastElementChild\0\0\0$__widl_f_child_element_count_Element\0\0\x01\x07Element\x01\0\x01\x11childElementCount\x01\x11childElementCount\0\0\x02\x0BEventTarget\x1D__widl_instanceof_EventTarget\0\0\0\0\x18__widl_f_new_EventTarget\x01\0\x01\x0BEventTarget\0\x01\x03new\0\0\05__widl_f_add_event_listener_with_callback_EventTarget\x01\0\x01\x0BEventTarget\x01\0\0\x01\x10addEventListener\0\0\0>__widl_f_add_event_listener_with_callback_and_bool_EventTarget\x01\0\x01\x0BEventTarget\x01\0\0\x01\x10addEventListener\0\0\0R__widl_f_add_event_listener_with_callback_and_bool_and_wants_untrusted_EventTarget\x01\0\x01\x0BEventTarget\x01\0\0\x01\x10addEventListener\0\0\08__widl_f_remove_event_listener_with_callback_EventTarget\x01\0\x01\x0BEventTarget\x01\0\0\x01\x13removeEventListener\0\0\0A__widl_f_remove_event_listener_with_callback_and_bool_EventTarget\x01\0\x01\x0BEventTarget\x01\0\0\x01\x13removeEventListener\0\0\x02\x10HTMLAudioElement\"__widl_instanceof_HTMLAudioElement\0\0\0\0\x12__widl_f_new_Audio\x01\0\x01\x05Audio\0\x01\x03new\0\0\0\x1B__widl_f_new_with_src_Audio\x01\0\x01\x05Audio\0\x01\x03new\0\0\x02\x11HTMLCanvasElement#__widl_instanceof_HTMLCanvasElement\0\0\0\0&__widl_f_get_context_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\ngetContext\0\0\0;__widl_f_get_context_with_context_options_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\ngetContext\0\0\0\"__widl_f_to_blob_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x06toBlob\0\0\0,__widl_f_to_blob_with_type_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x06toBlob\0\0\0@__widl_f_to_blob_with_type_and_encoder_options_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\x06toBlob\0\0\0&__widl_f_to_data_url_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\ttoDataURL\0\0\00__widl_f_to_data_url_with_type_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\ttoDataURL\0\0\0D__widl_f_to_data_url_with_type_and_encoder_options_HTMLCanvasElement\x01\0\x01\x11HTMLCanvasElement\x01\0\0\x01\ttoDataURL\0\0\0 __widl_f_width_HTMLCanvasElement\0\0\x01\x11HTMLCanvasElement\x01\0\x01\x05width\x01\x05width\0\0\0$__widl_f_set_width_HTMLCanvasElement\0\0\x01\x11HTMLCanvasElement\x01\0\x02\x05width\x01\x05width\0\0\0!__widl_f_height_HTMLCanvasElement\0\0\x01\x11HTMLCanvasElement\x01\0\x01\x06height\x01\x06height\0\0\0%__widl_f_set_height_HTMLCanvasElement\0\0\x01\x11HTMLCanvasElement\x01\0\x02\x06height\x01\x06height\0\0\x02\x10HTMLImageElement\"__widl_instanceof_HTMLImageElement\0\0\0\0\x12__widl_f_new_Image\x01\0\x01\x05Image\0\x01\x03new\0\0\0\x1D__widl_f_new_with_width_Image\x01\0\x01\x05Image\0\x01\x03new\0\0\0(__widl_f_new_with_width_and_height_Image\x01\0\x01\x05Image\0\x01\x03new\0\0\0\x1D__widl_f_alt_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x03alt\x01\x03alt\0\0\0!__widl_f_set_alt_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x03alt\x01\x03alt\0\0\0\x1D__widl_f_src_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x03src\x01\x03src\0\0\0!__widl_f_set_src_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x03src\x01\x03src\0\0\0 __widl_f_srcset_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06srcset\x01\x06srcset\0\0\0$__widl_f_set_srcset_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06srcset\x01\x06srcset\0\0\0&__widl_f_cross_origin_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x0BcrossOrigin\x01\x0BcrossOrigin\0\0\0*__widl_f_set_cross_origin_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x0BcrossOrigin\x01\x0BcrossOrigin\0\0\0!__widl_f_use_map_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06useMap\x01\x06useMap\0\0\0%__widl_f_set_use_map_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06useMap\x01\x06useMap\0\0\0)__widl_f_referrer_policy_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x0EreferrerPolicy\x01\x0EreferrerPolicy\0\0\0-__widl_f_set_referrer_policy_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x0EreferrerPolicy\x01\x0EreferrerPolicy\0\0\0 __widl_f_is_map_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x05isMap\x01\x05isMap\0\0\0$__widl_f_set_is_map_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x05isMap\x01\x05isMap\0\0\0\x1F__widl_f_width_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x05width\x01\x05width\0\0\0#__widl_f_set_width_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x05width\x01\x05width\0\0\0 __widl_f_height_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06height\x01\x06height\0\0\0$__widl_f_set_height_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06height\x01\x06height\0\0\0'__widl_f_natural_width_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x0CnaturalWidth\x01\x0CnaturalWidth\0\0\0(__widl_f_natural_height_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\rnaturalHeight\x01\rnaturalHeight\0\0\0\"__widl_f_complete_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x08complete\x01\x08complete\0\0\0\x1E__widl_f_name_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x04name\x01\x04name\0\0\0\"__widl_f_set_name_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x04name\x01\x04name\0\0\0\x1F__widl_f_align_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x05align\x01\x05align\0\0\0#__widl_f_set_align_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x05align\x01\x05align\0\0\0 __widl_f_hspace_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06hspace\x01\x06hspace\0\0\0$__widl_f_set_hspace_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06hspace\x01\x06hspace\0\0\0 __widl_f_vspace_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06vspace\x01\x06vspace\0\0\0$__widl_f_set_vspace_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06vspace\x01\x06vspace\0\0\0#__widl_f_long_desc_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x08longDesc\x01\x08longDesc\0\0\0'__widl_f_set_long_desc_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x08longDesc\x01\x08longDesc\0\0\0 __widl_f_border_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x06border\x01\x06border\0\0\0$__widl_f_set_border_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x06border\x01\x06border\0\0\0\x1F__widl_f_sizes_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\x05sizes\x01\x05sizes\0\0\0#__widl_f_set_sizes_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x02\x05sizes\x01\x05sizes\0\0\0%__widl_f_current_src_HTMLImageElement\0\0\x01\x10HTMLImageElement\x01\0\x01\ncurrentSrc\x01\ncurrentSrc\0\0\x02\x10HTMLMediaElement\"__widl_instanceof_HTMLMediaElement\0\0\0\0'__widl_f_can_play_type_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\0\x01\x0BcanPlayType\0\0\0#__widl_f_fast_seek_HTMLMediaElement\x01\0\x01\x10HTMLMediaElement\x01\0\0\x01\x08fastSeek\0\0\0+__widl_f_has_suspend_taint_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\0\x01\x0FhasSuspendTaint\0\0\0\x1E__widl_f_load_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\0\x01\x04load\0\0\0\x1F__widl_f_pause_HTMLMediaElement\x01\0\x01\x10HTMLMediaElement\x01\0\0\x01\x05pause\0\0\0\x1E__widl_f_play_HTMLMediaElement\x01\0\x01\x10HTMLMediaElement\x01\0\0\x01\x04play\0\0\0,__widl_f_seek_to_next_frame_HTMLMediaElement\x01\0\x01\x10HTMLMediaElement\x01\0\0\x01\x0FseekToNextFrame\0\0\0%__widl_f_set_visible_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\0\x01\nsetVisible\0\0\0\x1D__widl_f_src_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x03src\x01\x03src\0\0\0!__widl_f_set_src_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x03src\x01\x03src\0\0\0%__widl_f_current_src_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\ncurrentSrc\x01\ncurrentSrc\0\0\0&__widl_f_cross_origin_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0BcrossOrigin\x01\x0BcrossOrigin\0\0\0*__widl_f_set_cross_origin_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0BcrossOrigin\x01\x0BcrossOrigin\0\0\0'__widl_f_network_state_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0CnetworkState\x01\x0CnetworkState\0\0\0!__widl_f_preload_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x07preload\x01\x07preload\0\0\0%__widl_f_set_preload_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x07preload\x01\x07preload\0\0\0%__widl_f_ready_state_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\nreadyState\x01\nreadyState\0\0\0!__widl_f_seeking_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x07seeking\x01\x07seeking\0\0\0&__widl_f_current_time_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0BcurrentTime\x01\x0BcurrentTime\0\0\0*__widl_f_set_current_time_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0BcurrentTime\x01\x0BcurrentTime\0\0\0\"__widl_f_duration_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x08duration\x01\x08duration\0\0\0 __widl_f_paused_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x06paused\x01\x06paused\0\0\0/__widl_f_default_playback_rate_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x13defaultPlaybackRate\x01\x13defaultPlaybackRate\0\0\03__widl_f_set_default_playback_rate_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x13defaultPlaybackRate\x01\x13defaultPlaybackRate\0\0\0'__widl_f_playback_rate_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0CplaybackRate\x01\x0CplaybackRate\0\0\0+__widl_f_set_playback_rate_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0CplaybackRate\x01\x0CplaybackRate\0\0\0\x1F__widl_f_ended_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x05ended\x01\x05ended\0\0\0\"__widl_f_autoplay_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x08autoplay\x01\x08autoplay\0\0\0&__widl_f_set_autoplay_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x08autoplay\x01\x08autoplay\0\0\0\x1E__widl_f_loop_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x04loop\x01\x04loop\0\0\0\"__widl_f_set_loop_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x04loop\x01\x04loop\0\0\0\"__widl_f_controls_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x08controls\x01\x08controls\0\0\0&__widl_f_set_controls_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x08controls\x01\x08controls\0\0\0 __widl_f_volume_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x06volume\x01\x06volume\0\0\0$__widl_f_set_volume_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x06volume\x01\x06volume\0\0\0\x1F__widl_f_muted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x05muted\x01\x05muted\0\0\0#__widl_f_set_muted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x05muted\x01\x05muted\0\0\0'__widl_f_default_muted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0CdefaultMuted\x01\x0CdefaultMuted\0\0\0+__widl_f_set_default_muted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0CdefaultMuted\x01\x0CdefaultMuted\0\0\0%__widl_f_onencrypted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0Bonencrypted\x01\x0Bonencrypted\0\0\0)__widl_f_set_onencrypted_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0Bonencrypted\x01\x0Bonencrypted\0\0\0)__widl_f_onwaitingforkey_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x01\x0Fonwaitingforkey\x01\x0Fonwaitingforkey\0\0\0-__widl_f_set_onwaitingforkey_HTMLMediaElement\0\0\x01\x10HTMLMediaElement\x01\0\x02\x0Fonwaitingforkey\x01\x0Fonwaitingforkey\0\0\x02\rKeyboardEvent\x1F__widl_instanceof_KeyboardEvent\0\0\0\0\x1A__widl_f_new_KeyboardEvent\x01\0\x01\rKeyboardEvent\0\x01\x03new\0\0\0)__widl_f_get_modifier_state_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\0\x01\x10getModifierState\0\0\0*__widl_f_init_keyboard_event_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0;__widl_f_init_keyboard_event_with_bubbles_arg_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0N__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0[__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0g__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0x__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0\x85\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0\x91\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0\x9F\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0\xAC\x01__widl_f_init_keyboard_event_with_bubbles_arg_and_cancelable_arg_and_view_arg_and_key_arg_and_location_arg_and_ctrl_key_and_alt_key_and_shift_key_and_meta_key_KeyboardEvent\x01\0\x01\rKeyboardEvent\x01\0\0\x01\x11initKeyboardEvent\0\0\0 __widl_f_char_code_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x08charCode\x01\x08charCode\0\0\0\x1F__widl_f_key_code_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x07keyCode\x01\x07keyCode\0\0\0\x1E__widl_f_alt_key_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x06altKey\x01\x06altKey\0\0\0\x1F__widl_f_ctrl_key_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x07ctrlKey\x01\x07ctrlKey\0\0\0 __widl_f_shift_key_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x08shiftKey\x01\x08shiftKey\0\0\0\x1F__widl_f_meta_key_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x07metaKey\x01\x07metaKey\0\0\0\x1F__widl_f_location_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x08location\x01\x08location\0\0\0\x1D__widl_f_repeat_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x06repeat\x01\x06repeat\0\0\0#__widl_f_is_composing_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x0BisComposing\x01\x0BisComposing\0\0\0\x1A__widl_f_key_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x03key\x01\x03key\0\0\0\x1B__widl_f_code_KeyboardEvent\0\0\x01\rKeyboardEvent\x01\0\x01\x04code\x01\x04code\0\0\x02\nMouseEvent\x1C__widl_instanceof_MouseEvent\0\0\0\0\x17__widl_f_new_MouseEvent\x01\0\x01\nMouseEvent\0\x01\x03new\0\0\0&__widl_f_get_modifier_state_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x10getModifierState\0\0\0$__widl_f_init_mouse_event_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\08__widl_f_init_mouse_event_with_can_bubble_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0K__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0X__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0g__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0x__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\x89\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\x9A\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xAB\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xBC\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xCC\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xDE\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xEF\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\xFE\x01__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\x95\x02__widl_f_init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg_MouseEvent\0\0\x01\nMouseEvent\x01\0\0\x01\x0EinitMouseEvent\0\0\0\x1C__widl_f_screen_x_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07screenX\x01\x07screenX\0\0\0\x1C__widl_f_screen_y_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07screenY\x01\x07screenY\0\0\0\x1C__widl_f_client_x_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07clientX\x01\x07clientX\0\0\0\x1C__widl_f_client_y_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07clientY\x01\x07clientY\0\0\0\x15__widl_f_x_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x01x\x01\x01x\0\0\0\x15__widl_f_y_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x01y\x01\x01y\0\0\0\x1C__widl_f_offset_x_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07offsetX\x01\x07offsetX\0\0\0\x1C__widl_f_offset_y_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07offsetY\x01\x07offsetY\0\0\0\x1C__widl_f_ctrl_key_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07ctrlKey\x01\x07ctrlKey\0\0\0\x1D__widl_f_shift_key_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x08shiftKey\x01\x08shiftKey\0\0\0\x1B__widl_f_alt_key_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x06altKey\x01\x06altKey\0\0\0\x1C__widl_f_meta_key_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07metaKey\x01\x07metaKey\0\0\0\x1A__widl_f_button_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x06button\x01\x06button\0\0\0\x1B__widl_f_buttons_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x07buttons\x01\x07buttons\0\0\0\"__widl_f_related_target_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\rrelatedTarget\x01\rrelatedTarget\0\0\0\x1A__widl_f_region_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\x06region\x01\x06region\0\0\0\x1E__widl_f_movement_x_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\tmovementX\x01\tmovementX\0\0\0\x1E__widl_f_movement_y_MouseEvent\0\0\x01\nMouseEvent\x01\0\x01\tmovementY\x01\tmovementY\0\0\x02\x0BPerformance\x1D__widl_instanceof_Performance\0\0\0\0 __widl_f_clear_marks_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\nclearMarks\0\0\0/__widl_f_clear_marks_with_mark_name_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\nclearMarks\0\0\0#__widl_f_clear_measures_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\rclearMeasures\0\0\05__widl_f_clear_measures_with_measure_name_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\rclearMeasures\0\0\0+__widl_f_clear_resource_timings_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x14clearResourceTimings\0\0\0 __widl_f_get_entries_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\ngetEntries\0\0\0(__widl_f_get_entries_by_name_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x10getEntriesByName\0\0\08__widl_f_get_entries_by_name_with_entry_type_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x10getEntriesByName\0\0\0(__widl_f_get_entries_by_type_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x10getEntriesByType\0\0\0\x19__widl_f_mark_Performance\x01\0\x01\x0BPerformance\x01\0\0\x01\x04mark\0\0\0\x1C__widl_f_measure_Performance\x01\0\x01\x0BPerformance\x01\0\0\x01\x07measure\0\0\0,__widl_f_measure_with_start_mark_Performance\x01\0\x01\x0BPerformance\x01\0\0\x01\x07measure\0\0\09__widl_f_measure_with_start_mark_and_end_mark_Performance\x01\0\x01\x0BPerformance\x01\0\0\x01\x07measure\0\0\0\x18__widl_f_now_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x03now\0\0\04__widl_f_set_resource_timing_buffer_size_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x1BsetResourceTimingBufferSize\0\0\0\x1C__widl_f_to_json_Performance\0\0\x01\x0BPerformance\x01\0\0\x01\x06toJSON\0\0\0 __widl_f_time_origin_Performance\0\0\x01\x0BPerformance\x01\0\x01\ntimeOrigin\x01\ntimeOrigin\0\0\0\x1B__widl_f_timing_Performance\0\0\x01\x0BPerformance\x01\0\x01\x06timing\x01\x06timing\0\0\0/__widl_f_onresourcetimingbufferfull_Performance\0\0\x01\x0BPerformance\x01\0\x01\x1Aonresourcetimingbufferfull\x01\x1Aonresourcetimingbufferfull\0\0\03__widl_f_set_onresourcetimingbufferfull_Performance\0\0\x01\x0BPerformance\x01\0\x02\x1Aonresourcetimingbufferfull\x01\x1Aonresourcetimingbufferfull\0\0\x02\x11PerformanceTiming#__widl_instanceof_PerformanceTiming\0\0\0\0\"__widl_f_to_json_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\0\x01\x06toJSON\0\0\0+__widl_f_navigation_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0FnavigationStart\x01\x0FnavigationStart\0\0\0-__widl_f_unload_event_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x10unloadEventStart\x01\x10unloadEventStart\0\0\0+__widl_f_unload_event_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0EunloadEventEnd\x01\x0EunloadEventEnd\0\0\0)__widl_f_redirect_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\rredirectStart\x01\rredirectStart\0\0\0'__widl_f_redirect_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0BredirectEnd\x01\x0BredirectEnd\0\0\0&__widl_f_fetch_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\nfetchStart\x01\nfetchStart\0\0\0.__widl_f_domain_lookup_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x11domainLookupStart\x01\x11domainLookupStart\0\0\0,__widl_f_domain_lookup_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0FdomainLookupEnd\x01\x0FdomainLookupEnd\0\0\0(__widl_f_connect_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0CconnectStart\x01\x0CconnectStart\0\0\0&__widl_f_connect_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\nconnectEnd\x01\nconnectEnd\0\0\02__widl_f_secure_connection_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x15secureConnectionStart\x01\x15secureConnectionStart\0\0\0(__widl_f_request_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0CrequestStart\x01\x0CrequestStart\0\0\0)__widl_f_response_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\rresponseStart\x01\rresponseStart\0\0\0'__widl_f_response_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0BresponseEnd\x01\x0BresponseEnd\0\0\0&__widl_f_dom_loading_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\ndomLoading\x01\ndomLoading\0\0\0*__widl_f_dom_interactive_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0EdomInteractive\x01\x0EdomInteractive\0\0\09__widl_f_dom_content_loaded_event_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x1AdomContentLoadedEventStart\x01\x1AdomContentLoadedEventStart\0\0\07__widl_f_dom_content_loaded_event_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x18domContentLoadedEventEnd\x01\x18domContentLoadedEventEnd\0\0\0'__widl_f_dom_complete_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0BdomComplete\x01\x0BdomComplete\0\0\0+__widl_f_load_event_start_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0EloadEventStart\x01\x0EloadEventStart\0\0\0)__widl_f_load_event_end_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x0CloadEventEnd\x01\x0CloadEventEnd\0\0\02__widl_f_time_to_non_blank_paint_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x13timeToNonBlankPaint\x01\x13timeToNonBlankPaint\0\0\06__widl_f_time_to_dom_content_flushed_PerformanceTiming\0\0\x01\x11PerformanceTiming\x01\0\x01\x17timeToDOMContentFlushed\x01\x17timeToDOMContentFlushed\0\0\x02\x06Window\x18__widl_instanceof_Window\0\0\0\0\x15__widl_f_alert_Window\x01\0\x01\x06Window\x01\0\0\x01\x05alert\0\0\0\"__widl_f_alert_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x05alert\0\0\0\x14__widl_f_blur_Window\x01\0\x01\x06Window\x01\0\0\x01\x04blur\0\0\0&__widl_f_cancel_animation_frame_Window\x01\0\x01\x06Window\x01\0\0\x01\x14cancelAnimationFrame\0\0\0$__widl_f_cancel_idle_callback_Window\0\0\x01\x06Window\x01\0\0\x01\x12cancelIdleCallback\0\0\0\x1E__widl_f_capture_events_Window\0\0\x01\x06Window\x01\0\0\x01\rcaptureEvents\0\0\0\x15__widl_f_close_Window\x01\0\x01\x06Window\x01\0\0\x01\x05close\0\0\0\x17__widl_f_confirm_Window\x01\0\x01\x06Window\x01\0\0\x01\x07confirm\0\0\0$__widl_f_confirm_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x07confirm\0\0\0\x15__widl_f_focus_Window\x01\0\x01\x06Window\x01\0\0\x01\x05focus\0\0\0\x17__widl_f_move_by_Window\x01\0\x01\x06Window\x01\0\0\x01\x06moveBy\0\0\0\x17__widl_f_move_to_Window\x01\0\x01\x06Window\x01\0\0\x01\x06moveTo\0\0\0\x14__widl_f_open_Window\x01\0\x01\x06Window\x01\0\0\x01\x04open\0\0\0\x1D__widl_f_open_with_url_Window\x01\0\x01\x06Window\x01\0\0\x01\x04open\0\0\0(__widl_f_open_with_url_and_target_Window\x01\0\x01\x06Window\x01\0\0\x01\x04open\0\0\05__widl_f_open_with_url_and_target_and_features_Window\x01\0\x01\x06Window\x01\0\0\x01\x04open\0\0\0\x1C__widl_f_post_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BpostMessage\0\0\0*__widl_f_post_message_with_transfer_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BpostMessage\0\0\0\x15__widl_f_print_Window\x01\0\x01\x06Window\x01\0\0\x01\x05print\0\0\0\x16__widl_f_prompt_Window\x01\0\x01\x06Window\x01\0\0\x01\x06prompt\0\0\0#__widl_f_prompt_with_message_Window\x01\0\x01\x06Window\x01\0\0\x01\x06prompt\0\0\0/__widl_f_prompt_with_message_and_default_Window\x01\0\x01\x06Window\x01\0\0\x01\x06prompt\0\0\0\x1E__widl_f_release_events_Window\0\0\x01\x06Window\x01\0\0\x01\rreleaseEvents\0\0\0'__widl_f_request_animation_frame_Window\x01\0\x01\x06Window\x01\0\0\x01\x15requestAnimationFrame\0\0\0%__widl_f_request_idle_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\x13requestIdleCallback\0\0\0\x19__widl_f_resize_by_Window\x01\0\x01\x06Window\x01\0\0\x01\x08resizeBy\0\0\0\x19__widl_f_resize_to_Window\x01\0\x01\x06Window\x01\0\0\x01\x08resizeTo\0\0\0#__widl_f_scroll_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x06scroll\0\0\0\x16__widl_f_scroll_Window\0\0\x01\x06Window\x01\0\0\x01\x06scroll\0\0\0&__widl_f_scroll_by_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x08scrollBy\0\0\0\x19__widl_f_scroll_by_Window\0\0\x01\x06Window\x01\0\0\x01\x08scrollBy\0\0\0&__widl_f_scroll_to_with_x_and_y_Window\0\0\x01\x06Window\x01\0\0\x01\x08scrollTo\0\0\0\x19__widl_f_scroll_to_Window\0\0\x01\x06Window\x01\0\0\x01\x08scrollTo\0\0\0\x14__widl_f_stop_Window\x01\0\x01\x06Window\x01\0\0\x01\x04stop\0\0\0\x13__widl_f_get_Window\0\0\x01\x06Window\x01\0\x03\x01\x03get\0\0\0\x16__widl_f_window_Window\0\0\x01\x06Window\x01\0\x01\x06window\x01\x06window\0\0\0\x14__widl_f_self_Window\0\0\x01\x06Window\x01\0\x01\x04self\x01\x04self\0\0\0\x18__widl_f_document_Window\0\0\x01\x06Window\x01\0\x01\x08document\x01\x08document\0\0\0\x14__widl_f_name_Window\x01\0\x01\x06Window\x01\0\x01\x04name\x01\x04name\0\0\0\x18__widl_f_set_name_Window\x01\0\x01\x06Window\x01\0\x02\x04name\x01\x04name\0\0\0\x16__widl_f_status_Window\x01\0\x01\x06Window\x01\0\x01\x06status\x01\x06status\0\0\0\x1A__widl_f_set_status_Window\x01\0\x01\x06Window\x01\0\x02\x06status\x01\x06status\0\0\0\x16__widl_f_closed_Window\x01\0\x01\x06Window\x01\0\x01\x06closed\x01\x06closed\0\0\0\x15__widl_f_event_Window\0\0\x01\x06Window\x01\0\x01\x05event\x01\x05event\0\0\0\x16__widl_f_frames_Window\x01\0\x01\x06Window\x01\0\x01\x06frames\x01\x06frames\0\0\0\x16__widl_f_length_Window\0\0\x01\x06Window\x01\0\x01\x06length\x01\x06length\0\0\0\x13__widl_f_top_Window\x01\0\x01\x06Window\x01\0\x01\x03top\x01\x03top\0\0\0\x16__widl_f_opener_Window\x01\0\x01\x06Window\x01\0\x01\x06opener\x01\x06opener\0\0\0\x1A__widl_f_set_opener_Window\x01\0\x01\x06Window\x01\0\x02\x06opener\x01\x06opener\0\0\0\x16__widl_f_parent_Window\x01\0\x01\x06Window\x01\0\x01\x06parent\x01\x06parent\0\0\0\x1D__widl_f_frame_element_Window\x01\0\x01\x06Window\x01\0\x01\x0CframeElement\x01\x0CframeElement\0\0\0\x1E__widl_f_onappinstalled_Window\0\0\x01\x06Window\x01\0\x01\x0Eonappinstalled\x01\x0Eonappinstalled\0\0\0\"__widl_f_set_onappinstalled_Window\0\0\x01\x06Window\x01\0\x02\x0Eonappinstalled\x01\x0Eonappinstalled\0\0\0\x1B__widl_f_inner_width_Window\x01\0\x01\x06Window\x01\0\x01\ninnerWidth\x01\ninnerWidth\0\0\0\x1F__widl_f_set_inner_width_Window\x01\0\x01\x06Window\x01\0\x02\ninnerWidth\x01\ninnerWidth\0\0\0\x1C__widl_f_inner_height_Window\x01\0\x01\x06Window\x01\0\x01\x0BinnerHeight\x01\x0BinnerHeight\0\0\0 __widl_f_set_inner_height_Window\x01\0\x01\x06Window\x01\0\x02\x0BinnerHeight\x01\x0BinnerHeight\0\0\0\x18__widl_f_scroll_x_Window\x01\0\x01\x06Window\x01\0\x01\x07scrollX\x01\x07scrollX\0\0\0\x1D__widl_f_page_x_offset_Window\x01\0\x01\x06Window\x01\0\x01\x0BpageXOffset\x01\x0BpageXOffset\0\0\0\x18__widl_f_scroll_y_Window\x01\0\x01\x06Window\x01\0\x01\x07scrollY\x01\x07scrollY\0\0\0\x1D__widl_f_page_y_offset_Window\x01\0\x01\x06Window\x01\0\x01\x0BpageYOffset\x01\x0BpageYOffset\0\0\0\x18__widl_f_screen_x_Window\x01\0\x01\x06Window\x01\0\x01\x07screenX\x01\x07screenX\0\0\0\x1C__widl_f_set_screen_x_Window\x01\0\x01\x06Window\x01\0\x02\x07screenX\x01\x07screenX\0\0\0\x18__widl_f_screen_y_Window\x01\0\x01\x06Window\x01\0\x01\x07screenY\x01\x07screenY\0\0\0\x1C__widl_f_set_screen_y_Window\x01\0\x01\x06Window\x01\0\x02\x07screenY\x01\x07screenY\0\0\0\x1B__widl_f_outer_width_Window\x01\0\x01\x06Window\x01\0\x01\nouterWidth\x01\nouterWidth\0\0\0\x1F__widl_f_set_outer_width_Window\x01\0\x01\x06Window\x01\0\x02\nouterWidth\x01\nouterWidth\0\0\0\x1C__widl_f_outer_height_Window\x01\0\x01\x06Window\x01\0\x01\x0BouterHeight\x01\x0BouterHeight\0\0\0 __widl_f_set_outer_height_Window\x01\0\x01\x06Window\x01\0\x02\x0BouterHeight\x01\x0BouterHeight\0\0\0\"__widl_f_device_pixel_ratio_Window\0\0\x01\x06Window\x01\0\x01\x10devicePixelRatio\x01\x10devicePixelRatio\0\0\0\x1B__widl_f_performance_Window\0\0\x01\x06Window\x01\0\x01\x0Bperformance\x01\x0Bperformance\0\0\0\x1B__widl_f_orientation_Window\0\0\x01\x06Window\x01\0\x01\x0Borientation\x01\x0Borientation\0\0\0#__widl_f_onorientationchange_Window\0\0\x01\x06Window\x01\0\x01\x13onorientationchange\x01\x13onorientationchange\0\0\0'__widl_f_set_onorientationchange_Window\0\0\x01\x06Window\x01\0\x02\x13onorientationchange\x01\x13onorientationchange\0\0\0\"__widl_f_onvrdisplayconnect_Window\0\0\x01\x06Window\x01\0\x01\x12onvrdisplayconnect\x01\x12onvrdisplayconnect\0\0\0&__widl_f_set_onvrdisplayconnect_Window\0\0\x01\x06Window\x01\0\x02\x12onvrdisplayconnect\x01\x12onvrdisplayconnect\0\0\0%__widl_f_onvrdisplaydisconnect_Window\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydisconnect\x01\x15onvrdisplaydisconnect\0\0\0)__widl_f_set_onvrdisplaydisconnect_Window\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydisconnect\x01\x15onvrdisplaydisconnect\0\0\0#__widl_f_onvrdisplayactivate_Window\0\0\x01\x06Window\x01\0\x01\x13onvrdisplayactivate\x01\x13onvrdisplayactivate\0\0\0'__widl_f_set_onvrdisplayactivate_Window\0\0\x01\x06Window\x01\0\x02\x13onvrdisplayactivate\x01\x13onvrdisplayactivate\0\0\0%__widl_f_onvrdisplaydeactivate_Window\0\0\x01\x06Window\x01\0\x01\x15onvrdisplaydeactivate\x01\x15onvrdisplaydeactivate\0\0\0)__widl_f_set_onvrdisplaydeactivate_Window\0\0\x01\x06Window\x01\0\x02\x15onvrdisplaydeactivate\x01\x15onvrdisplaydeactivate\0\0\0(__widl_f_onvrdisplaypresentchange_Window\0\0\x01\x06Window\x01\0\x01\x18onvrdisplaypresentchange\x01\x18onvrdisplaypresentchange\0\0\0,__widl_f_set_onvrdisplaypresentchange_Window\0\0\x01\x06Window\x01\0\x02\x18onvrdisplaypresentchange\x01\x18onvrdisplaypresentchange\0\0\0\x17__widl_f_onabort_Window\0\0\x01\x06Window\x01\0\x01\x07onabort\x01\x07onabort\0\0\0\x1B__widl_f_set_onabort_Window\0\0\x01\x06Window\x01\0\x02\x07onabort\x01\x07onabort\0\0\0\x16__widl_f_onblur_Window\0\0\x01\x06Window\x01\0\x01\x06onblur\x01\x06onblur\0\0\0\x1A__widl_f_set_onblur_Window\0\0\x01\x06Window\x01\0\x02\x06onblur\x01\x06onblur\0\0\0\x17__widl_f_onfocus_Window\0\0\x01\x06Window\x01\0\x01\x07onfocus\x01\x07onfocus\0\0\0\x1B__widl_f_set_onfocus_Window\0\0\x01\x06Window\x01\0\x02\x07onfocus\x01\x07onfocus\0\0\0\x1A__widl_f_onauxclick_Window\0\0\x01\x06Window\x01\0\x01\nonauxclick\x01\nonauxclick\0\0\0\x1E__widl_f_set_onauxclick_Window\0\0\x01\x06Window\x01\0\x02\nonauxclick\x01\nonauxclick\0\0\0\x19__widl_f_oncanplay_Window\0\0\x01\x06Window\x01\0\x01\toncanplay\x01\toncanplay\0\0\0\x1D__widl_f_set_oncanplay_Window\0\0\x01\x06Window\x01\0\x02\toncanplay\x01\toncanplay\0\0\0 __widl_f_oncanplaythrough_Window\0\0\x01\x06Window\x01\0\x01\x10oncanplaythrough\x01\x10oncanplaythrough\0\0\0$__widl_f_set_oncanplaythrough_Window\0\0\x01\x06Window\x01\0\x02\x10oncanplaythrough\x01\x10oncanplaythrough\0\0\0\x18__widl_f_onchange_Window\0\0\x01\x06Window\x01\0\x01\x08onchange\x01\x08onchange\0\0\0\x1C__widl_f_set_onchange_Window\0\0\x01\x06Window\x01\0\x02\x08onchange\x01\x08onchange\0\0\0\x17__widl_f_onclick_Window\0\0\x01\x06Window\x01\0\x01\x07onclick\x01\x07onclick\0\0\0\x1B__widl_f_set_onclick_Window\0\0\x01\x06Window\x01\0\x02\x07onclick\x01\x07onclick\0\0\0\x17__widl_f_onclose_Window\0\0\x01\x06Window\x01\0\x01\x07onclose\x01\x07onclose\0\0\0\x1B__widl_f_set_onclose_Window\0\0\x01\x06Window\x01\0\x02\x07onclose\x01\x07onclose\0\0\0\x1D__widl_f_oncontextmenu_Window\0\0\x01\x06Window\x01\0\x01\roncontextmenu\x01\roncontextmenu\0\0\0!__widl_f_set_oncontextmenu_Window\0\0\x01\x06Window\x01\0\x02\roncontextmenu\x01\roncontextmenu\0\0\0\x1A__widl_f_ondblclick_Window\0\0\x01\x06Window\x01\0\x01\nondblclick\x01\nondblclick\0\0\0\x1E__widl_f_set_ondblclick_Window\0\0\x01\x06Window\x01\0\x02\nondblclick\x01\nondblclick\0\0\0\x16__widl_f_ondrag_Window\0\0\x01\x06Window\x01\0\x01\x06ondrag\x01\x06ondrag\0\0\0\x1A__widl_f_set_ondrag_Window\0\0\x01\x06Window\x01\0\x02\x06ondrag\x01\x06ondrag\0\0\0\x19__widl_f_ondragend_Window\0\0\x01\x06Window\x01\0\x01\tondragend\x01\tondragend\0\0\0\x1D__widl_f_set_ondragend_Window\0\0\x01\x06Window\x01\0\x02\tondragend\x01\tondragend\0\0\0\x1B__widl_f_ondragenter_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragenter\x01\x0Bondragenter\0\0\0\x1F__widl_f_set_ondragenter_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragenter\x01\x0Bondragenter\0\0\0\x1A__widl_f_ondragexit_Window\0\0\x01\x06Window\x01\0\x01\nondragexit\x01\nondragexit\0\0\0\x1E__widl_f_set_ondragexit_Window\0\0\x01\x06Window\x01\0\x02\nondragexit\x01\nondragexit\0\0\0\x1B__widl_f_ondragleave_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragleave\x01\x0Bondragleave\0\0\0\x1F__widl_f_set_ondragleave_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragleave\x01\x0Bondragleave\0\0\0\x1A__widl_f_ondragover_Window\0\0\x01\x06Window\x01\0\x01\nondragover\x01\nondragover\0\0\0\x1E__widl_f_set_ondragover_Window\0\0\x01\x06Window\x01\0\x02\nondragover\x01\nondragover\0\0\0\x1B__widl_f_ondragstart_Window\0\0\x01\x06Window\x01\0\x01\x0Bondragstart\x01\x0Bondragstart\0\0\0\x1F__widl_f_set_ondragstart_Window\0\0\x01\x06Window\x01\0\x02\x0Bondragstart\x01\x0Bondragstart\0\0\0\x16__widl_f_ondrop_Window\0\0\x01\x06Window\x01\0\x01\x06ondrop\x01\x06ondrop\0\0\0\x1A__widl_f_set_ondrop_Window\0\0\x01\x06Window\x01\0\x02\x06ondrop\x01\x06ondrop\0\0\0 __widl_f_ondurationchange_Window\0\0\x01\x06Window\x01\0\x01\x10ondurationchange\x01\x10ondurationchange\0\0\0$__widl_f_set_ondurationchange_Window\0\0\x01\x06Window\x01\0\x02\x10ondurationchange\x01\x10ondurationchange\0\0\0\x19__widl_f_onemptied_Window\0\0\x01\x06Window\x01\0\x01\tonemptied\x01\tonemptied\0\0\0\x1D__widl_f_set_onemptied_Window\0\0\x01\x06Window\x01\0\x02\tonemptied\x01\tonemptied\0\0\0\x17__widl_f_onended_Window\0\0\x01\x06Window\x01\0\x01\x07onended\x01\x07onended\0\0\0\x1B__widl_f_set_onended_Window\0\0\x01\x06Window\x01\0\x02\x07onended\x01\x07onended\0\0\0\x17__widl_f_oninput_Window\0\0\x01\x06Window\x01\0\x01\x07oninput\x01\x07oninput\0\0\0\x1B__widl_f_set_oninput_Window\0\0\x01\x06Window\x01\0\x02\x07oninput\x01\x07oninput\0\0\0\x19__widl_f_oninvalid_Window\0\0\x01\x06Window\x01\0\x01\toninvalid\x01\toninvalid\0\0\0\x1D__widl_f_set_oninvalid_Window\0\0\x01\x06Window\x01\0\x02\toninvalid\x01\toninvalid\0\0\0\x19__widl_f_onkeydown_Window\0\0\x01\x06Window\x01\0\x01\tonkeydown\x01\tonkeydown\0\0\0\x1D__widl_f_set_onkeydown_Window\0\0\x01\x06Window\x01\0\x02\tonkeydown\x01\tonkeydown\0\0\0\x1A__widl_f_onkeypress_Window\0\0\x01\x06Window\x01\0\x01\nonkeypress\x01\nonkeypress\0\0\0\x1E__widl_f_set_onkeypress_Window\0\0\x01\x06Window\x01\0\x02\nonkeypress\x01\nonkeypress\0\0\0\x17__widl_f_onkeyup_Window\0\0\x01\x06Window\x01\0\x01\x07onkeyup\x01\x07onkeyup\0\0\0\x1B__widl_f_set_onkeyup_Window\0\0\x01\x06Window\x01\0\x02\x07onkeyup\x01\x07onkeyup\0\0\0\x16__widl_f_onload_Window\0\0\x01\x06Window\x01\0\x01\x06onload\x01\x06onload\0\0\0\x1A__widl_f_set_onload_Window\0\0\x01\x06Window\x01\0\x02\x06onload\x01\x06onload\0\0\0\x1C__widl_f_onloadeddata_Window\0\0\x01\x06Window\x01\0\x01\x0Conloadeddata\x01\x0Conloadeddata\0\0\0 __widl_f_set_onloadeddata_Window\0\0\x01\x06Window\x01\0\x02\x0Conloadeddata\x01\x0Conloadeddata\0\0\0 __widl_f_onloadedmetadata_Window\0\0\x01\x06Window\x01\0\x01\x10onloadedmetadata\x01\x10onloadedmetadata\0\0\0$__widl_f_set_onloadedmetadata_Window\0\0\x01\x06Window\x01\0\x02\x10onloadedmetadata\x01\x10onloadedmetadata\0\0\0\x19__widl_f_onloadend_Window\0\0\x01\x06Window\x01\0\x01\tonloadend\x01\tonloadend\0\0\0\x1D__widl_f_set_onloadend_Window\0\0\x01\x06Window\x01\0\x02\tonloadend\x01\tonloadend\0\0\0\x1B__widl_f_onloadstart_Window\0\0\x01\x06Window\x01\0\x01\x0Bonloadstart\x01\x0Bonloadstart\0\0\0\x1F__widl_f_set_onloadstart_Window\0\0\x01\x06Window\x01\0\x02\x0Bonloadstart\x01\x0Bonloadstart\0\0\0\x1B__widl_f_onmousedown_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmousedown\x01\x0Bonmousedown\0\0\0\x1F__widl_f_set_onmousedown_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmousedown\x01\x0Bonmousedown\0\0\0\x1C__widl_f_onmouseenter_Window\0\0\x01\x06Window\x01\0\x01\x0Conmouseenter\x01\x0Conmouseenter\0\0\0 __widl_f_set_onmouseenter_Window\0\0\x01\x06Window\x01\0\x02\x0Conmouseenter\x01\x0Conmouseenter\0\0\0\x1C__widl_f_onmouseleave_Window\0\0\x01\x06Window\x01\0\x01\x0Conmouseleave\x01\x0Conmouseleave\0\0\0 __widl_f_set_onmouseleave_Window\0\0\x01\x06Window\x01\0\x02\x0Conmouseleave\x01\x0Conmouseleave\0\0\0\x1B__widl_f_onmousemove_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmousemove\x01\x0Bonmousemove\0\0\0\x1F__widl_f_set_onmousemove_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmousemove\x01\x0Bonmousemove\0\0\0\x1A__widl_f_onmouseout_Window\0\0\x01\x06Window\x01\0\x01\nonmouseout\x01\nonmouseout\0\0\0\x1E__widl_f_set_onmouseout_Window\0\0\x01\x06Window\x01\0\x02\nonmouseout\x01\nonmouseout\0\0\0\x1B__widl_f_onmouseover_Window\0\0\x01\x06Window\x01\0\x01\x0Bonmouseover\x01\x0Bonmouseover\0\0\0\x1F__widl_f_set_onmouseover_Window\0\0\x01\x06Window\x01\0\x02\x0Bonmouseover\x01\x0Bonmouseover\0\0\0\x19__widl_f_onmouseup_Window\0\0\x01\x06Window\x01\0\x01\tonmouseup\x01\tonmouseup\0\0\0\x1D__widl_f_set_onmouseup_Window\0\0\x01\x06Window\x01\0\x02\tonmouseup\x01\tonmouseup\0\0\0\x17__widl_f_onwheel_Window\0\0\x01\x06Window\x01\0\x01\x07onwheel\x01\x07onwheel\0\0\0\x1B__widl_f_set_onwheel_Window\0\0\x01\x06Window\x01\0\x02\x07onwheel\x01\x07onwheel\0\0\0\x17__widl_f_onpause_Window\0\0\x01\x06Window\x01\0\x01\x07onpause\x01\x07onpause\0\0\0\x1B__widl_f_set_onpause_Window\0\0\x01\x06Window\x01\0\x02\x07onpause\x01\x07onpause\0\0\0\x16__widl_f_onplay_Window\0\0\x01\x06Window\x01\0\x01\x06onplay\x01\x06onplay\0\0\0\x1A__widl_f_set_onplay_Window\0\0\x01\x06Window\x01\0\x02\x06onplay\x01\x06onplay\0\0\0\x19__widl_f_onplaying_Window\0\0\x01\x06Window\x01\0\x01\tonplaying\x01\tonplaying\0\0\0\x1D__widl_f_set_onplaying_Window\0\0\x01\x06Window\x01\0\x02\tonplaying\x01\tonplaying\0\0\0\x1A__widl_f_onprogress_Window\0\0\x01\x06Window\x01\0\x01\nonprogress\x01\nonprogress\0\0\0\x1E__widl_f_set_onprogress_Window\0\0\x01\x06Window\x01\0\x02\nonprogress\x01\nonprogress\0\0\0\x1C__widl_f_onratechange_Window\0\0\x01\x06Window\x01\0\x01\x0Conratechange\x01\x0Conratechange\0\0\0 __widl_f_set_onratechange_Window\0\0\x01\x06Window\x01\0\x02\x0Conratechange\x01\x0Conratechange\0\0\0\x17__widl_f_onreset_Window\0\0\x01\x06Window\x01\0\x01\x07onreset\x01\x07onreset\0\0\0\x1B__widl_f_set_onreset_Window\0\0\x01\x06Window\x01\0\x02\x07onreset\x01\x07onreset\0\0\0\x18__widl_f_onresize_Window\0\0\x01\x06Window\x01\0\x01\x08onresize\x01\x08onresize\0\0\0\x1C__widl_f_set_onresize_Window\0\0\x01\x06Window\x01\0\x02\x08onresize\x01\x08onresize\0\0\0\x18__widl_f_onscroll_Window\0\0\x01\x06Window\x01\0\x01\x08onscroll\x01\x08onscroll\0\0\0\x1C__widl_f_set_onscroll_Window\0\0\x01\x06Window\x01\0\x02\x08onscroll\x01\x08onscroll\0\0\0\x18__widl_f_onseeked_Window\0\0\x01\x06Window\x01\0\x01\x08onseeked\x01\x08onseeked\0\0\0\x1C__widl_f_set_onseeked_Window\0\0\x01\x06Window\x01\0\x02\x08onseeked\x01\x08onseeked\0\0\0\x19__widl_f_onseeking_Window\0\0\x01\x06Window\x01\0\x01\tonseeking\x01\tonseeking\0\0\0\x1D__widl_f_set_onseeking_Window\0\0\x01\x06Window\x01\0\x02\tonseeking\x01\tonseeking\0\0\0\x18__widl_f_onselect_Window\0\0\x01\x06Window\x01\0\x01\x08onselect\x01\x08onselect\0\0\0\x1C__widl_f_set_onselect_Window\0\0\x01\x06Window\x01\0\x02\x08onselect\x01\x08onselect\0\0\0\x16__widl_f_onshow_Window\0\0\x01\x06Window\x01\0\x01\x06onshow\x01\x06onshow\0\0\0\x1A__widl_f_set_onshow_Window\0\0\x01\x06Window\x01\0\x02\x06onshow\x01\x06onshow\0\0\0\x19__widl_f_onstalled_Window\0\0\x01\x06Window\x01\0\x01\tonstalled\x01\tonstalled\0\0\0\x1D__widl_f_set_onstalled_Window\0\0\x01\x06Window\x01\0\x02\tonstalled\x01\tonstalled\0\0\0\x18__widl_f_onsubmit_Window\0\0\x01\x06Window\x01\0\x01\x08onsubmit\x01\x08onsubmit\0\0\0\x1C__widl_f_set_onsubmit_Window\0\0\x01\x06Window\x01\0\x02\x08onsubmit\x01\x08onsubmit\0\0\0\x19__widl_f_onsuspend_Window\0\0\x01\x06Window\x01\0\x01\tonsuspend\x01\tonsuspend\0\0\0\x1D__widl_f_set_onsuspend_Window\0\0\x01\x06Window\x01\0\x02\tonsuspend\x01\tonsuspend\0\0\0\x1C__widl_f_ontimeupdate_Window\0\0\x01\x06Window\x01\0\x01\x0Contimeupdate\x01\x0Contimeupdate\0\0\0 __widl_f_set_ontimeupdate_Window\0\0\x01\x06Window\x01\0\x02\x0Contimeupdate\x01\x0Contimeupdate\0\0\0\x1E__widl_f_onvolumechange_Window\0\0\x01\x06Window\x01\0\x01\x0Eonvolumechange\x01\x0Eonvolumechange\0\0\0\"__widl_f_set_onvolumechange_Window\0\0\x01\x06Window\x01\0\x02\x0Eonvolumechange\x01\x0Eonvolumechange\0\0\0\x19__widl_f_onwaiting_Window\0\0\x01\x06Window\x01\0\x01\tonwaiting\x01\tonwaiting\0\0\0\x1D__widl_f_set_onwaiting_Window\0\0\x01\x06Window\x01\0\x02\tonwaiting\x01\tonwaiting\0\0\0\x1D__widl_f_onselectstart_Window\0\0\x01\x06Window\x01\0\x01\ronselectstart\x01\ronselectstart\0\0\0!__widl_f_set_onselectstart_Window\0\0\x01\x06Window\x01\0\x02\ronselectstart\x01\ronselectstart\0\0\0\x18__widl_f_ontoggle_Window\0\0\x01\x06Window\x01\0\x01\x08ontoggle\x01\x08ontoggle\0\0\0\x1C__widl_f_set_ontoggle_Window\0\0\x01\x06Window\x01\0\x02\x08ontoggle\x01\x08ontoggle\0\0\0\x1F__widl_f_onpointercancel_Window\0\0\x01\x06Window\x01\0\x01\x0Fonpointercancel\x01\x0Fonpointercancel\0\0\0#__widl_f_set_onpointercancel_Window\0\0\x01\x06Window\x01\0\x02\x0Fonpointercancel\x01\x0Fonpointercancel\0\0\0\x1D__widl_f_onpointerdown_Window\0\0\x01\x06Window\x01\0\x01\ronpointerdown\x01\ronpointerdown\0\0\0!__widl_f_set_onpointerdown_Window\0\0\x01\x06Window\x01\0\x02\ronpointerdown\x01\ronpointerdown\0\0\0\x1B__widl_f_onpointerup_Window\0\0\x01\x06Window\x01\0\x01\x0Bonpointerup\x01\x0Bonpointerup\0\0\0\x1F__widl_f_set_onpointerup_Window\0\0\x01\x06Window\x01\0\x02\x0Bonpointerup\x01\x0Bonpointerup\0\0\0\x1D__widl_f_onpointermove_Window\0\0\x01\x06Window\x01\0\x01\ronpointermove\x01\ronpointermove\0\0\0!__widl_f_set_onpointermove_Window\0\0\x01\x06Window\x01\0\x02\ronpointermove\x01\ronpointermove\0\0\0\x1C__widl_f_onpointerout_Window\0\0\x01\x06Window\x01\0\x01\x0Conpointerout\x01\x0Conpointerout\0\0\0 __widl_f_set_onpointerout_Window\0\0\x01\x06Window\x01\0\x02\x0Conpointerout\x01\x0Conpointerout\0\0\0\x1D__widl_f_onpointerover_Window\0\0\x01\x06Window\x01\0\x01\ronpointerover\x01\ronpointerover\0\0\0!__widl_f_set_onpointerover_Window\0\0\x01\x06Window\x01\0\x02\ronpointerover\x01\ronpointerover\0\0\0\x1E__widl_f_onpointerenter_Window\0\0\x01\x06Window\x01\0\x01\x0Eonpointerenter\x01\x0Eonpointerenter\0\0\0\"__widl_f_set_onpointerenter_Window\0\0\x01\x06Window\x01\0\x02\x0Eonpointerenter\x01\x0Eonpointerenter\0\0\0\x1E__widl_f_onpointerleave_Window\0\0\x01\x06Window\x01\0\x01\x0Eonpointerleave\x01\x0Eonpointerleave\0\0\0\"__widl_f_set_onpointerleave_Window\0\0\x01\x06Window\x01\0\x02\x0Eonpointerleave\x01\x0Eonpointerleave\0\0\0#__widl_f_ongotpointercapture_Window\0\0\x01\x06Window\x01\0\x01\x13ongotpointercapture\x01\x13ongotpointercapture\0\0\0'__widl_f_set_ongotpointercapture_Window\0\0\x01\x06Window\x01\0\x02\x13ongotpointercapture\x01\x13ongotpointercapture\0\0\0$__widl_f_onlostpointercapture_Window\0\0\x01\x06Window\x01\0\x01\x14onlostpointercapture\x01\x14onlostpointercapture\0\0\0(__widl_f_set_onlostpointercapture_Window\0\0\x01\x06Window\x01\0\x02\x14onlostpointercapture\x01\x14onlostpointercapture\0\0\0!__widl_f_onanimationcancel_Window\0\0\x01\x06Window\x01\0\x01\x11onanimationcancel\x01\x11onanimationcancel\0\0\0%__widl_f_set_onanimationcancel_Window\0\0\x01\x06Window\x01\0\x02\x11onanimationcancel\x01\x11onanimationcancel\0\0\0\x1E__widl_f_onanimationend_Window\0\0\x01\x06Window\x01\0\x01\x0Eonanimationend\x01\x0Eonanimationend\0\0\0\"__widl_f_set_onanimationend_Window\0\0\x01\x06Window\x01\0\x02\x0Eonanimationend\x01\x0Eonanimationend\0\0\0$__widl_f_onanimationiteration_Window\0\0\x01\x06Window\x01\0\x01\x14onanimationiteration\x01\x14onanimationiteration\0\0\0(__widl_f_set_onanimationiteration_Window\0\0\x01\x06Window\x01\0\x02\x14onanimationiteration\x01\x14onanimationiteration\0\0\0 __widl_f_onanimationstart_Window\0\0\x01\x06Window\x01\0\x01\x10onanimationstart\x01\x10onanimationstart\0\0\0$__widl_f_set_onanimationstart_Window\0\0\x01\x06Window\x01\0\x02\x10onanimationstart\x01\x10onanimationstart\0\0\0\"__widl_f_ontransitioncancel_Window\0\0\x01\x06Window\x01\0\x01\x12ontransitioncancel\x01\x12ontransitioncancel\0\0\0&__widl_f_set_ontransitioncancel_Window\0\0\x01\x06Window\x01\0\x02\x12ontransitioncancel\x01\x12ontransitioncancel\0\0\0\x1F__widl_f_ontransitionend_Window\0\0\x01\x06Window\x01\0\x01\x0Fontransitionend\x01\x0Fontransitionend\0\0\0#__widl_f_set_ontransitionend_Window\0\0\x01\x06Window\x01\0\x02\x0Fontransitionend\x01\x0Fontransitionend\0\0\0\x1F__widl_f_ontransitionrun_Window\0\0\x01\x06Window\x01\0\x01\x0Fontransitionrun\x01\x0Fontransitionrun\0\0\0#__widl_f_set_ontransitionrun_Window\0\0\x01\x06Window\x01\0\x02\x0Fontransitionrun\x01\x0Fontransitionrun\0\0\0!__widl_f_ontransitionstart_Window\0\0\x01\x06Window\x01\0\x01\x11ontransitionstart\x01\x11ontransitionstart\0\0\0%__widl_f_set_ontransitionstart_Window\0\0\x01\x06Window\x01\0\x02\x11ontransitionstart\x01\x11ontransitionstart\0\0\0$__widl_f_onwebkitanimationend_Window\0\0\x01\x06Window\x01\0\x01\x14onwebkitanimationend\x01\x14onwebkitanimationend\0\0\0(__widl_f_set_onwebkitanimationend_Window\0\0\x01\x06Window\x01\0\x02\x14onwebkitanimationend\x01\x14onwebkitanimationend\0\0\0*__widl_f_onwebkitanimationiteration_Window\0\0\x01\x06Window\x01\0\x01\x1Aonwebkitanimationiteration\x01\x1Aonwebkitanimationiteration\0\0\0.__widl_f_set_onwebkitanimationiteration_Window\0\0\x01\x06Window\x01\0\x02\x1Aonwebkitanimationiteration\x01\x1Aonwebkitanimationiteration\0\0\0&__widl_f_onwebkitanimationstart_Window\0\0\x01\x06Window\x01\0\x01\x16onwebkitanimationstart\x01\x16onwebkitanimationstart\0\0\0*__widl_f_set_onwebkitanimationstart_Window\0\0\x01\x06Window\x01\0\x02\x16onwebkitanimationstart\x01\x16onwebkitanimationstart\0\0\0%__widl_f_onwebkittransitionend_Window\0\0\x01\x06Window\x01\0\x01\x15onwebkittransitionend\x01\x15onwebkittransitionend\0\0\0)__widl_f_set_onwebkittransitionend_Window\0\0\x01\x06Window\x01\0\x02\x15onwebkittransitionend\x01\x15onwebkittransitionend\0\0\0\x17__widl_f_onerror_Window\0\0\x01\x06Window\x01\0\x01\x07onerror\x01\x07onerror\0\0\0\x1B__widl_f_set_onerror_Window\0\0\x01\x06Window\x01\0\x02\x07onerror\x01\x07onerror\0\0\0\x1C__widl_f_ontouchstart_Window\0\0\x01\x06Window\x01\0\x01\x0Contouchstart\x01\x0Contouchstart\0\0\0 __widl_f_set_ontouchstart_Window\0\0\x01\x06Window\x01\0\x02\x0Contouchstart\x01\x0Contouchstart\0\0\0\x1A__widl_f_ontouchend_Window\0\0\x01\x06Window\x01\0\x01\nontouchend\x01\nontouchend\0\0\0\x1E__widl_f_set_ontouchend_Window\0\0\x01\x06Window\x01\0\x02\nontouchend\x01\nontouchend\0\0\0\x1B__widl_f_ontouchmove_Window\0\0\x01\x06Window\x01\0\x01\x0Bontouchmove\x01\x0Bontouchmove\0\0\0\x1F__widl_f_set_ontouchmove_Window\0\0\x01\x06Window\x01\0\x02\x0Bontouchmove\x01\x0Bontouchmove\0\0\0\x1D__widl_f_ontouchcancel_Window\0\0\x01\x06Window\x01\0\x01\rontouchcancel\x01\rontouchcancel\0\0\0!__widl_f_set_ontouchcancel_Window\0\0\x01\x06Window\x01\0\x02\rontouchcancel\x01\rontouchcancel\0\0\0\x1C__widl_f_onafterprint_Window\0\0\x01\x06Window\x01\0\x01\x0Conafterprint\x01\x0Conafterprint\0\0\0 __widl_f_set_onafterprint_Window\0\0\x01\x06Window\x01\0\x02\x0Conafterprint\x01\x0Conafterprint\0\0\0\x1D__widl_f_onbeforeprint_Window\0\0\x01\x06Window\x01\0\x01\ronbeforeprint\x01\ronbeforeprint\0\0\0!__widl_f_set_onbeforeprint_Window\0\0\x01\x06Window\x01\0\x02\ronbeforeprint\x01\ronbeforeprint\0\0\0\x1E__widl_f_onbeforeunload_Window\0\0\x01\x06Window\x01\0\x01\x0Eonbeforeunload\x01\x0Eonbeforeunload\0\0\0\"__widl_f_set_onbeforeunload_Window\0\0\x01\x06Window\x01\0\x02\x0Eonbeforeunload\x01\x0Eonbeforeunload\0\0\0\x1C__widl_f_onhashchange_Window\0\0\x01\x06Window\x01\0\x01\x0Conhashchange\x01\x0Conhashchange\0\0\0 __widl_f_set_onhashchange_Window\0\0\x01\x06Window\x01\0\x02\x0Conhashchange\x01\x0Conhashchange\0\0\0 __widl_f_onlanguagechange_Window\0\0\x01\x06Window\x01\0\x01\x10onlanguagechange\x01\x10onlanguagechange\0\0\0$__widl_f_set_onlanguagechange_Window\0\0\x01\x06Window\x01\0\x02\x10onlanguagechange\x01\x10onlanguagechange\0\0\0\x19__widl_f_onmessage_Window\0\0\x01\x06Window\x01\0\x01\tonmessage\x01\tonmessage\0\0\0\x1D__widl_f_set_onmessage_Window\0\0\x01\x06Window\x01\0\x02\tonmessage\x01\tonmessage\0\0\0\x1E__widl_f_onmessageerror_Window\0\0\x01\x06Window\x01\0\x01\x0Eonmessageerror\x01\x0Eonmessageerror\0\0\0\"__widl_f_set_onmessageerror_Window\0\0\x01\x06Window\x01\0\x02\x0Eonmessageerror\x01\x0Eonmessageerror\0\0\0\x19__widl_f_onoffline_Window\0\0\x01\x06Window\x01\0\x01\tonoffline\x01\tonoffline\0\0\0\x1D__widl_f_set_onoffline_Window\0\0\x01\x06Window\x01\0\x02\tonoffline\x01\tonoffline\0\0\0\x18__widl_f_ononline_Window\0\0\x01\x06Window\x01\0\x01\x08ononline\x01\x08ononline\0\0\0\x1C__widl_f_set_ononline_Window\0\0\x01\x06Window\x01\0\x02\x08ononline\x01\x08ononline\0\0\0\x1A__widl_f_onpagehide_Window\0\0\x01\x06Window\x01\0\x01\nonpagehide\x01\nonpagehide\0\0\0\x1E__widl_f_set_onpagehide_Window\0\0\x01\x06Window\x01\0\x02\nonpagehide\x01\nonpagehide\0\0\0\x1A__widl_f_onpageshow_Window\0\0\x01\x06Window\x01\0\x01\nonpageshow\x01\nonpageshow\0\0\0\x1E__widl_f_set_onpageshow_Window\0\0\x01\x06Window\x01\0\x02\nonpageshow\x01\nonpageshow\0\0\0\x1A__widl_f_onpopstate_Window\0\0\x01\x06Window\x01\0\x01\nonpopstate\x01\nonpopstate\0\0\0\x1E__widl_f_set_onpopstate_Window\0\0\x01\x06Window\x01\0\x02\nonpopstate\x01\nonpopstate\0\0\0\x19__widl_f_onstorage_Window\0\0\x01\x06Window\x01\0\x01\tonstorage\x01\tonstorage\0\0\0\x1D__widl_f_set_onstorage_Window\0\0\x01\x06Window\x01\0\x02\tonstorage\x01\tonstorage\0\0\0\x18__widl_f_onunload_Window\0\0\x01\x06Window\x01\0\x01\x08onunload\x01\x08onunload\0\0\0\x1C__widl_f_set_onunload_Window\0\0\x01\x06Window\x01\0\x02\x08onunload\x01\x08onunload\0\0\0\x14__widl_f_atob_Window\x01\0\x01\x06Window\x01\0\0\x01\x04atob\0\0\0\x14__widl_f_btoa_Window\x01\0\x01\x06Window\x01\0\0\x01\x04btoa\0\0\0\x1E__widl_f_clear_interval_Window\0\0\x01\x06Window\x01\0\0\x01\rclearInterval\0\0\0*__widl_f_clear_interval_with_handle_Window\0\0\x01\x06Window\x01\0\0\x01\rclearInterval\0\0\0\x1D__widl_f_clear_timeout_Window\0\0\x01\x06Window\x01\0\0\x01\x0CclearTimeout\0\0\0)__widl_f_clear_timeout_with_handle_Window\0\0\x01\x06Window\x01\0\0\x01\x0CclearTimeout\0\0\0;__widl_f_create_image_bitmap_with_html_image_element_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0<__widl_f_create_image_bitmap_with_html_canvas_element_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0D__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\06__widl_f_create_image_bitmap_with_buffer_source_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\01__widl_f_create_image_bitmap_with_u8_array_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0___widl_f_create_image_bitmap_with_html_image_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0`__widl_f_create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0h__widl_f_create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0Z__widl_f_create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0U__widl_f_create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh_Window\x01\0\x01\x06Window\x01\0\0\x01\x11createImageBitmap\0\0\0\x1E__widl_f_fetch_with_str_Window\0\0\x01\x06Window\x01\0\0\x01\x05fetch\0\0\0*__widl_f_set_interval_with_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0D__widl_f_set_interval_with_callback_and_timeout_and_arguments_Window\x01\x01\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_6_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0F__widl_f_set_interval_with_callback_and_timeout_and_arguments_7_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0%__widl_f_set_interval_with_str_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0<__widl_f_set_interval_with_str_and_timeout_and_unused_Window\x01\x01\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_0_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_1_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_2_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_3_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_4_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_5_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_6_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0>__widl_f_set_interval_with_str_and_timeout_and_unused_7_Window\x01\0\x01\x06Window\x01\0\0\x01\x0BsetInterval\0\0\0)__widl_f_set_timeout_with_callback_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0C__widl_f_set_timeout_with_callback_and_timeout_and_arguments_Window\x01\x01\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_0_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_1_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_2_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_3_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_4_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_5_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_6_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0E__widl_f_set_timeout_with_callback_and_timeout_and_arguments_7_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0$__widl_f_set_timeout_with_str_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0;__widl_f_set_timeout_with_str_and_timeout_and_unused_Window\x01\x01\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_0_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_1_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_2_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_3_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_4_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_5_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_6_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0=__widl_f_set_timeout_with_str_and_timeout_and_unused_7_Window\x01\0\x01\x06Window\x01\0\0\x01\nsetTimeout\0\0\0\x16__widl_f_origin_Window\0\0\x01\x06Window\x01\0\x01\x06origin\x01\x06origin\0\0\0!__widl_f_is_secure_context_Window\0\0\x01\x06Window\x01\0\x01\x0FisSecureContext\x01\x0FisSecureContext\0\0" ; pub mod console { # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_assert_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data ( condition : bool , data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_assert_with_condition_and_data_ ( condition , data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data ( condition : bool , data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_0 ( condition : bool ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_0_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; __widl_f_assert_with_condition_and_data_0_ ( condition ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_0 ( condition : bool ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_1 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_1_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_1_ ( condition , data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_1 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_2 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_2_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_2_ ( condition , data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_2 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_3 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_3_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_3_ ( condition , data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_3 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_4 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_4_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_4_ ( condition , data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_4 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_5 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_5_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_5_ ( condition , data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_5 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_6 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_6_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_6_ ( condition , data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_6 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_assert_with_condition_and_data_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < bool as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_7 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_assert_with_condition_and_data_7_ ( condition : < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let condition = < bool as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( condition , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_assert_with_condition_and_data_7_ ( condition , data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.assert()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn assert_with_condition_and_data_7 ( condition : bool , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_clear_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.clear()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn clear ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_clear_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_clear_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.clear()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn clear ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_count_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.count()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_count_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_count_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.count()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_count_with_label_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.count()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_with_label ( label : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_count_with_label_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; __widl_f_count_with_label_ ( label ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.count()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_with_label ( label : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_count_reset_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.countReset()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_reset ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_count_reset_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_count_reset_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.countReset()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_reset ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_count_reset_with_label_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.countReset()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_reset_with_label ( label : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_count_reset_with_label_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; __widl_f_count_reset_with_label_ ( label ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.countReset()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn count_reset_with_label ( label : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_debug_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_debug_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_debug_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_debug_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_debug_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_debug_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_debug_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_debug_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_debug_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_debug_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_debug_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.debug()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn debug_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_dir_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_dir_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_dir_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_dir_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_dir_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_dir_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_dir_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_dir_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dir_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dir_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_dir_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dir()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dir_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_dirxml_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_dirxml_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_dirxml_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_dirxml_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_dirxml_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_dirxml_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_dirxml_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_dirxml_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_dirxml_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_dirxml_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_dirxml_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.dirxml()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn dirxml_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_error_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_error_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_error_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_error_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_error_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_error_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_error_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_error_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_error_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_error_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_error_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.error()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn error_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_exception_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_exception_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_exception_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_exception_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_exception_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_exception_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_exception_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_exception_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_exception_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_exception_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_exception_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.exception()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn exception_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_group_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_group_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_group_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_group_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_group_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_group_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_group_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_group_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_group_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.group()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_group_collapsed_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_group_collapsed_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_group_collapsed_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_group_collapsed_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_group_collapsed_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_group_collapsed_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_group_collapsed_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_group_collapsed_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_collapsed_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_collapsed_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_group_collapsed_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupCollapsed()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_collapsed_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_group_end_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.groupEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_end ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_group_end_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_group_end_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.groupEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn group_end ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_info_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_info_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_info_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_info_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_info_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_info_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_info_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_info_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_info_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_info_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_info_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.info()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn info_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_log_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_log_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_log_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_log_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_log_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_log_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_log_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_log_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_log_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_log_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_log_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.log()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn log_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_profile_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_profile_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_profile_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_profile_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_profile_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_profile_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_profile_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_profile_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_profile_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profile()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_profile_end_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_profile_end_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_profile_end_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_profile_end_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_profile_end_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_profile_end_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_profile_end_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_profile_end_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_profile_end_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_profile_end_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_profile_end_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.profileEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn profile_end_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_table_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_table_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_table_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_table_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_table_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_table_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_table_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_table_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_table_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_table_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_table_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.table()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn table_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.time()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_time_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.time()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_with_label_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.time()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_with_label ( label : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_with_label_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; __widl_f_time_with_label_ ( label ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.time()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_with_label ( label : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_end_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_end ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_end_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_time_end_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_end ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_end_with_label_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_end_with_label ( label : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_end_with_label_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; __widl_f_time_end_with_label_ ( label ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeEnd()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_end_with_label ( label : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_time_log_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data ( label : & str , data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_time_log_with_label_and_data_ ( label , data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data ( label : & str , data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_0 ( label : & str ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_0_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; __widl_f_time_log_with_label_and_data_0_ ( label ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_0 ( label : & str ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_1 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_1_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_1_ ( label , data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_1 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_2 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_2_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_2_ ( label , data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_2 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_3 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_3_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_3_ ( label , data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_3 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_4 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_4_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_4_ ( label , data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_4 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_5 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_5_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_5_ ( label , data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_5 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_6 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_6_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_6_ ( label , data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_6 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_log_with_label_and_data_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 8u32 ) ; < & str as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_7 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_log_with_label_and_data_7_ ( label : < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let label = < & str as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( label , & mut __stack ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_time_log_with_label_and_data_7_ ( label , data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeLog()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_log_with_label_and_data_7 ( label : & str , data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_stamp_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeStamp()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_stamp ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_stamp_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_time_stamp_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeStamp()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_stamp ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_time_stamp_with_data_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.timeStamp()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_stamp_with_data ( data : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_time_stamp_with_data_ ( data : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_time_stamp_with_data_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.timeStamp()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn time_stamp_with_data ( data : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_trace_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_trace_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_trace_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_trace_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_trace_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_trace_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_trace_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_trace_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_trace_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_trace_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_trace_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.trace()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn trace_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: js_sys :: Array as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn ( data : & :: js_sys :: Array ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_ ( data : < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data = < & :: js_sys :: Array as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data , & mut __stack ) ; __widl_f_warn_ ( data ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn ( data : & :: js_sys :: Array ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_0_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 0u32 ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_0 ( ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_0_ ( ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; __widl_f_warn_0_ ( ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_0 ( ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_1_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 1u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_1_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; __widl_f_warn_1_ ( data_1 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_1 ( data_1 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_2_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 2u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_2_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; __widl_f_warn_2_ ( data_1 , data_2 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_2 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_3_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 3u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_3_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; __widl_f_warn_3_ ( data_1 , data_2 , data_3 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_3 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_4_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 4u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_4_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; __widl_f_warn_4_ ( data_1 , data_2 , data_3 , data_4 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_4 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_5_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 5u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_5_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; __widl_f_warn_5_ ( data_1 , data_2 , data_3 , data_4 , data_5 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_5 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_6_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 6u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_6_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; __widl_f_warn_6_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_6 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ no_mangle ] # [ allow ( non_snake_case ) ] # [ doc ( hidden ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ allow ( clippy :: all ) ] pub extern "C" fn __wbindgen_describe___widl_f_warn_7_ ( ) { use wasm_bindgen :: describe :: * ; :: wasm_bindgen :: __rt :: link_mem_intrinsics ( ) ; inform ( FUNCTION ) ; inform ( 0 ) ; inform ( 7u32 ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < & :: wasm_bindgen :: JsValue as WasmDescribe > :: describe ( ) ; < ( ) as WasmDescribe > :: describe ( ) ; } # [ allow ( bad_style ) ] # [ cfg ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { # [ link ( wasm_import_module = "__wbindgen_placeholder__" ) ] extern "C" { fn __widl_f_warn_7_ ( data_1 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_2 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_3 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_4 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_5 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_6 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi , data_7 : < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: Abi ) -> ( ) ; } unsafe { let _ret = { let mut __stack = :: wasm_bindgen :: convert :: GlobalStack :: new ( ) ; let data_1 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_1 , & mut __stack ) ; let data_2 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_2 , & mut __stack ) ; let data_3 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_3 , & mut __stack ) ; let data_4 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_4 , & mut __stack ) ; let data_5 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_5 , & mut __stack ) ; let data_6 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_6 , & mut __stack ) ; let data_7 = < & :: wasm_bindgen :: JsValue as :: wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi ( data_7 , & mut __stack ) ; __widl_f_warn_7_ ( data_1 , data_2 , data_3 , data_4 , data_5 , data_6 , data_7 ) } ; ( ) } } # [ allow ( bad_style , unused_variables ) ] # [ cfg ( not ( all ( target_arch = "wasm32" , not ( target_os = "emscripten" ) ) ) ) ] # [ doc = "The `console.warn()` function\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\n\n*This API requires the following crate features to be activated: `console`*" ] # [ allow ( clippy :: all ) ] pub fn warn_7 ( data_1 : & :: wasm_bindgen :: JsValue , data_2 : & :: wasm_bindgen :: JsValue , data_3 : & :: wasm_bindgen :: JsValue , data_4 : & :: wasm_bindgen :: JsValue , data_5 : & :: wasm_bindgen :: JsValue , data_6 : & :: wasm_bindgen :: JsValue , data_7 : & :: wasm_bindgen :: JsValue ) { panic ! ( "cannot call wasm-bindgen imported functions on \
                        non-wasm targets" ) ; } # [ allow ( non_upper_case_globals ) ] # [ cfg ( target_arch = "wasm32" ) ] # [ link_section = "__wasm_bindgen_unstable" ] # [ doc ( hidden ) ] # [ allow ( clippy :: all ) ] pub static __WASM_BINDGEN_GENERATED_30f73b1be23d393f : [ u8 ; 7023usize ] = * b".\0\0\0{\"schema_version\":\"0.2.37\",\"version\":\"0.2.37\"}9\x1B\0\0\0\0\x9E\x01\0\x01\x07console\0\x10__widl_f_assert_\0\0\0\x01\x06assert\0\x01\x07console\0(__widl_f_assert_with_condition_and_data_\0\x01\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_0_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_1_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_2_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_3_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_4_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_5_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_6_\0\0\0\x01\x06assert\0\x01\x07console\0*__widl_f_assert_with_condition_and_data_7_\0\0\0\x01\x06assert\0\x01\x07console\0\x0F__widl_f_clear_\0\0\0\x01\x05clear\0\x01\x07console\0\x0F__widl_f_count_\0\0\0\x01\x05count\0\x01\x07console\0\x1A__widl_f_count_with_label_\0\0\0\x01\x05count\0\x01\x07console\0\x15__widl_f_count_reset_\0\0\0\x01\ncountReset\0\x01\x07console\0 __widl_f_count_reset_with_label_\0\0\0\x01\ncountReset\0\x01\x07console\0\x0F__widl_f_debug_\0\x01\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_0_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_1_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_2_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_3_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_4_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_5_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_6_\0\0\0\x01\x05debug\0\x01\x07console\0\x11__widl_f_debug_7_\0\0\0\x01\x05debug\0\x01\x07console\0\r__widl_f_dir_\0\x01\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_0_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_1_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_2_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_3_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_4_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_5_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_6_\0\0\0\x01\x03dir\0\x01\x07console\0\x0F__widl_f_dir_7_\0\0\0\x01\x03dir\0\x01\x07console\0\x10__widl_f_dirxml_\0\x01\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_0_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_1_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_2_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_3_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_4_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_5_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_6_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x12__widl_f_dirxml_7_\0\0\0\x01\x06dirxml\0\x01\x07console\0\x0F__widl_f_error_\0\x01\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_0_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_1_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_2_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_3_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_4_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_5_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_6_\0\0\0\x01\x05error\0\x01\x07console\0\x11__widl_f_error_7_\0\0\0\x01\x05error\0\x01\x07console\0\x13__widl_f_exception_\0\x01\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_0_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_1_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_2_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_3_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_4_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_5_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_6_\0\0\0\x01\texception\0\x01\x07console\0\x15__widl_f_exception_7_\0\0\0\x01\texception\0\x01\x07console\0\x0F__widl_f_group_\0\x01\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_0_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_1_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_2_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_3_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_4_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_5_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_6_\0\0\0\x01\x05group\0\x01\x07console\0\x11__widl_f_group_7_\0\0\0\x01\x05group\0\x01\x07console\0\x19__widl_f_group_collapsed_\0\x01\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_0_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_1_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_2_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_3_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_4_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_5_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_6_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x1B__widl_f_group_collapsed_7_\0\0\0\x01\x0EgroupCollapsed\0\x01\x07console\0\x13__widl_f_group_end_\0\0\0\x01\x08groupEnd\0\x01\x07console\0\x0E__widl_f_info_\0\x01\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_0_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_1_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_2_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_3_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_4_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_5_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_6_\0\0\0\x01\x04info\0\x01\x07console\0\x10__widl_f_info_7_\0\0\0\x01\x04info\0\x01\x07console\0\r__widl_f_log_\0\x01\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_0_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_1_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_2_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_3_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_4_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_5_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_6_\0\0\0\x01\x03log\0\x01\x07console\0\x0F__widl_f_log_7_\0\0\0\x01\x03log\0\x01\x07console\0\x11__widl_f_profile_\0\x01\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_0_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_1_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_2_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_3_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_4_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_5_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_6_\0\0\0\x01\x07profile\0\x01\x07console\0\x13__widl_f_profile_7_\0\0\0\x01\x07profile\0\x01\x07console\0\x15__widl_f_profile_end_\0\x01\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_0_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_1_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_2_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_3_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_4_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_5_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_6_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x17__widl_f_profile_end_7_\0\0\0\x01\nprofileEnd\0\x01\x07console\0\x0F__widl_f_table_\0\x01\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_0_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_1_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_2_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_3_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_4_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_5_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_6_\0\0\0\x01\x05table\0\x01\x07console\0\x11__widl_f_table_7_\0\0\0\x01\x05table\0\x01\x07console\0\x0E__widl_f_time_\0\0\0\x01\x04time\0\x01\x07console\0\x19__widl_f_time_with_label_\0\0\0\x01\x04time\0\x01\x07console\0\x12__widl_f_time_end_\0\0\0\x01\x07timeEnd\0\x01\x07console\0\x1D__widl_f_time_end_with_label_\0\0\0\x01\x07timeEnd\0\x01\x07console\0\x12__widl_f_time_log_\0\0\0\x01\x07timeLog\0\x01\x07console\0&__widl_f_time_log_with_label_and_data_\0\x01\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_0_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_1_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_2_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_3_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_4_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_5_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_6_\0\0\0\x01\x07timeLog\0\x01\x07console\0(__widl_f_time_log_with_label_and_data_7_\0\0\0\x01\x07timeLog\0\x01\x07console\0\x14__widl_f_time_stamp_\0\0\0\x01\ttimeStamp\0\x01\x07console\0\x1E__widl_f_time_stamp_with_data_\0\0\0\x01\ttimeStamp\0\x01\x07console\0\x0F__widl_f_trace_\0\x01\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_0_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_1_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_2_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_3_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_4_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_5_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_6_\0\0\0\x01\x05trace\0\x01\x07console\0\x11__widl_f_trace_7_\0\0\0\x01\x05trace\0\x01\x07console\0\x0E__widl_f_warn_\0\x01\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_0_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_1_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_2_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_3_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_4_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_5_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_6_\0\0\0\x01\x04warn\0\x01\x07console\0\x10__widl_f_warn_7_\0\0\0\x01\x04warn\0\0" ; }